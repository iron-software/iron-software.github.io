{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronPDF | C# PDF Library Documentation | IronPDF",
    "keywords": "IronPDF IronPDF is a .NET library allowing the generation, reading, editing & saving PDF files in .NET projects. IronPDF features HTML to PDF for .NET Core, Standard, & Framework with full HTML to PDF support including CSS3 and JS. There is a quick-start guide at https://ironpdf.com/docs/ Compatibility Welcome the the cutting edge of .NET PDF rendering and manipulation technology with IronPDF now featuring Chrome identical HTML rendering with full support for: Generate PDFs in C# with HTML, MVC, ASPX, & images. Supports .NET Core 2, 3 & .NET 5, 6, 7, 8 for Windows, Linux, macOs and Azure. Supports applications and websites developed in .NET FrameWork 4+ for Windows and Azure HTML5 Bootstrap and Responsive CSS3 JavaScript including Angular and React SVG and all common image assets To Install: PM> Install-Package IronPdf Remove any reference to IronPdf.Threading which is now legacy software. The IronPdf main package is threading and async compatible! Try out the new 2021 API We haven’t broken the IronPDF API you are using, it will remain! However, the old style is being superseded by a better one to give you more control. For examples you now have Print options and Http Login controls specific to your renderer using IronPdf; //... ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.FitToPaperWidth = true; Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Screen; Renderer.RenderingOptions.PrintHtmlBackgrounds = true; Renderer.RenderingOptions.CreatePdfFormsFromHtml = true; var doc = Renderer.RenderHtmlAsPdf(\"<h1>Hello world!</h1>\"); //var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); //var doc = Renderer.RenderHtmlFileAsPdf(\"example.html\"); doc.SaveAs(\"google_chrome.pdf\"); Pixel perfect Chrome rendering! This example will give you PDFs which are pixel perfect to the latest chrome desktop browser’s “print to pdf” functionality: ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Print; Renderer.RenderingOptions.PrintHtmlBackgrounds = false; Renderer.RenderingOptions.CreatePdfFormsFromHtml = false; var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); However...we would recommend using improved features such as: Using screen stylesheets to print PDFs which are less fiddly to develop and more true to existing web assets. Responsive layout support Creating PDF Forms from your HTML form elements. ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Screen; Renderer.RenderingOptions.PrintHtmlBackgrounds = true; Renderer.RenderingOptions.CreatePdfFormsFromHtml = true; Renderer.RenderingOptions.ViewPortWidth = 1080 ; //px var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); Use every CPU core available! Multithreading and Async support for our Chrome rendering engine is in a different league to all previous builds. For enterprise grade multi-threading use our Chrome in your existing threads and it will work. For web applications this also takes zero setup. For batch processing for HtmlToPdf we suggest using the built in .NET Parallel.ForEach We love async and have provided Async variants of methods such as ChromePdfRenderer.RenderHtmlAsPdf Documentation Links Code Samples : https://ironpdf.com/examples/ MSDN Class Reference : https://ironpdf.com/object-reference/api/ How-To Guides : https://ironpdf.com/how-to/html-file-to-pdf/ Tutorials : https://ironpdf.com/tutorials/ Support : developers@ironsoftware.com MSDN Style Class Reference Explore the IronPDF API in the left navigation of this page. Popular Links include: IronPdf Namespace Index of all IronPdf Classes IronPdf.ChromePdfRenderer Html to PDF generator IronPdf.ChromePdfRenderOptions Html to PDF generation settings IronPdf.AspxToPdf ASPX to PDF generator IronPdf.ImageToPdfConverter Image to PDF generator IronPdf.PdfDocument A class to open, manipulate, extract data and save PDF files"
  },
  "api/IronPdf.Exceptions.html": {
    "href": "api/IronPdf.Exceptions.html",
    "title": "Namespace IronPdf.Exceptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Exceptions Classes IronPdfLicensingException Represents errors that occur during IronPDF execution due to the library not being appropriately licensed. https://ironpdf.com/licensing/ IronPdfProductException Represents errors that occur during IronPDF execution."
  },
  "api/IronPdf.Exceptions.IronPdfLicensingException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfLicensingException.html",
    "title": "Class IronPdfLicensingException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfLicensingException Represents errors that occur during IronPDF execution due to the library not being appropriately licensed. https://ironpdf.com/licensing/ Inheritance System.Object IronPdfProductException IronPdfLicensingException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfLicensingException : IronPdfProductException Constructors IronPdfLicensingException() Initializes a new instance of the IronPdfLicensingException class. Declaration public IronPdfLicensingException() IronPdfLicensingException(String) Initializes a new instance of the IronPdfLicensingException class with a specified error message. Declaration public IronPdfLicensingException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfLicensingException(String, Exception) Initializes a new instance of the IronPdfLicensingException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfLicensingException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified. Properties _stackTrace Declaration public byte[] _stackTrace { get; } Property Value Type Description System.Byte [] StackTrace Declaration public override string StackTrace { get; } Property Value Type Description System.String TargetSite Declaration public string TargetSite { get; } Property Value Type Description System.String Methods Throw(String) Declaration public static void Throw(string message) Parameters Type Name Description System.String message"
  },
  "api/IronPdf.Exceptions.IronPdfProductException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfProductException.html",
    "title": "Class IronPdfProductException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfProductException Represents errors that occur during IronPDF execution. Inheritance System.Object IronPdfProductException IronPdfLicensingException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfProductException : Exception Constructors IronPdfProductException() Initializes a new instance of the IronPdfProductException class. Declaration public IronPdfProductException() IronPdfProductException(String) Initializes a new instance of the IronPdfProductException class with a specified error message. Declaration public IronPdfProductException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfProductException(String, Exception) Initializes a new instance of the IronPdfProductException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfProductException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Forms.CheckBoxField.html": {
    "href": "api/IronPdf.Forms.CheckBoxField.html",
    "title": "Class CheckBoxField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CheckBoxField Represents a check-box in a PDF form. Inheritance System.Object FormField CheckBoxField Inherited Members FormField.SetFont(FontTypes, Double) FormField.ToString() FormField.Name FormField.ReadOnly Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class CheckBoxField : FormField Constructors CheckBoxField() Declaration public CheckBoxField() Properties BooleanValue Gets or sets a value indicating whether the check-box is checked (ticked). Declaration public bool BooleanValue { get; set; } Property Value Type Description System.Boolean true if checked; otherwise, false . Value Gets or sets the value of the CheckBoxField as a string. Declaration public override string Value { get; set; } Property Value Type Description System.String A typical return value for a checked box is \"/Yes\", other values mean that the box is not checked. Overrides FormField.Value See Also BooleanValue Inherited members SetFont(FontTypes, Double) ToString() Name ReadOnly See Also FormField"
  },
  "api/IronPdf.Forms.ComboBoxField.html": {
    "href": "api/IronPdf.Forms.ComboBoxField.html",
    "title": "Class ComboBoxField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ComboBoxField Represents a combo-box (drop down menu) in a PDF form. Inheritance System.Object FormField ComboBoxField Inherited Members FormField.SetFont(FontTypes, Double) FormField.ToString() FormField.Name FormField.ReadOnly Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class ComboBoxField : FormField Constructors ComboBoxField() Declaration public ComboBoxField() Properties Options Gets the available options for the combo-box in zero based index order. Declaration public string[] Options { get; } Property Value Type Description System.String [] The option names as strings. SelectedIndex Gets the index of the selected option. Declaration public int SelectedIndex { get; } Property Value Type Description System.Int32 The index of the selected. 0 based. Value Gets or sets the text value of the combo-box. Declaration public override string Value { get; set; } Property Value Type Description System.String The value as a string. Overrides FormField.Value Inherited members SetFont(FontTypes, Double) ToString() Name ReadOnly See Also FormField"
  },
  "api/IronPdf.Forms.Enums.FontTypes.html": {
    "href": "api/IronPdf.Forms.Enums.FontTypes.html",
    "title": "Class FontTypes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FontTypes Enum that represents the list of available fonts for text fields. Inheritance System.Object FontTypes Namespace : IronPdf.Forms.Enums Assembly : IronPdf.dll Syntax public sealed class FontTypes : Enum Fields Courier Declaration public const FontTypes Courier Field Value Type Description FontTypes CourierBold Declaration public const FontTypes CourierBold Field Value Type Description FontTypes CourierBoldOblique Declaration public const FontTypes CourierBoldOblique Field Value Type Description FontTypes CourierOblique Declaration public const FontTypes CourierOblique Field Value Type Description FontTypes Helvetica Declaration public const FontTypes Helvetica Field Value Type Description FontTypes HelveticaBold Declaration public const FontTypes HelveticaBold Field Value Type Description FontTypes HelveticaBoldOblique Declaration public const FontTypes HelveticaBoldOblique Field Value Type Description FontTypes HelveticaOblique Declaration public const FontTypes HelveticaOblique Field Value Type Description FontTypes Symbol Declaration public const FontTypes Symbol Field Value Type Description FontTypes TimesBold Declaration public const FontTypes TimesBold Field Value Type Description FontTypes TimesBoldItalic Declaration public const FontTypes TimesBoldItalic Field Value Type Description FontTypes TimesItalic Declaration public const FontTypes TimesItalic Field Value Type Description FontTypes TimesRoman Declaration public const FontTypes TimesRoman Field Value Type Description FontTypes value__ Declaration public int value__ Field Value Type Description System.Int32 ZapfDingbats Declaration public const FontTypes ZapfDingbats Field Value Type Description FontTypes"
  },
  "api/IronPdf.Forms.Enums.html": {
    "href": "api/IronPdf.Forms.Enums.html",
    "title": "Namespace IronPdf.Forms.Enums | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Forms.Enums Classes FontTypes Enum that represents the list of available fonts for text fields."
  },
  "api/IronPdf.Forms.FormField.html": {
    "href": "api/IronPdf.Forms.FormField.html",
    "title": "Class FormField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FormField Generic base class from which all PDF Form fields are derived. Inheritance System.Object FormField CheckBoxField ComboBoxField TextField Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class FormField : Object Properties Name Gets the ID name of this field. Declaration public string Name { get; } Property Value Type Description System.String The name as a string. See Also GetFieldByName(String) ReadOnly Gets or sets the permissions for users to fill-in current form field. Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean true if form field is readonly, otherwise false . Value Gets the value of the editable PDF field. Declaration public virtual string Value { get; set; } Property Value Type Description System.String The value. Methods SetFont(FontTypes, Double) Sets the font to the text field of pdf form. Declaration public virtual void SetFont(FontTypes fontType, double fontSize = 11) Parameters Type Name Description FontTypes fontType Type of the font. System.Double fontSize Size of the font. ToString() Returns the value of this field. Declaration public override string ToString() Returns Type Description System.String The value of this field."
  },
  "api/IronPdf.Forms.html": {
    "href": "api/IronPdf.Forms.html",
    "title": "Namespace IronPdf.Forms | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Forms Classes CheckBoxField Represents a check-box in a PDF form. ComboBoxField Represents a combo-box (drop down menu) in a PDF form. FormField Generic base class from which all PDF Form fields are derived. PdfForm PdfForm class represents a collection of the user-editable form fields within a PDD document. TextField Represents an editable text input field in a PDF document."
  },
  "api/IronPdf.Forms.PdfForm.html": {
    "href": "api/IronPdf.Forms.PdfForm.html",
    "title": "Class PdfForm | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfForm PdfForm class represents a collection of the user-editable form fields within a PDD document. Inheritance System.Object PdfForm Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class PdfForm : Object Constructors PdfForm(FormField[]) Creates instance of PdfForm with list of fields specified by formFields . Declaration public PdfForm(FormField[] formFields) Parameters Type Name Description FormField [] formFields The list of fields. Fields Fields The editable fields within this PDF. Declaration public readonly FormField[] Fields Field Value Type Description FormField [] See Also Form Properties FieldNames Returns the field name of every editable data field in the PDF. Declaration public string[] FieldNames { get; } Property Value Type Description System.String [] The field names as an array of strings. Methods GetFieldByName(String) Returns a FormField by its name. This method is fault tolerant and will attempt to match case mistakes and partial field names. Declaration public FormField GetFieldByName(string FieldName) Parameters Type Name Description System.String FieldName The name of the field to be edited. This is analogous to the HTML input 'name' attribute when creating a PDF with forms from HTML using IronPDF. Returns Type Description FormField A FormField object"
  },
  "api/IronPdf.Forms.TextField.html": {
    "href": "api/IronPdf.Forms.TextField.html",
    "title": "Class TextField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextField Represents an editable text input field in a PDF document. Inheritance System.Object FormField TextField Inherited Members FormField.ToString() FormField.Name FormField.ReadOnly Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class TextField : FormField Constructors TextField() Declaration public TextField() Properties Value Gets or sets the text in the text-box. Declaration public override string Value { get; set; } Property Value Type Description System.String Text value as a string. Overrides FormField.Value Methods SetFont(FontTypes, Double) Sets the font to the text field of pdf form. Declaration public override void SetFont(FontTypes fontType, double fontSize = 11) Parameters Type Name Description FontTypes fontType Type of the font. System.Double fontSize Size of the font. Overrides FormField.SetFont(FontTypes, Double) Inherited members ToString() Name ReadOnly See Also FormField"
  },
  "api/IronPdf.html": {
    "href": "api/IronPdf.html",
    "title": "Namespace IronPdf | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf Classes HtmlHeaderFooter A Html Header or Footer which will be printed onto every page of the PDF. This can be used to override IronPdf.PdfPrintOptions.Header and IronPdf.PdfPrintOptions.Footer When using HtmlHeaderFooter it is important to set HtmlFragment and Height Merge meta-data into your html using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} HttpLoginCredentials Provides credentials for IronPdf to log-in to an intranet, extranet or website, impersonating a user. This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites. ImageToPdfConverter The ImageToPdfConveter class can be used to create PDF documents from images. It accepts both image files and System.Drawing.Image objects as input. The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF. To rasterize PDF documents as images (the reverse operation), see ToBitmap(Int32) and RasterizeToImageFiles(String, ImageType, Int32) Installation Global installation and setup preferences for all instances of IronPDF License Allows IronPdf license keys to be applied globally across an application. PdfDocument A PDF Document PdfDocument.PdfMetaData A class defining PDF file meta-data. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Implemented in MetaData . PdfPagesCollection Class for managing the collection of IronPdf.PdfPage elements. SimpleHeaderFooter Defines PDF Header and Footer display options. TempFolder Provides operations over the temporary folder"
  },
  "api/IronPdf.HtmlHeaderFooter.html": {
    "href": "api/IronPdf.HtmlHeaderFooter.html",
    "title": "Class HtmlHeaderFooter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HtmlHeaderFooter A Html Header or Footer which will be printed onto every page of the PDF. This can be used to override IronPdf.PdfPrintOptions.Header and IronPdf.PdfPrintOptions.Footer When using HtmlHeaderFooter it is important to set HtmlFragment and Height Merge meta-data into your html using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Inheritance System.Object SimpleHeaderFooter HtmlHeaderFooter Inherited Members SimpleHeaderFooter.CenterText SimpleHeaderFooter.DrawDividerLine SimpleHeaderFooter.FontFamily SimpleHeaderFooter.FontSize SimpleHeaderFooter.LeftText SimpleHeaderFooter.RightText SimpleHeaderFooter.Spacing Namespace : IronPdf Assembly : IronPdf.dll Syntax public class HtmlHeaderFooter : SimpleHeaderFooter Constructors HtmlHeaderFooter() Declaration public HtmlHeaderFooter() Fields BaseUrl The Base URL all URLS in the HtmlFragment will be relative to. This includes 'src' attributes on images, scripts, style-sheets and also hrefs on hyper-links. Note: A base URL that points to a directory should end with a slash. Base URL accepts file paths as well as URLS. If no BaseUrl is given, the HtmlHeaderFooter BaseUrl will be inherited from the main HTML document where possible. Declaration public string BaseUrl Field Value Type Description System.String Height Height of the Html Header / Footer in millimeters. This value must be set sufficiently high to display the full html header / footer content. Declaration public int Height Field Value Type Description System.Int32 HtmlFragment The Html which will be use to render the Header / Footer. Should be an HTML snippet rather than a complete document. May contain styles & images. Merge meta-data into the HtmlFragment by putting any of these placeholder strings into the text: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}. An alternative mail-merge style using the pattern <span class='total-pages'></span> also workd HtmlFragment is a stand alone HTML document which does not inherit styles or settings from your main HTML content unless LoadStylesAndCSSFromMainHtmlDocument is set true Declaration public string HtmlFragment Field Value Type Description System.String LoadStylesAndCSSFromMainHtmlDocument Loads style code blocks and links to CSS style sheets from the main HTML document (which provides the PDF content) into the HtmlHeaderFooter . By default, Html Headers and Footers are stand- alone HTML documents with their own default styles. Setting LoadStylesAndCSSFromMainHtmlDocument to true will attempt to load all STYLE and LINK tags from the main HTML document (which renders teh PDF) into the HtmlHeaderFooter . If your main HTML document contains complex CSS frameworks, styles the HEAD or BODY element heavily or loads CSS from javascript then this method may not work as intended. This feature is not available for IronPdf.HtmlToPdf.RenderUrlAsPdf(System.String) and other RenderUrlAsPdf methods. It works for HTMLToPdf and HtmlFileToPdf conversions only. It is often preferable to load style sheets explicitly into your HTML Headers and Footers as STYLE and LINK tags within the HtmlFragment for granular control Declaration public bool LoadStylesAndCSSFromMainHtmlDocument Field Value Type Description System.Boolean Methods Clone() Clones this instance. Declaration public object Clone() Returns Type Description System.Object System.Object of type HtmlHeaderFooter Inherited members CenterText DrawDividerLine FontFamily FontSize LeftText RightText Spacing See Also IronPdf.PdfPrintOptions.Header IronPdf.PdfPrintOptions.Footer"
  },
  "api/IronPdf.HttpLoginCredentials.html": {
    "href": "api/IronPdf.HttpLoginCredentials.html",
    "title": "Class HttpLoginCredentials | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HttpLoginCredentials Provides credentials for IronPdf to log-in to an intranet, extranet or website, impersonating a user. This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites. Inheritance System.Object HttpLoginCredentials Namespace : IronPdf Assembly : IronPdf.dll Syntax public class HttpLoginCredentials : Object Constructors HttpLoginCredentials() Declaration public HttpLoginCredentials() Fields CustomCookies A Dictionary which allows custom cookies to be posted with every login request, and HTTP request made by RenderUriToHml methods. Declaration public Dictionary<string, string> CustomCookies Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > CustomHttpHeaders A dictionary of custom HTTP headers to be sent with every HTTP Request Declaration public Dictionary<string, string> CustomHttpHeaders Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > CustomPostFiles Optional, Advanced Usage: Specifies a collection files to summited on every PDF rendering request. Allows images and documents to be submitted to forms such that the output will be rendered as an PDF. Note: The Key is the name of the post field, The value is the full file path.. UrlEncoding is not required. Declaration public Dictionary<string, string> CustomPostFiles Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > CustomPostVariables Optional: Specifies a collection of HTTP 'POST' variables to submit on every PDF rendering request. Note: The 'key' is the name of the post field, The 'value' is its value. UrlEncoding is not required. Note: Not implemented in .Net Core. Declaration public Dictionary<string, string> CustomPostVariables Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > EnableCookies Enables cookies to be stored and sent when using RenderUriToHml methods. Declaration public bool EnableCookies Field Value Type Description System.Boolean LoginFormPostVariables Optional: Specifies a collection of HTTP form variables to post/submit to LoginFormUrl . Declaration public Dictionary<string, string> LoginFormPostVariables Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > LoginFormUrl Optional: Gives the URL to post website login-form authentication. Should be the absolute Url which the form's action attribute specifies. Declaration public Uri LoginFormUrl Field Value Type Description System.Uri NetworkPassword Optional: Password credential for Windows / Linux network security authentication. Declaration public string NetworkPassword Field Value Type Description System.String NetworkUsername Optional: User-name credential for Windows / Linux network security authentication. Declaration public string NetworkUsername Field Value Type Description System.String Proxy e Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port/ Declaration public string Proxy Field Value Type Description System.String Properties UserAgent The Http User-Agent header which will be used to fetch any remote HTML. Declaration public string UserAgent { get; set; } Property Value Type Description System.String Methods Finalize() Destructor cleans up all temporary cookies files for the HttpLoginCredentials instance. Declaration protected override void Finalize()"
  },
  "api/IronPdf.ImageToPdfConverter.html": {
    "href": "api/IronPdf.ImageToPdfConverter.html",
    "title": "Class ImageToPdfConverter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageToPdfConverter The ImageToPdfConveter class can be used to create PDF documents from images. It accepts both image files and System.Drawing.Image objects as input. The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF. To rasterize PDF documents as images (the reverse operation), see ToBitmap(Int32) and RasterizeToImageFiles(String, ImageType, Int32) Inheritance System.Object ImageToPdfConverter Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class ImageToPdfConverter : Object Methods ImageToPdf(IEnumerable<Image>, ImageBehavior, Boolean) Converts multiple System.Drawing.Image objects or Bitmaps into a PDF document. Each image creates 1 page which matches the image dimensions. Declaration public static PdfDocument ImageToPdf(IEnumerable<Image> images, ImageBehavior behavior, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Drawing.Image > images The image objects. Requires a project reference to the System.Drawing Assembly. IronPdf.ImageBehavior behavior Describes how image should be placed on the PDF page System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. ImageToPdf(IEnumerable<String>, ImageBehavior, Boolean) Converts multiple image files to a PDF document. Each image creates 1 page which matches the image dimensions. Declaration public static PdfDocument ImageToPdf(IEnumerable<string> imageFileNames, ImageBehavior behavior, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > imageFileNames The image file path names. IronPdf.ImageBehavior behavior Describes how image should be placed on the PDF page System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .bmp, .dib, .jpg, .jpeg, .jpe, .jfif, .jif, .png, .tiff, .tif, .gif. ImageToPdf(Image, ImageBehavior, Boolean) Converts a single System.Drawing.Image object or Bitmap to a PDF document of matching dimensions. Declaration public static PdfDocument ImageToPdf(Image image, ImageBehavior behavior, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.Drawing.Image image The image object. Requires a project reference to the System.Drawing Assembly. IronPdf.ImageBehavior behavior Describes how image should be placed on the PDF page System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. ImageToPdf(String, ImageBehavior, Boolean) Converts a single image file to an identical PDF document of matching dimensions. Declaration public static PdfDocument ImageToPdf(string imageFileName, ImageBehavior behavior, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.String imageFileName File path of the image file. IronPdf.ImageBehavior behavior Describes how image should be placed on the PDF page System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .bmp, .dib, .jpg, .jpeg, .jpe, .jfif, .jif, .png, .tiff, .tif, .gif."
  },
  "api/IronPdf.Inspection.html": {
    "href": "api/IronPdf.Inspection.html",
    "title": "Namespace IronPdf.Inspection | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Inspection Classes VerifiedSignature A class that represents a verified digital signature for a PDF document."
  },
  "api/IronPdf.Inspection.VerifiedSignature.html": {
    "href": "api/IronPdf.Inspection.VerifiedSignature.html",
    "title": "Class VerifiedSignature | C# PDF Library Documentation | IronPDF",
    "keywords": "Class VerifiedSignature A class that represents a verified digital signature for a PDF document. Inheritance System.Object VerifiedSignature Namespace : IronPdf.Inspection Assembly : IronPdf.dll Syntax public class VerifiedSignature : Object Properties SignatureName Gets the field name of the digital signature. Declaration public string SignatureName { get; } Property Value Type Description System.String SigningContact The contact person or email address for signing related inquiries (optional). Declaration public string SigningContact { get; } Property Value Type Description System.String SigningDate The date and time of the digital signature. Declaration public DateTime SigningDate { get; } Property Value Type Description System.DateTime SigningLocation The physical location the PDF was signed (optional). Declaration public string SigningLocation { get; } Property Value Type Description System.String SigningReason The reason the PDF was signed (optional). Declaration public string SigningReason { get; } Property Value Type Description System.String Valid true if the signature is valid, Declaration public bool Valid { get; } Property Value Type Description System.Boolean Methods ToString() Returns a string that represents the current digital signature for a PDF document. Declaration public override string ToString() Returns Type Description System.String A string that represents the current digital signature for a PDF document."
  },
  "api/IronPdf.Installation.html": {
    "href": "api/IronPdf.Installation.html",
    "title": "Class Installation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Installation Global installation and setup preferences for all instances of IronPDF Inheritance System.Object Installation Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class Installation : Object Fields LinuxAndDockerDependenciesAutoConfig If true The necessary package dependencies for IronPDf rendering will we automatically installed to Docker and Debian / Ubuntu Linux deployments. Applies only to IronPDF for .Net Core. This will take a few minutes the next time you run IronPDF. Watch the Visual Studio \"Output\" window for progress. Set this to false if manual Docker / Linux setup is more convenient: https://ironpdf.com/docs/questions/docker-linux/ Declaration public static bool LinuxAndDockerDependenciesAutoConfig Field Value Type Description System.Boolean SendAnonymousAnalyticsAndCrashData Opt in or out of sending anonymous usage statistics about IronPdf usage and performance to help us improve the product and developer experience. Usage statistics are never sent in commercially deployed projects (when a license key is applied), only during development usage. Declaration public static bool SendAnonymousAnalyticsAndCrashData Field Value Type Description System.Boolean Properties ActualDeploymentPath Declaration public static string ActualDeploymentPath { get; } Property Value Type Description System.String TempFolderPath The temporary folder path which temporary files and rendering engine DLLs will be deployed to where necessary. The default location is the system temp folder which is appropriate for most use cases. Declaration public static string TempFolderPath { get; set; } Property Value Type Description System.String Exceptions Type Condition System.ArgumentException value is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars . -or- The system could not retrieve the absolute path. System.Security.SecurityException The caller does not have the required permissions. System.ArgumentNullException value is null . System.NotSupportedException value contains a colon (\":\") that is not part of a volume identifier (for example, \"c:&quot;). System.IO.PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. IronPdfProductException The property TempFolderPath is already initialized. Methods GetDefaultTempFolderPath() Declaration public static string GetDefaultTempFolderPath() Returns Type Description System.String InitializeTempFolderPathAndCreateConverter() Declaration public static IConverter InitializeTempFolderPathAndCreateConverter() Returns Type Description IronPdf.Engines.WebKit.Contracts.IConverter"
  },
  "api/IronPdf.License.html": {
    "href": "api/IronPdf.License.html",
    "title": "Class License | C# PDF Library Documentation | IronPDF",
    "keywords": "Class License Allows IronPdf license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class License : Object Fields LicenseKey Removes watermarks. Get Licensed at https://ironpdf.com/licensing For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronPdf.LicenseKey\" value=\"IRONPDF-LICENSE-KEY\"/> within the appSettings tag. See https://ironpdf.com/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronPdf.LicenseKey\" and the value is a valid IronPDF trial or full license key. See https://ironpdf.com/licensing/ for licensing options. Declaration public static string LicenseKey Field Value Type Description System.String Properties IsLicensed Determines whether this instance of IronPDF is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in IronPdf.License.LicenseKey, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironpdf.com/licensing/ and https://ironpdf.com/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean True if the license key given is valid. Methods IsValidLicense(String) Determines whether a string license key is valid. See https://ironpdf.com/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string LicenseKey) Parameters Type Name Description System.String LicenseKey IronPDF license key as a string Returns Type Description System.Boolean True if the license key given is valid."
  },
  "api/IronPdf.Logging.html": {
    "href": "api/IronPdf.Logging.html",
    "title": "Namespace IronPdf.Logging | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Logging Classes Logger Provides functionality for developers to view debug logs and export log files from IronPdf. Logger.LoggingModes Different Ways to log developer notices and warnings"
  },
  "api/IronPdf.Logging.Logger.html": {
    "href": "api/IronPdf.Logging.Logger.html",
    "title": "Class Logger | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger Provides functionality for developers to view debug logs and export log files from IronPdf. Inheritance System.Object Logger Namespace : IronPdf.Logging Assembly : IronPdf.dll Syntax public static class Logger : Object Properties LogFilePath Setting a log path produces ‘log files’ which may be vey useful for debugging in production or providing to Iron Software support when reporting an issue. LogFilePath may be set to a directory name or a full file name. Setting LogFilePath = null will turn off log files. Declaration public static string LogFilePath { get; set; } Property Value Type Description System.String See Also ClearLogFiles() LoggingMode Activate or disable detailed developer messages sent to your choice of location in the IDE or application console. Declaration public static Logger.LoggingModes LoggingMode { get; set; } Property Value Type Description Logger.LoggingModes Methods ClearLogFiles() Removes any Iron Software log files at the LogFilePath . Declaration public static void ClearLogFiles() See Also LogFilePath Events MessageLogged Event handler to intercept logged messages. Declaration public static event Action<string> MessageLogged Event Type Type Description System.Action < System.String >"
  },
  "api/IronPdf.Logging.Logger.LoggingModes.html": {
    "href": "api/IronPdf.Logging.Logger.LoggingModes.html",
    "title": "Class Logger.LoggingModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger.LoggingModes Different Ways to log developer notices and warnings Inheritance System.Object Logger.LoggingModes Namespace : IronPdf.Logging Assembly : IronPdf.dll Syntax public sealed class LoggingModes : Enum Fields All All available methods Declaration public const Logger.LoggingModes All Field Value Type Description Logger.LoggingModes Console Sends Messages to System.Console Declaration public const Logger.LoggingModes Console Field Value Type Description Logger.LoggingModes DebugOutputWindow Sends Messages to System.Diagnostics.Debug Declaration public const Logger.LoggingModes DebugOutputWindow Field Value Type Description Logger.LoggingModes None Silent Declaration public const Logger.LoggingModes None Field Value Type Description Logger.LoggingModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.PdfDocument.html": {
    "href": "api/IronPdf.PdfDocument.html",
    "title": "Class PdfDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocument A PDF Document Inheritance System.Object PdfDocument Implements System.IDisposable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfDocument : Object Constructors PdfDocument(Byte[], String, String, Boolean) Opens an existing PDF document for editing. Declaration public PdfDocument(byte[] PdfData, string Password = null, string OwnerPassword = null, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.Byte [] PdfData The PDF file data as byte array. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). System.Boolean GenerateUniqueDocumentIdentifiers If false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. PdfDocument(Stream, String, String, Boolean) Opens an existing PDF document for editing. Declaration public PdfDocument(Stream PdfDataStream, string Password = null, string OwnerPassword = null, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.IO.Stream PdfDataStream The PDF file data as a Stream. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. PdfDocument(String, String, String, Boolean) Opens an existing PDF document for editing. Declaration public PdfDocument(string PdfFilePath, string password = null, string ownerPassword = null, bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.String PdfFilePath The PDF file path. System.String password Optional user password if the PDF document is encrypted. System.String ownerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. System.ArgumentException PdfFilePath is null, empty, or consists only of white-space characters. Properties BinaryData Gets the binary data for the full PDF file as a byte array; Declaration public byte[] BinaryData { get; } Property Value Type Description System.Byte [] The PDF file as a byte array. BookMarks An PdfOutline object allowing developers to add, edit and remove navigational bookmarks from PDF documents. Declaration public PdfOutline BookMarks { get; set; } Property Value Type Description IronPdf.PdfOutline Form Gets an object returning any PDF editable form fields which can have their values both read and set programmatically. Declaration public PdfForm Form { get; } Property Value Type Description PdfForm The form. GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM (better for unit testing) and BinaryData of two identical PDF files is the same. If true, System.Guid is generated inside PDF DOM (better for security) and BinaryData of two identical PDF files differs. Default value is false. Declaration public bool GenerateUniqueDocumentIdentifiers { get; } Property Value Type Description System.Boolean MetaData MetaData information settings for the PDF. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Declaration public PdfDocument.PdfMetaData MetaData { get; } Property Value Type Description PdfDocument.PdfMetaData MetaData settings for this PDF as an instance of PdfDocument.PdfMetaData OwnerPassword Sets the owner password and enables 128Bit encryption of PDF content. An owner password is one used to enable and disable all other security settings. OwnerPassword must be set to a non empty string value for IronPdf.PdfDocument.PdfSecuritySettings.AllowUserCopyPasteContent , IronPdf.PdfDocument.PdfSecuritySettings.AllowUserAnnotations , IronPdf.PdfDocument.PdfSecuritySettings.AllowUserFormData , IronPdf.PdfDocument.PdfSecuritySettings.AllowUserPrinting and IronPdf.PdfDocument.PdfSecuritySettings.AllowUserEdits to be restricted. Declaration public string OwnerPassword { get; set; } Property Value Type Description System.String PageCount Gets the number of pages in the PDF document. Declaration public int PageCount { get; } Property Value Type Description System.Int32 The page count. Pages Gets the list of pages in the pdf document. Declaration public PdfPagesCollection Pages { get; } Property Value Type Description PdfPagesCollection Password Sets a Password used to protect and encrypt the PDF File. Setting a password will cause IronPDF to automatically protect the PDF file content using strong 128 bit encryption. Setting the password to null will remove any existing password. Declaration public string Password { get; set; } Property Value Type Description System.String SecuritySettings Advanced security settings for the PDF. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Declaration public PdfDocument.PdfSecuritySettings SecuritySettings { get; } Property Value Type Description IronPdf.PdfDocument.PdfSecuritySettings Advanced security settings for this PDF as an instance of IronPdf.PdfDocument.PdfSecuritySettings Stream Gets the binary data for the full PDF file as a Stream Declaration public MemoryStream Stream { get; } Property Value Type Description System.IO.MemoryStream The PDF file as a MemoryStream Methods AddBackgroundPdf(PdfDocument, Int32) Adds a background to each page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdf(PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdf(String, Int32) Adds a background to each page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdf(string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.String BackgroundPdfPath The background PDF's file path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPage(Int32, PdfDocument, Int32) Adds the background to one page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPage(int ToPageIndex, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the background will be applied to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPage(Int32, String, Int32) Adds the background to one page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPage(int ToPageIndex, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the background will be applied to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(IEnumerable<Int32>, PdfDocument, Int32) Adds the background to specified pages of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(IEnumerable<int> ToPageIndexes, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(IEnumerable<Int32>, String, Int32) Adds the background to specified pages of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(IEnumerable<int> ToPageIndexes, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(Int32, Int32, PdfDocument, Int32) Adds the background to a range of pages in this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(int StartPageIndex, int EndPageIndex, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding backgrounds to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding backgrounds to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(Int32, Int32, String, Int32) Adds the background to a range of pages in this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(int StartPageIndex, int EndPageIndex, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding backgrounds to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding backgrounds to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddFooters(SimpleHeaderFooter, Boolean, IEnumerable<Int32>) Renders page footers to an existing PDF File Margin spacing on the PDF page for the footer are set to default values of 25mm. An overload method allow footer margins to be chosen specifically or set to zero. Declaration public PdfDocument AddFooters(SimpleHeaderFooter Footer, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description SimpleHeaderFooter Footer An new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a footer. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddFooters(SimpleHeaderFooter, Double, Double, Double, Boolean, IEnumerable<Int32>) Renders page footers to an existing PDF File Declaration public PdfDocument AddFooters(SimpleHeaderFooter Footer, double MarginLeft, double MarginRight, double MarginBottom, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description SimpleHeaderFooter Footer An new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout. System.Double MarginLeft The left margin of the footer on the page in mm. System.Double MarginRight The right margin of the footer on the page in mm. System.Double MarginBottom The bottom margin of the footer on the page in mm. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a footer. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdf(PdfDocument, Int32) Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdf(PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdf(String, Int32) Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdf(string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.String OverlayPdfPath The background PDF's file path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPage(Int32, PdfDocument, Int32) Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPage(int ToPageIndex, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the foreground will be applied to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPage(Int32, String, Int32) Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPage(int ToPageIndex, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the foreground will be applied to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(IEnumerable<Int32>, PdfDocument, Int32) Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(IEnumerable<int> ToPageIndexes, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(IEnumerable<Int32>, String, Int32) Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(IEnumerable<int> ToPageIndexes, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(Int32, Int32, PdfDocument, Int32) Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(int StartPageIndex, int EndPageIndex, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding overlays to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding overlays to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(Int32, Int32, String, Int32) Adds an overlay to a range page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(int StartPageIndex, int EndPageIndex, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding overlays to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding overlays to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHeaders(SimpleHeaderFooter, Boolean, IEnumerable<Int32>) Renders page headers to an existing PDF File Margin spacing on the PDF page for the header are set to default values of 25mm. An overload method allow header margins to be chosen specifically or set to zero. Declaration public PdfDocument AddHeaders(SimpleHeaderFooter Header, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description SimpleHeaderFooter Header An new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a header. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHeaders(SimpleHeaderFooter, Double, Double, Double, Boolean, IEnumerable<Int32>) Renders page headers to an existing PDF File Declaration public PdfDocument AddHeaders(SimpleHeaderFooter Header, double MarginLeft, double MarginRight, double MarginTop, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description SimpleHeaderFooter Header An new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout. System.Double MarginLeft The left margin of the header on the page in mm. System.Double MarginRight The right margin of the header on the page in mm. System.Double MarginTop The top margin of the header on the page in mm. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a header. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHeadersAndFooters(PdfPrintOptions, Boolean, IEnumerable<Int32>) Renders page headers and footers to an existing PDF File Declaration public PdfDocument AddHeadersAndFooters(PdfPrintOptions Options, bool SkipFirstPage = false, IEnumerable<int> PageIndexes = null) Parameters Type Name Description IronPdf.PdfPrintOptions Options Instance of IronPdf.PdfPrintOptions with the specified IronPdf.PdfPrintOptions.Header and IronPdf.PdfPrintOptions.Footer . System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with the specified IronPdf.PdfPrintOptions.Header and IronPdf.PdfPrintOptions.Footer . System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Optional. The PageIndexes (zero-based page numbers) to which the specified IronPdf.PdfPrintOptions.Header and IronPdf.PdfPrintOptions.Footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHTMLFooters(HtmlHeaderFooter, Boolean, IEnumerable<Int32>) Renders HTML page footers to an existing PDF File Margin spacing on the PDF page for the footer are set to default values of 25mm. An overload method allow footer margins to be chosen specifically or set to zero. Declaration public PdfDocument AddHTMLFooters(HtmlHeaderFooter Footer, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description HtmlHeaderFooter Footer An new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a footer. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHTMLFooters(HtmlHeaderFooter, Double, Double, Double, Boolean, IEnumerable<Int32>) Renders HTML page footers to an existing PDF File Declaration public PdfDocument AddHTMLFooters(HtmlHeaderFooter Footer, double MarginLeft, double MarginRight, double MarginBottom, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description HtmlHeaderFooter Footer An new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout. System.Double MarginLeft The left margin of the footer on the page in mm. System.Double MarginRight The right margin of the footer on the page in mm. System.Double MarginBottom The bottom margin of the footer on the page in mm. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a footer. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHTMLHeaders(HtmlHeaderFooter, Boolean, IEnumerable<Int32>) Renders HTML page headers to an existing PDF File Margin spacing on the PDF page for the header are set to default values of 25mm. An overload method allow header margins to be chosen specifically or set to zero. Declaration public PdfDocument AddHTMLHeaders(HtmlHeaderFooter Header, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description HtmlHeaderFooter Header An new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a header. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHTMLHeaders(HtmlHeaderFooter, Double, Double, Double, Boolean, IEnumerable<Int32>) Renders HTML page headers to an existing PDF File Declaration public PdfDocument AddHTMLHeaders(HtmlHeaderFooter Header, double MarginLeft, double MarginRight, double MarginTop, bool SkipFirstPage = false, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description HtmlHeaderFooter Header An new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout. System.Double MarginLeft The left margin of the header on the page in mm. System.Double MarginRight The right margin of the header on the page in mm. System.Double MarginTop The top margin of the header on the page in mm. System.Boolean SkipFirstPage if set to true , the first (cover) page is not counted or stamped with a header. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextAnnotation(PdfDocument.TextAnnotation, Int32, Int32, Int32, Int32, Int32) Adds an annotation to a page of this PdfDocument Declaration public void AddTextAnnotation(PdfDocument.TextAnnotation TextAnnotation, int PageIndex, int X, int Y, int Width = 30, int Height = 30) Parameters Type Name Description IronPdf.PdfDocument.TextAnnotation TextAnnotation The annotation as a IronPdf.PdfDocument.TextAnnotation object. System.Int32 PageIndex Index of the page to add the annotation. The first page has a PageIndex of 0 System.Int32 X The horizontal X position of the annotation on your page in pixels System.Int32 Y The vertical Y position of the annotation on your page in pixels. Measured from top downwards. System.Int32 Width The width of your annotation's icon and interactive area in pixels System.Int32 Height The height of your annotation's icon and interactive area in pixels AddTextAnnotation(String, String, String, Int32, Int32, Int32, Int32, Int32, PdfDocument.TextAnnotation.AnnotationIcon, Boolean, Boolean, Boolean, String, Double) Adds an annotation to a page of this PdfDocument Declaration public void AddTextAnnotation(string Title, string Subject, string Contents, int PageIndex, int X, int Y, int Width = 30, int Height = 30, PdfDocument.TextAnnotation.AnnotationIcon Icon, bool Open = true, bool ReadOnly = true, bool Printable = false, string RgbColor = \"#FFFF33\", double Opacity = 1) Parameters Type Name Description System.String Title The title of the annotation System.String Subject The subject or 'subheading' of the annotation System.String Contents The text content of the annotation System.Int32 PageIndex Index of the page to add the annotation. The first page has a PageIndex of 0 System.Int32 X The horizontal X position of the annotation on your page in pixels System.Int32 Y The vertical Y position of the annotation on your page in pixels. Measured from top downwards. System.Int32 Width The width of your annotation's icon and interactive area in pixels System.Int32 Height The height of your annotation's icon and interactive area in pixels IronPdf.PdfDocument.TextAnnotation.AnnotationIcon Icon The icon used to display the interactive annotation within the PDF System.Boolean Open Sets the annotation to be opened and readable by default, without user interaction System.Boolean ReadOnly Makes the annotation non user editable System.Boolean Printable Makes the annotation render during user PDF printing operations System.String RgbColor Color of the annotation's background 'sticky note' using Html color notation. E.g. '#FFFF33'. System.Double Opacity The opacity of the annotation (valid values are from 0.0 to 1.0) AppendPdf(PdfDocument) Appends another PDF to the end of the current PdfDocument Declaration public PdfDocument AppendPdf(PdfDocument AnotherPdfFile) Parameters Type Name Description PdfDocument AnotherPdfFile PdfDocument to append. Returns Type Description PdfDocument A new PdfDocument CopyPage(Int32) Creates a new PDF by copying a page from this PdfDocument. Declaration public PdfDocument CopyPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description PdfDocument A new PdfDocument CopyPages(IEnumerable<Int32>) Creates a new PDF by copying a range of pages from this PdfDocument. Declaration public PdfDocument CopyPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable of page indexes to copy into the new PDF. Returns Type Description PdfDocument A new PdfDocument CopyPages(Int32, Int32) Creates a new PDF by copying a range of pages from this PdfDocument . Declaration public PdfDocument CopyPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to copy.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to copy.> Returns Type Description PdfDocument A new PdfDocument Dispose() Releases used resources. Declaration public void Dispose() ExtractAllBitmaps() Finds all embedded Images from within the PDF and returns then as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractAllBitmaps() Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractAllImages() Finds all embedded Images from within the PDF and returns then as System.Drawing.Image objects Declaration public IEnumerable<Image> ExtractAllImages() Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractAllRawImages() Extracts all images from a PDf document. Images are Returned as their raw data in as Byte Arrays (byte[]) Declaration public IEnumerable<byte[]> ExtractAllRawImages() Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> An Enumerable of Byte Arrays. Each Byte Array represents one image. ExtractAllText() Extracts the written text content from the PDF and returns it as a string. Pages are be separated by 4 consecutive Environment.NewLines Declaration public string ExtractAllText() Returns Type Description System.String All text in the PDF as a string. ExtractBitmapsFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractBitmapsFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractBitmapsFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractBitmapsFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractBitmapsFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractBitmapsFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractImagesFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as System.Drawing.Image objects Declaration public IEnumerable<Image> ExtractImagesFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractImagesFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as System.Drawing.Image objects Declaration public IEnumerable<Image> ExtractImagesFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractImagesFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Image> ExtractImagesFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractRawImagesFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as raw image byte array objects Declaration public IEnumerable<byte[]> ExtractRawImagesFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> IEnumerable of raw image byte array. ExtractRawImagesFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as System.Drawing.Image objects Declaration public IEnumerable<byte[]> ExtractRawImagesFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> IEnumerable of raw image byte array. ExtractRawImagesFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as raw image byte array objects Declaration public IEnumerable<byte[]> ExtractRawImagesFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> IEnumerable of raw image byte array. ExtractTextFromPage(Int32) Extracts the text content from one page of the PDF and returns it as a string. Declaration public string ExtractTextFromPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.String The text extracted from the PDF page as a string. ExtractTextFromPages(IEnumerable<Int32>) Extracts the written text content from specified pages in the PDF PDF and returns it as a string. Pages will be separated by 4 consecutive Environment.NewLines Declaration public string ExtractTextFromPages(IEnumerable<int> pageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageIndexes An IEnumerable list of page indexes. Returns Type Description System.String The text extracted from the PDF pages as a string. ExtractTextFromPages(Int32, Int32) Extracts the written text content from a range of pages within the PDF and returns it as a string. Pages will be separated by 4 consecutive Environment.NewLines Declaration public string ExtractTextFromPages(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex The start page index. Note: Page 1 has index 0 System.Int32 endIndex The end page index. Note: The last page has index PageCount -1 Returns Type Description System.String The text extracted from the PDF pages as a string. Finalize() Finalizer Declaration protected override void Finalize() Flatten() Flattens a document (make the fields non-editable). Declaration public void Flatten() FromFile(String, String, String) Opens an existing PDF document for editing. Declaration public static PdfDocument FromFile(string PdfFilePath, string password = null, string ownerPassword = null) Parameters Type Name Description System.String PdfFilePath The PDF file path. System.String password Optional user password if the PDF document is encrypted. System.String ownerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Returns Type Description PdfDocument An IronPdf.PdfDocument object as loaded from the file path. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. System.ArgumentException PdfFilePath is null, empty, or consists only of white-space characters. GetPageRotation(Int32) Gets the rotation of a PDF page in degrees. Declaration public int GetPageRotation(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page to inspect. PageIndex is a 'Zero based' page number, the first page being 0. Returns Type Description System.Int32 A number of degrees rotation GetPrintDocument() Returns a System.Drawing.Printing.PrintDocument for the PDF allowing developers granular control over sending the PDF to a Printer. An assembly reference to System.Drawing is required in your project. Declaration public PrintDocument GetPrintDocument() Returns Type Description System.Drawing.Printing.PrintDocument A System.Drawing.Printing.PrintDocument . Exceptions Type Condition System.Exception IronPdf must be licensed to use this feature. GetVerifiedSignatures() Returns list of VerifiedSignature . Declaration public ICollection<VerifiedSignature> GetVerifiedSignatures() Returns Type Description System.Collections.Generic.ICollection < VerifiedSignature > list of VerifiedSignature GetVerifiedSignatures(Byte[]) Returns list of VerifiedSignature from the specified Pdf document by the parameter data . Declaration public static ICollection<VerifiedSignature> GetVerifiedSignatures(byte[] data) Parameters Type Name Description System.Byte [] data the bytes of a pdf document Returns Type Description System.Collections.Generic.ICollection < VerifiedSignature > list of VerifiedSignature InsertPdf(PdfDocument, Int32) Inserts another PDF into of the current PdfDocument, starting at a given Page Index. Declaration public PdfDocument InsertPdf(PdfDocument AnotherPdfFile, int AtIndex = 0) Parameters Type Name Description PdfDocument AnotherPdfFile Another PdfDocument. System.Int32 AtIndex Index at which to insert the new content. Note: Page 1 has index 0... Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Merge(PdfDocument, PdfDocument) Static method that joins (concatenates) 2 PDF documents together into one final PDF document. Declaration public static PdfDocument Merge(PdfDocument a, PdfDocument b) Parameters Type Name Description PdfDocument a A PDF PdfDocument b A Seconds PDF Returns Type Description PdfDocument A new, merged PdfDocument Merge(IEnumerable<PdfDocument>) Static method that joins (concatenates) multiple PDF documents together into one compiled PDF document. Declaration public static PdfDocument Merge(IEnumerable<PdfDocument> pdfs) Parameters Type Name Description System.Collections.Generic.IEnumerable < PdfDocument > pdfs A IEnumerable of PdfDocument. To merge existing PDF files you may use the PdfDocument.FromFile static method in conjunction with Merge. Returns Type Description PdfDocument A new, merged PdfDocument PageToBitmap(Int32, Int32) Renders a single page of the PDF to a System.Drawing.Bitmap object. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap PageToBitmap(int PageNumber, int DPI = 72) Parameters Type Name Description System.Int32 PageNumber The page number to be converted to an image. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap A System.Drawing.Bitmap of the rendered PDF page. Remarks The DPI will be ignored under Linux and macOS. PageToBitmap(Int32, Nullable<Int32>, Nullable<Int32>, Int32) Renders a single page of the PDF to a System.Drawing.Bitmap object. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap PageToBitmap(int pageNumber, Nullable<int> imageMaxWidth, Nullable<int> imageMaxHeight, int DPI = 72) Parameters Type Name Description System.Int32 pageNumber The page number to be converted to an image. System.Nullable < System.Int32 > imageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > imageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap A System.Drawing.Bitmap of the rendered PDF page. Remarks The DPI will be ignored under Linux and macOS. PrependPdf(PdfDocument) Adds another PDF to the beginning of the current PdfDocument Declaration public PdfDocument PrependPdf(PdfDocument AnotherPdfFile) Parameters Type Name Description PdfDocument AnotherPdfFile PdfDocument to prepend. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Print(Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int Print(bool showPreview = false) Parameters Type Name Description System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(Int32, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . if true print preview dialogs will be displayed to the user. Default value is false . the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . Declaration public int Print(int dpi, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(Int32, Int32, String, String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see GetPrintDocument() . the horizontal PDF resolution, in dots per inch. the vertical PDF resolution, in dots per inch. the name of a printer, set null or an empty string (\"\") to use default print. The default value is null . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. The default value is false . Declaration public int Print(int dpiX, int dpiY, string printerName = null, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpiX System.Int32 dpiY System.String printerName System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(Int32, String, String, Boolean) Prints this PDF by sending it to the computer's printer. For even more advanced real-world printing options please see overloads of this method and also GetPrintDocument() . the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int Print(int dpi, string printerName = null, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.String printerName System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int Print(string printerName, bool showPreview = false) Parameters Type Name Description System.String printerName System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() PrintToFile(Int32, String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int PrintToFile(int dpi, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() PrintToFile(String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads GetPrintDocument() . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int PrintToFile(string filePath, bool showPreview = false) Parameters Type Name Description System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() QuickSignPdfWithDigitalSignatureFile(String, String) Sign PDF with digital signature certificate. For more advanced Options please see QuickSignPdfWithDigitalSignatureFile(String, String) Note that the PDF will not be fully signed until Saved using SaveAs(String) , TrySaveAs(String) , Stream or BinaryData . Multiple certificates may be used. Not implemented in .Net Core Declaration public PdfDocument QuickSignPdfWithDigitalSignatureFile(string CertificateFilePath, string Password) Parameters Type Name Description System.String CertificateFilePath The file path to a .pfx or .p12 digital signing certificate which may be generated using Adobe Acrobat Viewer. System.String Password The certificate password as a String. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style See Also IronPdf.PdfSignature RasterizeToImageFiles(String, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, ImageType ImageFileType, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png IronPdf.ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, IEnumerable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Page Numbers may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, IEnumerable<int> PageNumbers, ImageType ImageFileType, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. IronPdf.ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Page Numbers may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, ImageType ImageFileType, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. IronPdf.ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, Nullable<Int32>, Nullable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Image dimensions may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, ImageType ImageFileType, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. IronPdf.ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RemovePage(Int32) Removes a page from the PDF at the given index. Declaration public PdfDocument RemovePage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RemovePages(IEnumerable<Int32>) Removes a range of pages from the PDF Declaration public PdfDocument RemovePages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An list of pages indexes to remove. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RemovePages(Int32, Int32) Removes a range of pages from the PDF Declaration public PdfDocument RemovePages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The start index. Note: Page 1 has index 0 System.Int32 EndIndex The end index. Note: The last page has index PageCount -1 Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RotateAllPages(Int32) Rotates all pages of the PdfDocument by a specified number of degrees. Declaration public void RotateAllPages(int Degrees) Parameters Type Name Description System.Int32 Degrees The number of degrees to rotate the pages. 0, 90, 180 or 270 are accepted values. RotatePage(Int32, Int32) Rotates one page of the PdfDocument by a specified number of degrees. Declaration public void RotatePage(int PageIndex, int Degrees) Parameters Type Name Description System.Int32 PageIndex Index of the page to rotate. PageIndex is a 'Zero based' page number, the first page being 0. System.Int32 Degrees The number of degrees to rotate the pages. 0, 90, 180 or 270 are accepted values. RotateSelectedPages(IEnumerable<Int32>, Int32) Rotates selected pages of the PdfDocument by a specified number of degrees. Declaration public void RotateSelectedPages(IEnumerable<int> PageIndexes, int Degrees) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Indexes of the pages to rotate in an IEnumerable, list or array. PageIndex is a 'Zero based' page number, the first page being 0. System.Int32 Degrees The number of degrees to rotate the pages. 0, 90, 180 or 270 are accepted values. SaveAs(String) Saves the PdfDocument to a file. Supports site relative paths staring with \"~/\" in .Net Framework Web 4+ Applications Declaration public PdfDocument SaveAs(string FileName) Parameters Type Name Description System.String FileName File Path Returns Type Description PdfDocument This PdfDocument for fluid code notation. SignPdfWithDigitalSignature(PdfSignature) Signs the PDF with digital signature with advanced options. Note that the PDF will not be fully signed until Saved using SaveAs(String) , TrySaveAs(String) , Stream or BinaryData . Multiple certificates may be used. Not implemented in .Net Core Declaration public PdfDocument SignPdfWithDigitalSignature(PdfSignature Signature) Parameters Type Name Description IronPdf.PdfSignature Signature The PdfSignature. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTML(HtmlStamp) Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of every page. Declaration public PdfDocument StampHTML(HtmlStamp Stamp) Parameters Type Name Description IronPdf.HtmlStamp Stamp The IronPdf.HtmlStamp stamp. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTML(HtmlStamp, IEnumerable<Int32>) Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of specified pages. Declaration public PdfDocument StampHTML(HtmlStamp Stamp, IEnumerable<int> PageIndexesToStamp) Parameters Type Name Description IronPdf.HtmlStamp Stamp The IronPdf.HtmlStamp stamp. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The list page indexes (zero-based page number) to stamp. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTML(HtmlStamp, Int32) Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of one page. Declaration public PdfDocument StampHTML(HtmlStamp Stamp, int PageIndexToStamp) Parameters Type Name Description IronPdf.HtmlStamp Stamp The IronPdf.HtmlStamp stamp. System.Int32 PageIndexToStamp The page index (zero-based page number) to stamp. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style ToBitmap(IEnumerable<Int32>, Int32) Rasterizes (renders) the PDF into System.Drawing.Bitmap objects. Specific pages may be selected using the PageNumbers parameter. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap[] ToBitmap(IEnumerable<int> pageNumbers, int DPI = 72) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageNumbers Specific page numbers may be given to only convert part of the PDF document to images System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap [] An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToBitmap(Int32) Rasterizes (renders) the PDF into System.Drawing.Bitmap objects. 1 Bitmap for each page. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method. Please Dispose() each Bitmap object after use. Declaration public Bitmap[] ToBitmap(int DPI = 72) Parameters Type Name Description System.Int32 DPI The resolution of the output Bitmap in 'Dots Per Inch'. Higher DPI creates larger bitmap files of higher image quality. Returns Type Description System.Drawing.Bitmap [] An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToBitmap(Nullable<Int32>, Nullable<Int32>, IEnumerable<Int32>, Int32) Rasterizes (renders) the PDF into System.Drawing.Bitmap objects. Specific pages may be selected using the PageNumbers parameter. The Widths and Height of the output images may be specified. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap[] ToBitmap(Nullable<int> imageMaxWidth, Nullable<int> imageMaxHeight, IEnumerable<int> pageNumbers = null, int DPI = 72) Parameters Type Name Description System.Nullable < System.Int32 > imageMaxWidth The target maximum width(in mm) of the output images. System.Nullable < System.Int32 > imageMaxHeight The target maximum height(in mm) of the output images. System.Collections.Generic.IEnumerable < System.Int32 > pageNumbers Specific page numbers may be given to only convert part of the PDF document to images System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap [] An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, IEnumerable<int> PageNumbers, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, IEnumerable<int> PageNumbers, int DPI = 72) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, int DPI) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, IEnumerable<int> PageNumbers, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, IEnumerable<int> PageNumbers, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, int DPI) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 72) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. TrySaveAs(String) Attempt to save the PdfDocument to a file. Declaration public bool TrySaveAs(string FileName) Parameters Type Name Description System.String FileName File Path Returns Type Description System.Boolean } true if the file was saved successfully. false if an error occurred (e.g. file was locked or insufficient permissions). VerifyPdfSignatures() Verifies all the PDF signatures for this PDF document and returns true if there are no invalid signatures. Declaration public bool VerifyPdfSignatures() Returns Type Description System.Boolean true if all digital signatures for this PDF document are currently valid. Editing a PDF document in any way will invalidate signatures. VerifyPdfSignaturesInFile(String) Verifies all the PDF signatures for a PDF file (by file path) and returns true if there are no invalid signatures. Declaration public static bool VerifyPdfSignaturesInFile(string PdfFilePath) Parameters Type Name Description System.String PdfFilePath The full or relative PDF file path. Returns Type Description System.Boolean true if all digital signatures for the PDF document are currently valid. Editing a PDF document in any way will invalidate signatures. WatermarkAllPages(String, PdfDocument.WaterMarkLocation, Int32, Int32, String) Watermarks all pages of this PDF with HTML content. Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size. For more advanced options see StampHTML(HtmlStamp) Declaration public PdfDocument WatermarkAllPages(string Html, PdfDocument.WaterMarkLocation Location, int Opacity = 100, int Rotation = 0, string Hyperlink = \"\") Parameters Type Name Description System.String Html The HTML fragment IronPdf.PdfDocument.WaterMarkLocation Location The location of the watermark. IronPdf.PdfDocument.WaterMarkLocation System.Int32 Opacity The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible. System.Int32 Rotation The rotation of the watermark content in clockwise degrees. System.String Hyperlink An optional hyperlink which the watermark will link to. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style WatermarkPage(String, Int32, PdfDocument.WaterMarkLocation, Int32, Int32, String) Watermarks a single page of this PDF with HTML content. Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size. For more advanced options see StampHTML(HtmlStamp, Int32) Declaration public PdfDocument WatermarkPage(string Html, int PageIndexToWaterMark, PdfDocument.WaterMarkLocation Location, int Opacity = 100, int Rotation = 0, string Hyperlink = \"\") Parameters Type Name Description System.String Html The HTML fragment System.Int32 PageIndexToWaterMark The page index (zero-based page number) of this PDF to watermark. IronPdf.PdfDocument.WaterMarkLocation Location The location of the watermark. IronPdf.PdfDocument.WaterMarkLocation System.Int32 Opacity The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible. System.Int32 Rotation The rotation of the watermark content in clockwise degrees. System.String Hyperlink An optional hyperlink which the watermark will link to. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style WatermarkPages(String, IEnumerable<Int32>, PdfDocument.WaterMarkLocation, Int32, Int32, String, PdfDocument.PositionOptions) Watermarks all pages of this PDF with HTML content. Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size. For more advanced options see StampHTML(HtmlStamp, IEnumerable<Int32>) Declaration public PdfDocument WatermarkPages(string Html, IEnumerable<int> PageIndexesToWaterMark, PdfDocument.WaterMarkLocation Location, int Opacity = 100, int Rotation = 0, string Hyperlink = \"\", PdfDocument.PositionOptions positionOptions = null) Parameters Type Name Description System.String Html The HTML fragment System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToWaterMark A list of page index (zero-based page number) of this PDF to watermark. IronPdf.PdfDocument.WaterMarkLocation Location The location of the watermark. IronPdf.PdfDocument.WaterMarkLocation System.Int32 Opacity The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible. System.Int32 Rotation The rotation of the watermark content in clockwise degrees. System.String Hyperlink An optional hyperlink which the watermark will link to. IronPdf.PdfDocument.PositionOptions positionOptions Additional options for positioning the watermark on the page Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Implements System.IDisposable"
  },
  "api/IronPdf.PdfDocument.PdfMetaData.html": {
    "href": "api/IronPdf.PdfDocument.PdfMetaData.html",
    "title": "Class PdfDocument.PdfMetaData | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocument.PdfMetaData A class defining PDF file meta-data. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Implemented in MetaData . Inheritance System.Object PdfDocument.PdfMetaData Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfMetaData : Object Properties Author Gets or sets the Author of the document. Declaration public string Author { get; set; } Property Value Type Description System.String The author name as a string. CreationDate Gets or sets the PDF file creation DateTime. Declaration public DateTime CreationDate { get; set; } Property Value Type Description System.DateTime DateTime of PDF file creation. Creator Gets or sets the Creator of the document. Declaration public string Creator { get; set; } Property Value Type Description System.String The creator name as a string. CustomProperties Property defining custom metadata properties of the document. Declaration public PdfDocument.PdfCustomMetadataProperties CustomProperties { get; } Property Value Type Description IronPdf.PdfDocument.PdfCustomMetadataProperties Keywords Gets or sets the Keywords of the document. This helps search indexes and operating systems correctly index the PDF. Declaration public string Keywords { get; set; } Property Value Type Description System.String The Keywords of the document as a string. It is customary to use comma separation between keywords. ModifiedDate Gets or sets the PDF file last-modified DateTime. Declaration public DateTime ModifiedDate { get; set; } Property Value Type Description System.DateTime DateTime of PDF file modification. Producer Gets or sets the Producer of the document. Declaration public string Producer { get; set; } Property Value Type Description System.String The producer name as a string. Subject Gets or sets the Subject of the document. This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software. Declaration public string Subject { get; set; } Property Value Type Description System.String The Subject of the document as a string. Title Gets or sets the Title of the document. This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software. Declaration public string Title { get; set; } Property Value Type Description System.String The Title of the document as a string."
  },
  "api/IronPdf.PdfPagesCollection.html": {
    "href": "api/IronPdf.PdfPagesCollection.html",
    "title": "Class PdfPagesCollection | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPagesCollection Class for managing the collection of IronPdf.PdfPage elements. Inheritance System.Object PdfPagesCollection Implements System.Collections.Generic.IEnumerable < IronPdf.PdfPage > System.Collections.IEnumerable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfPagesCollection : Object Properties Count Gets the number of elements contained in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 The count of pages. Item[Int32] Gets the IronPdf.PdfPage at the specified index. Declaration public PdfPage this[int index] { get; } Parameters Type Name Description System.Int32 index The index. Property Value Type Description IronPdf.PdfPage The IronPdf.PdfPage . Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<PdfPage> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IronPdf.PdfPage > An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronPdf.SimpleHeaderFooter.html": {
    "href": "api/IronPdf.SimpleHeaderFooter.html",
    "title": "Class SimpleHeaderFooter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class SimpleHeaderFooter Defines PDF Header and Footer display options. Inheritance System.Object SimpleHeaderFooter HtmlHeaderFooter Namespace : IronPdf Assembly : IronPdf.dll Syntax public class SimpleHeaderFooter : Object Constructors SimpleHeaderFooter() Declaration public SimpleHeaderFooter() Fields CenterText Sets the centered header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string CenterText Field Value Type Description System.String DrawDividerLine Adds a horizontal line divider between the header / footer and the page content on every page of the PDF document. Declaration public bool DrawDividerLine Field Value Type Description System.Boolean FontFamily Font used to render the PDF header. Declaration public string FontFamily Field Value Type Description System.String FontSize Font size in px. Declaration public int FontSize Field Value Type Description System.Int32 LeftText Sets the left hand side header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string LeftText Field Value Type Description System.String RightText Sets the right hand side header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string RightText Field Value Type Description System.String Spacing Space between the header and page content in millimeters. Declaration public int Spacing Field Value Type Description System.Int32 Methods Clone() Clones this instance. Declaration public object Clone() Returns Type Description System.Object System.Object of type SimpleHeaderFooter"
  },
  "api/IronPdf.TempFolder.html": {
    "href": "api/IronPdf.TempFolder.html",
    "title": "Class TempFolder | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TempFolder Provides operations over the temporary folder Inheritance System.Object TempFolder Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class TempFolder : Object Methods CleanupTempImages(Nullable<TimeSpan>) Method to remove temporary images from TempFolderPath If you used a custom TempFolderPath then set TempFolderPath to point towards your deployment directory before you call this cleanup method. Declaration public static void CleanupTempImages(Nullable<TimeSpan> expirationTime = null) Parameters Type Name Description System.Nullable < System.TimeSpan > expirationTime Time from last access for files to delete. All files are deleted by default."
  }
}
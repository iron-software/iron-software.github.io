{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronPDF | C# PDF Library Documentation | IronPDF",
    "keywords": "IronPDF IronPDF is a .NET library allowing the generation, reading, editing & saving PDF files in .NET projects. IronPDF features HTML to PDF for .NET Core, Standard, & Framework with full HTML to PDF support including CSS3 and JS. There is a quick-start guide at https://ironpdf.com/docs/ Compatibility Welcome the the cutting edge of .NET PDF rendering and manipulation technology with IronPDF now featuring Chrome identical HTML rendering with full support for: Generate PDFs in C# with HTML, MVC, ASPX, & images. Supports .NET Core 2, 3 & .NET 5, 6, 7, 8 for Windows, Linux, macOs and Azure. Supports applications and websites developed in .NET FrameWork 4+ for Windows and Azure HTML5 Bootstrap and Responsive CSS3 JavaScript including Angular and React SVG and all common image assets To Install PM> Install-Package IronPdf Remove any reference to IronPdf.Threading which is now legacy software. The IronPdf main package is threading and async compatible! Try out the new 2021 API We haven't broken the IronPDF API you are using, it will remain! However, the old style is being superseded by a better one to give you more control. For examples you now have Print options and Http Login controls specific to your renderer using IronPdf; //... ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.FitToPaperWidth = true; Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Screen; Renderer.RenderingOptions.PrintHtmlBackgrounds = true; Renderer.RenderingOptions.CreatePdfFormsFromHtml = true; var doc = Renderer.RenderHtmlAsPdf(\"<h1>Hello world!</h1>\"); //var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); //var doc = Renderer.RenderHtmlFileAsPdf(\"example.html\"); doc.SaveAs(\"google_chrome.pdf\"); Pixel perfect Chrome rendering This example will give you PDFs which are pixel perfect to the latest chrome desktop browser's \"print to pdf\" functionality: ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Print; Renderer.RenderingOptions.PrintHtmlBackgrounds = false; Renderer.RenderingOptions.CreatePdfFormsFromHtml = false; var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); However...we would recommend using improved features such as: Using screen stylesheets to print PDFs which are less fiddly to develop and more true to existing web assets. Responsive layout support Creating PDF Forms from your HTML form elements. ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Screen; Renderer.RenderingOptions.PrintHtmlBackgrounds = true; Renderer.RenderingOptions.CreatePdfFormsFromHtml = true; Renderer.RenderingOptions.ViewPortWidth = 1080 ; //px var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); Use every CPU core available Multithreading and Async support for our Chrome rendering engine is in a different league to all previous builds. For enterprise grade multi-threading use our Chrome in your existing threads and it will work. For web applications this also takes zero setup. For batch processing for HtmlToPdf we suggest using the built in .NET Parallel.ForEach We love async and have provided Async variants of methods such as ChromePdfRenderer.RenderHtmlAsPdf Documentation Links Code Samples : https://ironpdf.com/examples/using-html-to-create-a-pdf/ MSDN Class Reference : <./> How-To Guides : https://ironpdf.com/how-to/html-file-to-pdf/ Tutorials : https://ironpdf.com/tutorials/html-to-pdf/ Support : developers@ironsoftware.com MSDN Style Class Reference Explore the IronPDF API in the left navigation of this page. Popular Links include: IronPdf Namespace Index of all IronPdf Classes IronPdf.ChromePdfRenderer Html to PDF generator IronPdf.ChromePdfRenderOptions Html to PDF generation settings IronPdf.AspxToPdf ASPX to PDF generator IronPdf.ImageToPdfConverter Image to PDF generator IronPdf.PdfDocument A class to open, manipulate, extract data and save PDF files"
  },
  "api/IronPdf.Annotations.html": {
    "href": "api/IronPdf.Annotations.html",
    "title": "Namespace IronPdf.Annotations | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Annotations Classes TextAnnotation Defines a Sticky-Note style PDF annotation. AddTextAnnotation(TextAnnotation, Int32, Int32, Int32, Int32, Int32) TextAnnotation.AnnotationIcon Icons used to interact with (open/close) the annotation with the PDF page."
  },
  "api/IronPdf.Annotations.TextAnnotation.AnnotationIcon.html": {
    "href": "api/IronPdf.Annotations.TextAnnotation.AnnotationIcon.html",
    "title": "Class TextAnnotation.AnnotationIcon | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextAnnotation.AnnotationIcon Icons used to interact with (open/close) the annotation with the PDF page. Inheritance System.Object TextAnnotation.AnnotationIcon Namespace : IronPdf.Annotations Assembly : IronPdf.dll Syntax public sealed class AnnotationIcon : Enum Fields Comment A Comment Icon Declaration public const TextAnnotation.AnnotationIcon Comment Field Value Type Description TextAnnotation.AnnotationIcon Help A Help Icon Declaration public const TextAnnotation.AnnotationIcon Help Field Value Type Description TextAnnotation.AnnotationIcon Insert An 'Insert' Icon Declaration public const TextAnnotation.AnnotationIcon Insert Field Value Type Description TextAnnotation.AnnotationIcon Key A Key Icon Declaration public const TextAnnotation.AnnotationIcon Key Field Value Type Description TextAnnotation.AnnotationIcon NewParagraph A New Paragraph Icon Declaration public const TextAnnotation.AnnotationIcon NewParagraph Field Value Type Description TextAnnotation.AnnotationIcon NoIcon No icon, this is useful when an annotation will be signified by an existing graphic or object. Declaration public const TextAnnotation.AnnotationIcon NoIcon Field Value Type Description TextAnnotation.AnnotationIcon Note A Note Icon Declaration public const TextAnnotation.AnnotationIcon Note Field Value Type Description TextAnnotation.AnnotationIcon Paragraph A 'Paragraph of Text' Icon Declaration public const TextAnnotation.AnnotationIcon Paragraph Field Value Type Description TextAnnotation.AnnotationIcon value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Annotations.TextAnnotation.html": {
    "href": "api/IronPdf.Annotations.TextAnnotation.html",
    "title": "Class TextAnnotation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextAnnotation Defines a Sticky-Note style PDF annotation. AddTextAnnotation(TextAnnotation, Int32, Int32, Int32, Int32, Int32) Inheritance System.Object TextAnnotation Namespace : IronPdf.Annotations Assembly : IronPdf.dll Syntax public class TextAnnotation : Object Constructors TextAnnotation() Declaration public TextAnnotation() Properties Color The color of the annotation's 'Sticky Note' Declaration public Nullable<Color> Color { get; set; } Property Value Type Description System.Nullable < System.Drawing.Color > Contents The contents of the 'sticky note' annotation Declaration public string Contents { get; set; } Property Value Type Description System.String Hidden Hides the annotation from users Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean Icon An icon to visually represent the 'sticky note' annotation Declaration public TextAnnotation.AnnotationIcon Icon { get; set; } Property Value Type Description TextAnnotation.AnnotationIcon Opacity The opacity of the annotation (valid values are from 0.0 to 1.0) Declaration public double Opacity { get; set; } Property Value Type Description System.Double OpenByDefault Sets the annotation to be opened and readable by default, without user interaction Declaration public bool OpenByDefault { get; set; } Property Value Type Description System.Boolean Printable Allows the annotation to be printed when users print the PDF Declaration public bool Printable { get; set; } Property Value Type Description System.Boolean ReadOnly Allows the annotation to be printed when users print the PDF Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean Rotateable Allows the annotation to be rotated. E.g. when the containing page os rotated Declaration public bool Rotateable { get; set; } Property Value Type Description System.Boolean Subject The sub title of the annotation as displayed in the header of the 'sticky note' Declaration public string Subject { get; set; } Property Value Type Description System.String Title The main title of the annotation as displayed in the header of the 'sticky note' Declaration public string Title { get; set; } Property Value Type Description System.String Methods ToString() Returns a System.String that represents this annotation. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance."
  },
  "api/IronPdf.Bookmarks.html": {
    "href": "api/IronPdf.Bookmarks.html",
    "title": "Namespace IronPdf.Bookmarks | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Bookmarks Classes PdfBookMark Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. PdfOutline A editable collection of PDF navigational bookmark objects."
  },
  "api/IronPdf.Bookmarks.PdfBookMark.html": {
    "href": "api/IronPdf.Bookmarks.PdfBookMark.html",
    "title": "Class PdfBookMark | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfBookMark Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. Inheritance System.Object PdfBookMark Namespace : IronPdf.Bookmarks Assembly : IronPdf.dll Syntax public class PdfBookMark : Object Constructors PdfBookMark() Declaration public PdfBookMark() Properties FullBookmarkHierarchy String representing the current bookmark title and all of its parents, each separated by two backslashes Declaration public string FullBookmarkHierarchy { get; set; } Property Value Type Description System.String PageIndex The zero based page number that the bookmark links to. Declaration public int PageIndex { get; set; } Property Value Type Description System.Int32 The index of the page. ParentText Text of the bookmark which acts as the parent to this bookmark. Use null or an empty string to represent a top-level bookmark. Declaration public string ParentText { get; set; } Property Value Type Description System.String PreviousText Text of the bookmark which immediately precedes this bookmark. Use null or an empty string to represent the first bookmark of a given level. Declaration public string PreviousText { get; set; } Property Value Type Description System.String Text The display text of the bookmark Declaration public string Text { get; set; } Property Value Type Description System.String"
  },
  "api/IronPdf.Bookmarks.PdfOutline.html": {
    "href": "api/IronPdf.Bookmarks.PdfOutline.html",
    "title": "Class PdfOutline | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfOutline A editable collection of PDF navigational bookmark objects. Inheritance System.Object PdfOutline Namespace : IronPdf.Bookmarks Assembly : IronPdf.dll Syntax public class PdfOutline : Object Properties BookMarkList Gets the full list of current outline book marks. Declaration public List<PdfBookMark> BookMarkList { get; } Property Value Type Description System.Collections.Generic.List < PdfBookMark > The PDF documents full collection of bookmarks. Methods AddBookMarkAtEnd(String, Int32, String) Adds a bookmark at the end of the document outline. Declaration public void AddBookMarkAtEnd(string Text, int PageIndex, string ParentText = null) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 System.String ParentText The indent level in the outline. An IndentLevel of zero is in the root. An IndentLevel of N will be nested inside the most recent previous bookmark of IndentLevel N-1. AddBookMarkAtStart(String, Int32, String) Adds a bookmark at the start of the document outline. Declaration public void AddBookMarkAtStart(string Text, int PageIndex, string ParentText = null) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 System.String ParentText The indent level in the outline. An IndentLevel of zero is in the root. An IndentLevel of N will be nested inside the most recent previous bookmark of IndentLevel N-1. Clean() Removes all existing bookmarks from the PDF Declaration public void Clean() InsertBookMark(String, Int32, String, String) Insert a bookmark at the start of the document outline. Declaration public void InsertBookMark(string Text, int PageIndex, string ParentText = null, string PreviousText = null) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 System.String ParentText The indent level in the outline. An IndentLevel of zero is in the root. An IndentLevel of N will be nested inside the most recent previous bookmark of IndentLevel N-1. System.String PreviousText Name of the bookmark which precedes this bookmark RemoveBookMark(PdfBookMark) Removes a single book mark from the BookMarkList Declaration public void RemoveBookMark(PdfBookMark bookmark) Parameters Type Name Description PdfBookMark bookmark The bookmark object to remove. RemoveBookMarkAt(Int32) Removes a single book mark from the BookMarkList Declaration public void RemoveBookMarkAt(int index) Parameters Type Name Description System.Int32 index The index of the bookmark to remove."
  },
  "api/IronPdf.ChromeHttpLoginCredentials.html": {
    "href": "api/IronPdf.ChromeHttpLoginCredentials.html",
    "title": "Class ChromeHttpLoginCredentials | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromeHttpLoginCredentials Provides credentials for IronPdf's embedded Chrome browser to log-in to an intranet, extranet or website, impersonating a user. This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites. Inheritance System.Object ChromeHttpLoginCredentials Namespace : IronPdf Assembly : IronPdf.dll Syntax public class ChromeHttpLoginCredentials : Object Constructors ChromeHttpLoginCredentials() Declaration public ChromeHttpLoginCredentials() Fields CustomCookies A Dictionary which allows custom cookies to be posted with every login request, and HTTP request made by RenderUriToHml methods. Declaration public Dictionary<string, string> CustomCookies Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > EnableCookies Enables cookies to be stored and sent when using RenderUriToHml methods. Declaration public bool EnableCookies Field Value Type Description System.Boolean Properties NetworkPassword Optional: Password credential for Windows / Linux network security authentication. Declaration public string NetworkPassword { get; set; } Property Value Type Description System.String NetworkUsername Optional: User-name credential for Windows / Linux network security authentication. Declaration public string NetworkUsername { get; set; } Property Value Type Description System.String Methods Finalize() Destructor cleans up all temporary cookies files for the HttpLoginCredentials instance. Declaration protected override void Finalize()"
  },
  "api/IronPdf.ChromePdfRenderer.html": {
    "href": "api/IronPdf.ChromePdfRenderer.html",
    "title": "Class ChromePdfRenderer | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromePdfRenderer IronPdf.ChromePdfRenderer allows any web page or Html 'snippet' to be turned into a PDF document using an up-to-date embedded Chrome browser. As of 2021 Iron Software recommend ChromePdfRenderer as our best PDF Renderer and a drop-in replacement for this class. Inheritance System.Object BasePdfRenderer ChromePdfRenderer Implements IPdfRenderer Inherited Members BasePdfRenderer.RenderHtmlAsPdf(String, Uri, String) BasePdfRenderer.RenderHtmlAsPdf(String, String, String) BasePdfRenderer.RenderHtmlFileAsPdf(String) BasePdfRenderer.RenderHTMLFileAsPdf(String) BasePdfRenderer.RenderUrlAsPdf(String) BasePdfRenderer.RenderUrlAsPdf(Uri) BasePdfRenderer.RenderHtmlAsPdfAsync(String, Uri) BasePdfRenderer.RenderHtmlFileAsPdfAsync(String) BasePdfRenderer.RenderUrlAsPdfAsync(Uri) BasePdfRenderer.RenderUrlAsPdfAsync(String) BasePdfRenderer.RenderingOptions BasePdfRenderer.LoginCredentials Namespace : IronPdf Assembly : IronPdf.dll Syntax public class ChromePdfRenderer : BasePdfRenderer, IPdfRenderer Constructors ChromePdfRenderer() Create a new Chrome Html To PDF renderer. Declaration public ChromePdfRenderer() Methods ApplyCookies(String, ChromeHttpLoginCredentials) Applies cookies from the specified login credentials class to the specified url Declaration public static void ApplyCookies(string Url, ChromeHttpLoginCredentials Login) Parameters Type Name Description System.String Url Url cookies will apply to ChromeHttpLoginCredentials Login Login credentials which includes CustomCookies property ClearCookies() Clear cookies for all urls Declaration public static void ClearCookies() StaticRenderHtmlAsPdf(String, ChromePdfRenderOptions, String) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static version of the RenderHtmlAsPdf method. Declaration public static PdfDocument StaticRenderHtmlAsPdf(string Html, ChromePdfRenderOptions Options = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. System.String Proxy Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument with the Html rendered as its contents. StaticRenderHtmlAsPdf(String, String, ChromePdfRenderOptions, String) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static version of the RenderHtmlAsPdf method. Declaration public static PdfDocument StaticRenderHtmlAsPdf(string Html, string BaseUrlOrPath, ChromePdfRenderOptions Options = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.String BaseUrlOrPath Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files. May be a remote URL or local file path. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. System.String Proxy Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument with the Html rendered as its contents. StaticRenderHtmlAsPdf(String, Uri, ChromePdfRenderOptions, String) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static version of the RenderHtmlAsPdf method. Declaration public static PdfDocument StaticRenderHtmlAsPdf(string Html, Uri BaseUrl, ChromePdfRenderOptions Options = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files. May be a remote URL or local file path. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. System.String Proxy Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument with the Html rendered as its contents. StaticRenderHtmlAsPdfAsync(String, Uri, ChromePdfRenderOptions) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static Async version of the RenderHtmlAsPdf method. Declaration public static Task<PdfDocument> StaticRenderHtmlAsPdfAsync(string Html, Uri BaseUrl = null, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files. May be a remote URL or local file path. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Html rendered as its contents. StaticRenderHTMLFileAsPdf(String, ChromePdfRenderOptions) Renders an HTML file as a PDF file. Returns a PdfDocument object which may be edited and saved to disk or served on a website. Static version of the RenderHTMLFileAsPdf method. Declaration public static PdfDocument StaticRenderHTMLFileAsPdf(string FilePath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String FilePath Path to an Html file. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument with the Html file rendered as its contents.. StaticRenderHTMLFileAsPdfAsync(String, ChromePdfRenderOptions) Renders an HTML file as a PDF file. Returns a PdfDocument object which may be edited and saved to disk or served on a website. Static Async version of the RenderHTMLFileAsPdf method. Declaration public static Task<PdfDocument> StaticRenderHTMLFileAsPdfAsync(string FilePath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String FilePath Path to an Html file. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Html file rendered as its contents. StaticRenderUrlAsPdf(String, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static version of the RenderUrlAsPdf method. Declaration public static PdfDocument StaticRenderUrlAsPdf(string UrlOrPath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String UrlOrPath An absolute Url. Points to the Html document to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument with the Url rendered as its contents. StaticRenderUrlAsPdf(Uri, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static version of the RenderUrlAsPdf method. Declaration public static PdfDocument StaticRenderUrlAsPdf(Uri Url, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.Uri Url An absolute Uri. Points to the Html document or local file file to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument with the Url rendered as its contents. StaticRenderUrlAsPdfAsync(String, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static Async version of the RenderUrlAsPdf method. Declaration public static Task<PdfDocument> StaticRenderUrlAsPdfAsync(string UrlOrPath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String UrlOrPath An absolute Url. Points to the Html document or local file to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Url rendered as its contents. StaticRenderUrlAsPdfAsync(Uri, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static Async version of the RenderUrlAsPdf method. Declaration public static Task<PdfDocument> StaticRenderUrlAsPdfAsync(Uri Url, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.Uri Url An absolute Uri. Points to the Html document or local file file to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Url rendered as its contents. Implements IPdfRenderer Inherited members RenderHtmlAsPdf(String, Uri, String) RenderHtmlAsPdf(String, String, String) RenderHtmlFileAsPdf(String) RenderHTMLFileAsPdf(String) RenderUrlAsPdf(String) RenderUrlAsPdf(Uri) RenderHtmlAsPdfAsync(String, Uri) RenderHtmlFileAsPdfAsync(String) RenderUrlAsPdfAsync(Uri) RenderUrlAsPdfAsync(String) RenderingOptions LoginCredentials"
  },
  "api/IronPdf.ChromePdfRenderOptions.html": {
    "href": "api/IronPdf.ChromePdfRenderOptions.html",
    "title": "Class ChromePdfRenderOptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromePdfRenderOptions Html To PDF output options for ChromePdfRenderer . Specifies options such as Paper-Size, DPI, Headers and Footers and other Chromium specific browser setup options. Inheritance System.Object ChromePdfRenderOptions Namespace : IronPdf Assembly : IronPdf.dll Syntax public class ChromePdfRenderOptions : Object Constructors ChromePdfRenderOptions() Declaration public ChromePdfRenderOptions() Properties ApplyMarginToHeaderAndFooter Apply margin option to Html Headers and Footers. default is false which make Html Headers and Footers have 0 margin. Only support ChromeRender Declaration public bool ApplyMarginToHeaderAndFooter { get; set; } Property Value Type Description System.Boolean CreatePdfFormsFromHtml Turns all Html forms elements into editable PDF forms. Declaration public bool CreatePdfFormsFromHtml { get; set; } Property Value Type Description System.Boolean CssMediaType Enables Media=\"screen\" CSS Styles and StyleSheets Note: By setting AllowScreenCss=false, IronPdf renders PDFs from HTML using CSS for media=\"print\" as if printing a web page in a browser print dialog. Declaration public PdfCssMediaType CssMediaType { get; set; } Property Value Type Description PdfCssMediaType CustomCssUrl Allows a custom CSS style-sheet to be applied to Html before rendering. May be a local file path, or remote url. Declaration public string CustomCssUrl { get; set; } Property Value Type Description System.String EnableJavaScript Enables JavaScript and Json to be executed before the page is rendered. Ideal for printing from Ajax / Angular Applications. Also see RenderDelay Declaration public bool EnableJavaScript { get; set; } Property Value Type Description System.Boolean FirstPageNumber First page number to be used in PDF Headers and Footers. Declaration public int FirstPageNumber { get; set; } Property Value Type Description System.Int32 See Also TextHeader HtmlHeader TextFooter HtmlFooter FitToPaperWidth Where possible, shrinks the PDF content to 1 page of paper width. This applies when the PDF content is too wide for the given PaperSize (given that 1 HTML pixel = 1 DPI). Declaration public bool FitToPaperWidth { get; set; } Property Value Type Description System.Boolean GenerateUniqueDocumentIdentifiers Set to false if you wish to use binary file equality to compare PDFs such as for Unit Tests. if false, System.Guid is not generated inside PDF DOM (better for unit testing) and BinaryData of two identical PDF files is the same. If true, System.Guid is generated inside PDF DOM (better for security) and BinaryData of two identical PDF files differs. Default value is false. Declaration public bool GenerateUniqueDocumentIdentifiers { get; set; } Property Value Type Description System.Boolean GrayScale Outputs a black-and-white PDF Declaration public bool GrayScale { get; set; } Property Value Type Description System.Boolean HtmlFooter Sets the header content for every PDF page as Html. Supports 'mail-merge'. Declaration public HtmlHeaderFooter HtmlFooter { get; set; } Property Value Type Description IronPdf.HtmlHeaderFooter HtmlHeader Sets the footer content for every PDF page as Html. Supports 'mail-merge'. Declaration public HtmlHeaderFooter HtmlHeader { get; set; } Property Value Type Description IronPdf.HtmlHeaderFooter InputEncoding The input character encoding as a string; Declaration public Encoding InputEncoding { get; set; } Property Value Type Description System.Text.Encoding MarginBottom Bottom Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Declaration public double MarginBottom { get; set; } Property Value Type Description System.Double MarginLeft Left Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Declaration public double MarginLeft { get; set; } Property Value Type Description System.Double MarginRight Right Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Declaration public double MarginRight { get; set; } Property Value Type Description System.Double MarginTop Top Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Declaration public double MarginTop { get; set; } Property Value Type Description System.Double PaperOrientation The PDF paper orientation. E.g. Portrait or Landscape. Declaration public PdfPaperOrientation PaperOrientation { get; set; } Property Value Type Description PdfPaperOrientation PaperSize Set an output paper size for PDF pages. System.Drawing.Printing.PaperKind. Use SetCustomPaperSize(int width, int height) for custom sizes. Declaration public PdfPaperSize PaperSize { get; set; } Property Value Type Description PdfPaperSize PrintHtmlBackgrounds Prints background-colors and images from Html. Declaration public bool PrintHtmlBackgrounds { get; set; } Property Value Type Description System.Boolean RenderDelay Milliseconds to wait after Html is rendered before printing. This can use useful when considering the rendering of JavaScript, Ajax or animations. Declaration public int RenderDelay { get; set; } Property Value Type Description System.Int32 TextFooter Sets the header content for every PDF page as text. Supports 'mail-merge' and automatically turns urls into hyperlinks.. Declaration public TextHeaderFooter TextFooter { get; set; } Property Value Type Description TextHeaderFooter TextHeader Sets the footer content for every PDF page as text. Supports 'mail-merge' and automatically turns urls into hyperlinks.. Declaration public TextHeaderFooter TextHeader { get; set; } Property Value Type Description TextHeaderFooter Timeout Render timeout in seconds Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 Title PDF Document Name and Title meta-data. Not required. Useful for mail-merge and automatic file naming in the IronPdf MVC and Razor extensions. Declaration public string Title { get; set; } Property Value Type Description System.String ViewPortHeight Defines a virtual screen height used to render HTML to PDF in IronPdf. Measured in pixels. Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified. Smaller sizes (particularly width) will render responsive versions of many websites. Declaration public int ViewPortHeight { get; set; } Property Value Type Description System.Int32 ViewPortWidth Defines a virtual screen width used to render HTML to PDF in IronPdf. Measured in pixels. Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified. Smaller sizes (particularly width) will render responsive versions of many website Declaration public int ViewPortWidth { get; set; } Property Value Type Description System.Int32 Zoom The zoom level in %. Enlarges the rendering size of Html documents. Declaration public int Zoom { get; set; } Property Value Type Description System.Int32 Methods Clone() Supports System.ICloneable . Creates a deep copy of this class instance. Declaration public object Clone() Returns Type Description System.Object A deep clone of this instance. Use explicit casting to convert object back to the intended type. SetCustomPaperSizeinCentimeters(Double, Double) Set an output paper size for PDF pages. Dimensions are in Centimeters. Declaration public void SetCustomPaperSizeinCentimeters(double width, double height) Parameters Type Name Description System.Double width Custom paper width in cm. System.Double height Custom paper height in cm. SetCustomPaperSizeInInches(Double, Double) Set an output paper size for PDF pages. Dimensions are in Inches. Declaration public void SetCustomPaperSizeInInches(double width, double height) Parameters Type Name Description System.Double width Custom paper width in Inches. System.Double height Custom paper height in Inches. SetCustomPaperSizeinMilimeters(Double, Double) Set an output paper size for PDF pages. Dimensions are in millimeters. Declaration public void SetCustomPaperSizeinMilimeters(double width, double height) Parameters Type Name Description System.Double width Custom paper width in millimeters. System.Double height Custom paper height in millimeters. SetCustomPaperSizeinPixelsOrPoints(Double, Double, Int32) Set an output paper size for PDF pages. Dimensions are in screen Pixels or printer Points. Declaration public void SetCustomPaperSizeinPixelsOrPoints(double width, double height, int DPI = 96) Parameters Type Name Description System.Double width Custom paper width in pixels/points. System.Double height Custom paper height in pixels/points. System.Int32 DPI Intended print resolution of the PDF. To be clear PDFs have no fixed DPI/PPI value for rendering. 72 and 96 are common onscreen values. 300 is a comon value used in commercial printing."
  },
  "api/IronPdf.Deployment.BaseVersionFactory.html": {
    "href": "api/IronPdf.Deployment.BaseVersionFactory.html",
    "title": "Class BaseVersionFactory | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BaseVersionFactory Inheritance System.Object BaseVersionFactory Namespace : IronPdf.Deployment Assembly : IronPdf.dll Syntax public abstract class BaseVersionFactory : Object Constructors BaseVersionFactory() Declaration protected BaseVersionFactory() Methods GetExpectedFileVersion() Declaration public Version GetExpectedFileVersion() Returns Type Description System.Version () Declaration public abstract string () Returns Type Description System.String () Declaration public abstract string () Returns Type Description System.String"
  },
  "api/IronPdf.Deployment.html": {
    "href": "api/IronPdf.Deployment.html",
    "title": "Namespace IronPdf.Deployment | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Deployment Classes BaseVersionFactory"
  },
  "api/IronPdf.Editing.html": {
    "href": "api/IronPdf.Editing.html",
    "title": "Namespace IronPdf.Editing | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Editing Classes HtmlStamp Methods to edit PDF documents by 'stamping' additional content into the foreground or background. HtmlStamp.StampLayer Defines if a stamp should be placed behind or on-top of existing PDF contents. StampLocation Location for a stamp to be applied to a PDF page. WaterMarkLocation Location for a simple watermark to be applied to a PDF page. WaterMarkPositioning Options to position the watermark on the page"
  },
  "api/IronPdf.Editing.HtmlStamp.html": {
    "href": "api/IronPdf.Editing.HtmlStamp.html",
    "title": "Class HtmlStamp | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HtmlStamp Methods to edit PDF documents by 'stamping' additional content into the foreground or background. Inheritance System.Object HtmlStamp Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class HtmlStamp : Object Constructors HtmlStamp() Initializes a new instance of the HtmlStamp class. Declaration public HtmlStamp() HtmlStamp(String) Initializes a new instance of the HtmlStamp class. Declaration public HtmlStamp(string Html) Parameters Type Name Description System.String Html The HTML fragment which will be stamped onto your PDF. HtmlStamp(String, Int32, Int32) Initializes a new instance of the HtmlStamp class. Declaration public HtmlStamp(string Html, int WidthInMM, int HeightInMM) Parameters Type Name Description System.String Html The HTML fragment which will be stamped onto your PDF. System.Int32 WidthInMM The width of the stamp in mm. System.Int32 HeightInMM The height of the stamp in mm. Fields MM_TO_PT Declaration public const double MM_TO_PT = 2.8346456693 Field Value Type Description System.Double Properties AutoCenterStampContentOnStampCanvas The automatic centers stamp content within stamp canvas as defined by Width and Height. Declaration public bool AutoCenterStampContentOnStampCanvas { get; set; } Property Value Type Description System.Boolean Bottom The position of the stamp from the Bottom edge of the PDF document in mm. If Top or Bottom is not set, the stamp will be vertically centered in the document. Declaration public int Bottom { get; set; } Property Value Type Description System.Int32 Height The height of the stamp in mm. Stamps can not automatically detect their own size based on their content. Declaration public int Height { get; set; } Property Value Type Description System.Int32 Html The HTML fragment which will be stamped onto your PDF. All external references to javascript, CSS and image files will be relative to HtmlBaseUrl . Declaration public string Html { get; set; } Property Value Type Description System.String HtmlBaseUrl The HTML base URL for which references to external CSS, Javascript and Image files will be relative. A trick to make references relative to a your project file is HtmlBaseUrl = new Uri(System.Reflection.Assembly.GetEntryAssembly().Location).AbsoluteUri Declaration public string HtmlBaseUrl { get; set; } Property Value Type Description System.String Hyperlink Makes the entire stamp link to a web hyperlink. Note that HTML links created by <a href=''> tags are not reserved by stamping. Declaration public string Hyperlink { get; set; } Property Value Type Description System.String Left The position of the stamp from the Left of the PDF document in mm. If Left or Right is not set, the stamp will be horizontally centered in the document. Declaration public int Left { get; set; } Property Value Type Description System.Int32 Location Defines default position of the stamp on the page Declaration public StampLocation Location { get; set; } Property Value Type Description StampLocation Opacity Allows the stamp to be transparent. 0 is invisible, 100 if fully opaque. Declaration public int Opacity { get; set; } Property Value Type Description System.Int32 Right The position of the stamp from the Right of the PDF document in mm. If Left or Right is not set, the stamp will be horizontally centered in the document. Declaration public int Right { get; set; } Property Value Type Description System.Int32 Rotation Rotates the stamp clockwise from 0 to 360 degrees as specified. Declaration public int Rotation { get; set; } Property Value Type Description System.Int32 Top The position of the stamp from the Top edge of the PDF document in mm. If Top or Bottom is not set, the stamp will be vertically centered in the document. Declaration public int Top { get; set; } Property Value Type Description System.Int32 Width The width of the stamp in mm. Stamps can not automatically detect their own size based on their content. Declaration public int Width { get; set; } Property Value Type Description System.Int32 ZIndex Defines if this stamp should be placed behind or on-top of existing PDF contents. Declaration public HtmlStamp.StampLayer ZIndex { get; set; } Property Value Type Description HtmlStamp.StampLayer"
  },
  "api/IronPdf.Editing.HtmlStamp.StampLayer.html": {
    "href": "api/IronPdf.Editing.HtmlStamp.StampLayer.html",
    "title": "Class HtmlStamp.StampLayer | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HtmlStamp.StampLayer Defines if a stamp should be placed behind or on-top of existing PDF contents. Inheritance System.Object HtmlStamp.StampLayer Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class StampLayer : Enum Fields BehindExistingPDFContent Stamp in the background Declaration public const HtmlStamp.StampLayer BehindExistingPDFContent Field Value Type Description HtmlStamp.StampLayer OnTopOfExistingPDFContent Stamp in the foreground Declaration public const HtmlStamp.StampLayer OnTopOfExistingPDFContent Field Value Type Description HtmlStamp.StampLayer value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.StampLocation.html": {
    "href": "api/IronPdf.Editing.StampLocation.html",
    "title": "Class StampLocation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class StampLocation Location for a stamp to be applied to a PDF page. Inheritance System.Object StampLocation Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class StampLocation : Enum Fields BottomCenter The bottom center of the page. Top, Left and Right will not be used. Declaration public const StampLocation BottomCenter Field Value Type Description StampLocation BottomLeft The bottom left of the page. Top and Right will not be used. Declaration public const StampLocation BottomLeft Field Value Type Description StampLocation BottomRight The bottom right of the page. Top and Left will not be used. Declaration public const StampLocation BottomRight Field Value Type Description StampLocation Custom Set using Left or Right and Top or Bottom. If both Left and Right was set, Left we be used. If both Top and Bottom was set, Top will be used. If none of Top, Bottom, Left and Right was set, will apply MiddleCenter. Declaration public const StampLocation Custom Field Value Type Description StampLocation MiddleCenter The dead center of the page Top, Bottom Left and Right will not be used. Declaration public const StampLocation MiddleCenter Field Value Type Description StampLocation MiddleLeft The middle left of the page. Top, Bottom and Right will not be used. Declaration public const StampLocation MiddleLeft Field Value Type Description StampLocation MiddleRight The middle right of the page Top, Bottom and Left will not be used. Declaration public const StampLocation MiddleRight Field Value Type Description StampLocation TopCenter The top center of the page. Bottom, Left and Right will not be used. Declaration public const StampLocation TopCenter Field Value Type Description StampLocation TopLeft The top left of the page. Bottom and Right will not be used. Declaration public const StampLocation TopLeft Field Value Type Description StampLocation TopRight The top right of the page. Bottom and Left will not be used. Declaration public const StampLocation TopRight Field Value Type Description StampLocation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.WaterMarkLocation.html": {
    "href": "api/IronPdf.Editing.WaterMarkLocation.html",
    "title": "Class WaterMarkLocation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class WaterMarkLocation Location for a simple watermark to be applied to a PDF page. Inheritance System.Object WaterMarkLocation Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class WaterMarkLocation : Enum Fields BottomCenter The bottom center of the page Declaration public const WaterMarkLocation BottomCenter Field Value Type Description WaterMarkLocation BottomLeft The bottom left of the page Declaration public const WaterMarkLocation BottomLeft Field Value Type Description WaterMarkLocation BottomRight The bottom right of the page Declaration public const WaterMarkLocation BottomRight Field Value Type Description WaterMarkLocation MiddleCenter The dead center of the page Declaration public const WaterMarkLocation MiddleCenter Field Value Type Description WaterMarkLocation MiddleLeft The middle left of the page Declaration public const WaterMarkLocation MiddleLeft Field Value Type Description WaterMarkLocation MiddleRight The middle right of the page Declaration public const WaterMarkLocation MiddleRight Field Value Type Description WaterMarkLocation TopCenter The top center of the page Declaration public const WaterMarkLocation TopCenter Field Value Type Description WaterMarkLocation TopLeft The top left of the page Declaration public const WaterMarkLocation TopLeft Field Value Type Description WaterMarkLocation TopRight The top right of the page Declaration public const WaterMarkLocation TopRight Field Value Type Description WaterMarkLocation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.WaterMarkPositioning.html": {
    "href": "api/IronPdf.Editing.WaterMarkPositioning.html",
    "title": "Class WaterMarkPositioning | C# PDF Library Documentation | IronPDF",
    "keywords": "Class WaterMarkPositioning Options to position the watermark on the page Inheritance System.Object WaterMarkPositioning Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class WaterMarkPositioning : Object Constructors WaterMarkPositioning() Declaration public WaterMarkPositioning() Properties Bottom Indent of the watermark from the bottom side of the page. Declaration public int Bottom { get; set; } Property Value Type Description System.Int32 Remarks Used when the watermark aligned to the bottom Left Indent of the watermark from the left side of the page. Declaration public int Left { get; set; } Property Value Type Description System.Int32 Remarks Used when the watermark aligned to the left or by default Right Indent of the watermark from the right side of the page. Declaration public int Right { get; set; } Property Value Type Description System.Int32 Remarks Used when the watermark aligned to the right Size Width and height of the watermark Declaration public int Size { get; set; } Property Value Type Description System.Int32 Top Indent of the watermark from the top side of the page. Declaration public int Top { get; set; } Property Value Type Description System.Int32 Remarks Used when the watermark aligned to the top or by default"
  },
  "api/IronPdf.Engines.Chrome.CefBrowserSettings.html": {
    "href": "api/IronPdf.Engines.Chrome.CefBrowserSettings.html",
    "title": "Class CefBrowserSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CefBrowserSettings Inheritance System.Object CefBrowserSettings Implements IMarshalableStruct System.IDisposable Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public class CefBrowserSettings : Object, IMarshalableStruct Constructors CefBrowserSettings() Declaration public CefBrowserSettings() Properties EnableJavascript Declaration public bool EnableJavascript { get; set; } Property Value Type Description System.Boolean Password Declaration public string Password { get; set; } Property Value Type Description System.String Username Declaration public string Username { get; set; } Property Value Type Description System.String ViewHeight Declaration public int ViewHeight { get; set; } Property Value Type Description System.Int32 ViewWidth Declaration public int ViewWidth { get; set; } Property Value Type Description System.Int32 Methods Dispose() Declaration public void Dispose() Finalize() Declaration protected override void Finalize() () Declaration public IntPtr () Returns Type Description System.IntPtr () Declaration public void () Operators Implicit(CefBrowserSettings to IntPtr) Declaration public static implicit operator IntPtr(CefBrowserSettings settings) Parameters Type Name Description CefBrowserSettings settings Returns Type Description System.IntPtr Implements IMarshalableStruct System.IDisposable"
  },
  "api/IronPdf.Engines.Chrome.CefRenderSettings.html": {
    "href": "api/IronPdf.Engines.Chrome.CefRenderSettings.html",
    "title": "Class CefRenderSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CefRenderSettings Inheritance System.Object CefRenderSettings Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public class CefRenderSettings : Object Constructors CefRenderSettings() Declaration public CefRenderSettings() Properties ApplyMarginToHeaderAndFooter Declaration public bool ApplyMarginToHeaderAndFooter { get; set; } Property Value Type Description System.Boolean AutoSizeScreenToPaper Declaration public bool AutoSizeScreenToPaper { get; set; } Property Value Type Description System.Boolean AutoSizeScreenToPaperPPI Declaration public int AutoSizeScreenToPaperPPI { get; set; } Property Value Type Description System.Int32 EnableBackgrounds Declaration public bool EnableBackgrounds { get; set; } Property Value Type Description System.Boolean EnableEmulateScreenMediaType Enable emulation of \"screen\" css media type Declaration public bool EnableEmulateScreenMediaType { get; set; } Property Value Type Description System.Boolean EnableFormGeneration Declaration public bool EnableFormGeneration { get; set; } Property Value Type Description System.Boolean EnableLandscapeOrientation Enable landscape orientation Declaration public bool EnableLandscapeOrientation { get; set; } Property Value Type Description System.Boolean FirstPageNumber Declaration public int FirstPageNumber { get; set; } Property Value Type Description System.Int32 FooterHtml Declaration public string FooterHtml { get; set; } Property Value Type Description System.String HeaderHtml Declaration public string HeaderHtml { get; set; } Property Value Type Description System.String MaxFooterHeight Max footer height in pixels Declaration public int MaxFooterHeight { get; set; } Property Value Type Description System.Int32 MaxHeaderHeight Max header height in pixels Declaration public int MaxHeaderHeight { get; set; } Property Value Type Description System.Int32 PageHeight Declaration public double PageHeight { get; set; } Property Value Type Description System.Double PageMarginBottom Declaration public double PageMarginBottom { get; set; } Property Value Type Description System.Double PageMarginLeft Declaration public double PageMarginLeft { get; set; } Property Value Type Description System.Double PageMarginRight Declaration public double PageMarginRight { get; set; } Property Value Type Description System.Double PageMarginTop Declaration public double PageMarginTop { get; set; } Property Value Type Description System.Double PageMarginType Declaration public int PageMarginType { get; set; } Property Value Type Description System.Int32 PageSizeType Declaration public string PageSizeType { get; set; } Property Value Type Description System.String PageWidth Declaration public double PageWidth { get; set; } Property Value Type Description System.Double PostProcessingJavascript Declaration public string PostProcessingJavascript { get; set; } Property Value Type Description System.String RenderDelay Declaration public int RenderDelay { get; set; } Property Value Type Description System.Int32 SavePath Declaration public string SavePath { get; set; } Property Value Type Description System.String Scale Declaration public int Scale { get; set; } Property Value Type Description System.Int32 Timeout Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods DeletePointer() Declaration public void DeletePointer() Dispose() Declaration public void Dispose() Finalize() Declaration protected override void Finalize() GetPointer() Declaration public IntPtr GetPointer() Returns Type Description System.IntPtr TranslateMarginType(String) Translate a margin type string into an enum value Declaration public static int TranslateMarginType(string type) Parameters Type Name Description System.String type Margin type string Returns Type Description System.Int32 Equivalent enum value Operators Implicit(CefRenderSettings to IntPtr) Declaration public static implicit operator IntPtr(CefRenderSettings settings) Parameters Type Name Description CefRenderSettings settings Returns Type Description System.IntPtr"
  },
  "api/IronPdf.Engines.Chrome.ChromeGpuModes.html": {
    "href": "api/IronPdf.Engines.Chrome.ChromeGpuModes.html",
    "title": "Class ChromeGpuModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromeGpuModes Inheritance System.Object ChromeGpuModes Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public sealed class ChromeGpuModes : Enum Fields Disabled Declaration public const ChromeGpuModes Disabled Field Value Type Description ChromeGpuModes Hardware Declaration public const ChromeGpuModes Hardware Field Value Type Description ChromeGpuModes HardwareFull Declaration public const ChromeGpuModes HardwareFull Field Value Type Description ChromeGpuModes Software Declaration public const ChromeGpuModes Software Field Value Type Description ChromeGpuModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Chrome.html": {
    "href": "api/IronPdf.Engines.Chrome.html",
    "title": "Namespace IronPdf.Engines.Chrome | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Engines.Chrome Classes CefBrowserSettings CefRenderSettings ChromeGpuModes InteropLogEvent"
  },
  "api/IronPdf.Engines.Chrome.InteropLogEvent.html": {
    "href": "api/IronPdf.Engines.Chrome.InteropLogEvent.html",
    "title": "Class InteropLogEvent | C# PDF Library Documentation | IronPDF",
    "keywords": "Class InteropLogEvent Inheritance System.Object InteropLogEvent Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public sealed class InteropLogEvent : MulticastDelegate Constructors InteropLogEvent(Object, IntPtr) Declaration public InteropLogEvent(object object, IntPtr method) Parameters Type Name Description System.Object object System.IntPtr method Methods BeginInvoke(String, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(string text, AsyncCallback callback, object object) Parameters Type Name Description System.String text System.AsyncCallback callback System.Object object Returns Type Description System.IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description System.IAsyncResult result Invoke(String) Declaration public virtual void Invoke(string text) Parameters Type Name Description System.String text"
  },
  "api/IronPdf.Engines.html": {
    "href": "api/IronPdf.Engines.html",
    "title": "Namespace IronPdf.Engines | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Engines Interfaces IMarshalableStruct"
  },
  "api/IronPdf.Engines.IMarshalableStruct.html": {
    "href": "api/IronPdf.Engines.IMarshalableStruct.html",
    "title": "Interface IMarshalableStruct | C# PDF Library Documentation | IronPDF",
    "keywords": "Interface IMarshalableStruct Namespace : IronPdf.Engines Assembly : IronPdf.dll Syntax public interface IMarshalableStruct Methods () Declaration IntPtr () Returns Type Description System.IntPtr () Declaration void ()"
  },
  "api/IronPdf.Engines.Pdfium.BitmapRenderOptions.html": {
    "href": "api/IronPdf.Engines.Pdfium.BitmapRenderOptions.html",
    "title": "Class BitmapRenderOptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BitmapRenderOptions Inheritance System.Object BitmapRenderOptions Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class BitmapRenderOptions : Enum Fields DisableCatch_OBSOLETE Declaration public const BitmapRenderOptions DisableCatch_OBSOLETE Field Value Type Description BitmapRenderOptions DisableImageAntialiasing Declaration public const BitmapRenderOptions DisableImageAntialiasing Field Value Type Description BitmapRenderOptions DisableNativeText Declaration public const BitmapRenderOptions DisableNativeText Field Value Type Description BitmapRenderOptions DisablePathAntialiasing Declaration public const BitmapRenderOptions DisablePathAntialiasing Field Value Type Description BitmapRenderOptions DisableTextAntialiasing Declaration public const BitmapRenderOptions DisableTextAntialiasing Field Value Type Description BitmapRenderOptions EnableDebugInfo_OBSOLETE Declaration public const BitmapRenderOptions EnableDebugInfo_OBSOLETE Field Value Type Description BitmapRenderOptions ForceHalftoneImageStretching Declaration public const BitmapRenderOptions ForceHalftoneImageStretching Field Value Type Description BitmapRenderOptions Grayscale Declaration public const BitmapRenderOptions Grayscale Field Value Type Description BitmapRenderOptions LimitCacheSize Declaration public const BitmapRenderOptions LimitCacheSize Field Value Type Description BitmapRenderOptions None Declaration public const BitmapRenderOptions None Field Value Type Description BitmapRenderOptions OptimizeTextForLcd Declaration public const BitmapRenderOptions OptimizeTextForLcd Field Value Type Description BitmapRenderOptions RenderForPrinting Declaration public const BitmapRenderOptions RenderForPrinting Field Value Type Description BitmapRenderOptions ReverseByteOrder Declaration public const BitmapRenderOptions ReverseByteOrder Field Value Type Description BitmapRenderOptions ShowAnnotations Declaration public const BitmapRenderOptions ShowAnnotations Field Value Type Description BitmapRenderOptions StrokeFillPaths Declaration public const BitmapRenderOptions StrokeFillPaths Field Value Type Description BitmapRenderOptions value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.html": {
    "href": "api/IronPdf.Engines.Pdfium.html",
    "title": "Namespace IronPdf.Engines.Pdfium | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Engines.Pdfium Classes BitmapRenderOptions PdfDocumentPermissions PdfFlattenResults PdfFlattenStyles PdfFormFieldFlags PdfImageExtractionOptions PdfTextVariableInserter RenderRotations"
  },
  "api/IronPdf.Engines.Pdfium.PdfDocumentPermissions.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfDocumentPermissions.html",
    "title": "Class PdfDocumentPermissions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocumentPermissions Inheritance System.Object PdfDocumentPermissions Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfDocumentPermissions : Enum Fields AllowAccessibilityExtractContent Declaration public const PdfDocumentPermissions AllowAccessibilityExtractContent Field Value Type Description PdfDocumentPermissions AllowAll Declaration public const PdfDocumentPermissions AllowAll Field Value Type Description PdfDocumentPermissions AllowAnnotations Declaration public const PdfDocumentPermissions AllowAnnotations Field Value Type Description PdfDocumentPermissions AllowAssembleDocument Declaration public const PdfDocumentPermissions AllowAssembleDocument Field Value Type Description PdfDocumentPermissions AllowExtractContent Declaration public const PdfDocumentPermissions AllowExtractContent Field Value Type Description PdfDocumentPermissions AllowFillForms Declaration public const PdfDocumentPermissions AllowFillForms Field Value Type Description PdfDocumentPermissions AllowModify Declaration public const PdfDocumentPermissions AllowModify Field Value Type Description PdfDocumentPermissions AllowPrint Declaration public const PdfDocumentPermissions AllowPrint Field Value Type Description PdfDocumentPermissions AllowPrintFullQuality Declaration public const PdfDocumentPermissions AllowPrintFullQuality Field Value Type Description PdfDocumentPermissions None Declaration public const PdfDocumentPermissions None Field Value Type Description PdfDocumentPermissions value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFlattenResults.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFlattenResults.html",
    "title": "Class PdfFlattenResults | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFlattenResults Inheritance System.Object PdfFlattenResults Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFlattenResults : Enum Fields Failed Declaration public const PdfFlattenResults Failed Field Value Type Description PdfFlattenResults NoChange Declaration public const PdfFlattenResults NoChange Field Value Type Description PdfFlattenResults Successful Declaration public const PdfFlattenResults Successful Field Value Type Description PdfFlattenResults value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFlattenStyles.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFlattenStyles.html",
    "title": "Class PdfFlattenStyles | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFlattenStyles Inheritance System.Object PdfFlattenStyles Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFlattenStyles : Enum Fields Normal Declaration public const PdfFlattenStyles Normal Field Value Type Description PdfFlattenStyles Print Declaration public const PdfFlattenStyles Print Field Value Type Description PdfFlattenStyles value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFormFieldFlags.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFormFieldFlags.html",
    "title": "Class PdfFormFieldFlags | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFormFieldFlags Inheritance System.Object PdfFormFieldFlags Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFormFieldFlags : Enum Fields NoExport Declaration public const PdfFormFieldFlags NoExport Field Value Type Description PdfFormFieldFlags None Declaration public const PdfFormFieldFlags None Field Value Type Description PdfFormFieldFlags ReadOnly Declaration public const PdfFormFieldFlags ReadOnly Field Value Type Description PdfFormFieldFlags Required Declaration public const PdfFormFieldFlags Required Field Value Type Description PdfFormFieldFlags value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfImageExtractionOptions.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfImageExtractionOptions.html",
    "title": "Class PdfImageExtractionOptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfImageExtractionOptions Inheritance System.Object PdfImageExtractionOptions Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfImageExtractionOptions : Enum Fields GetBitmap Declaration public const PdfImageExtractionOptions GetBitmap Field Value Type Description PdfImageExtractionOptions GetRenderedBitmap Declaration public const PdfImageExtractionOptions GetRenderedBitmap Field Value Type Description PdfImageExtractionOptions value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfTextVariableInserter.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfTextVariableInserter.html",
    "title": "Class PdfTextVariableInserter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfTextVariableInserter Inheritance System.Object PdfTextVariableInserter Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public static class PdfTextVariableInserter : Object Methods ReplacePdfVariableText(String, Int32, ChromePdfRenderOptions, Int32) Declaration public static string ReplacePdfVariableText(this string text, int id, ChromePdfRenderOptions options, int page_index) Parameters Type Name Description System.String text System.Int32 id ChromePdfRenderOptions options System.Int32 page_index Returns Type Description System.String"
  },
  "api/IronPdf.Engines.Pdfium.RenderRotations.html": {
    "href": "api/IronPdf.Engines.Pdfium.RenderRotations.html",
    "title": "Class RenderRotations | C# PDF Library Documentation | IronPDF",
    "keywords": "Class RenderRotations Inheritance System.Object RenderRotations Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class RenderRotations : Enum Fields Clockwise180 Declaration public const RenderRotations Clockwise180 Field Value Type Description RenderRotations Clockwise270 Declaration public const RenderRotations Clockwise270 Field Value Type Description RenderRotations Clockwise90 Declaration public const RenderRotations Clockwise90 Field Value Type Description RenderRotations None Declaration public const RenderRotations None Field Value Type Description RenderRotations value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Exceptions.html": {
    "href": "api/IronPdf.Exceptions.html",
    "title": "Namespace IronPdf.Exceptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Exceptions Classes IronPdfAssemblyVersionMismatchException Represents errors that occur while loading assemblies during IronPdf deployment. IronPdfDeploymentException Represents errors that occur during IronPDF Asset deployment. IronPdfInputException Represents errors that occur when inv;laid variables are passed to IronPDF. IronPdfLicensingException Represents errors that occur during IronPDF execution due to the library not being appropriately licensed. https://ironpdf.com/licensing/ IronPdfNativeException Represents errors that occur during IronPDF Asset deployment. IronPdfProductException Represents errors that occur during IronPDF execution."
  },
  "api/IronPdf.Exceptions.IronPdfAssemblyVersionMismatchException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfAssemblyVersionMismatchException.html",
    "title": "Class IronPdfAssemblyVersionMismatchException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfAssemblyVersionMismatchException Represents errors that occur while loading assemblies during IronPdf deployment. Inheritance System.Object IronPdfAssemblyVersionMismatchException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfAssemblyVersionMismatchException : Exception Constructors IronPdfAssemblyVersionMismatchException(String, Version, Version, BaseVersionFactory) Declaration public IronPdfAssemblyVersionMismatchException(string name, Version actual, Version expected, BaseVersionFactory version_factory) Parameters Type Name Description System.String name System.Version actual System.Version expected BaseVersionFactory version_factory Properties Message Declaration public override string Message { get; } Property Value Type Description System.String"
  },
  "api/IronPdf.Exceptions.IronPdfDeploymentException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfDeploymentException.html",
    "title": "Class IronPdfDeploymentException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfDeploymentException Represents errors that occur during IronPDF Asset deployment. Inheritance System.Object IronPdfDeploymentException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfDeploymentException : Exception Constructors IronPdfDeploymentException() Initializes a new instance of the IronPdfDeploymentException class. Declaration public IronPdfDeploymentException() IronPdfDeploymentException(String) Initializes a new instance of the IronPdfDeploymentException class with a specified error message. Declaration public IronPdfDeploymentException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfDeploymentException(String, Exception) Initializes a new instance of the IronPdfDeploymentException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfDeploymentException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Exceptions.IronPdfInputException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfInputException.html",
    "title": "Class IronPdfInputException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfInputException Represents errors that occur when inv;laid variables are passed to IronPDF. Inheritance System.Object IronPdfInputException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfInputException : Exception Constructors IronPdfInputException() Initializes a new instance of the IronPdfInputException class. Declaration public IronPdfInputException() IronPdfInputException(String) Initializes a new instance of the IronPdfInputException class with a specified error message. Declaration public IronPdfInputException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfInputException(String, Exception) Initializes a new instance of the IronPdfInputException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfInputException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Exceptions.IronPdfLicensingException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfLicensingException.html",
    "title": "Class IronPdfLicensingException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfLicensingException Represents errors that occur during IronPDF execution due to the library not being appropriately licensed. https://ironpdf.com/licensing/ Inheritance System.Object IronPdfProductException IronPdfLicensingException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfLicensingException : IronPdfProductException Constructors IronPdfLicensingException() Initializes a new instance of the IronPdfLicensingException class. Declaration public IronPdfLicensingException() IronPdfLicensingException(String) Initializes a new instance of the IronPdfLicensingException class with a specified error message. Declaration public IronPdfLicensingException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfLicensingException(String, Exception) Initializes a new instance of the IronPdfLicensingException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfLicensingException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified. Properties stackTrace Declaration public byte[] stackTrace { get; } Property Value Type Description System.Byte [] StackTrace Declaration public override string StackTrace { get; } Property Value Type Description System.String TargetSite Declaration public string TargetSite { get; } Property Value Type Description System.String Methods Throw(String) Declaration public static void Throw(string message) Parameters Type Name Description System.String message"
  },
  "api/IronPdf.Exceptions.IronPdfNativeException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfNativeException.html",
    "title": "Class IronPdfNativeException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfNativeException Represents errors that occur during IronPDF Asset deployment. Inheritance System.Object IronPdfNativeException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfNativeException : Exception Constructors IronPdfNativeException() Initializes a new instance of the IronPdfNativeException class. Declaration public IronPdfNativeException() IronPdfNativeException(String) Initializes a new instance of the IronPdfNativeException class with a specified error message. Declaration public IronPdfNativeException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfNativeException(String, Exception) Initializes a new instance of the IronPdfNativeException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfNativeException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Exceptions.IronPdfProductException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfProductException.html",
    "title": "Class IronPdfProductException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfProductException Represents errors that occur during IronPDF execution. Inheritance System.Object IronPdfProductException IronPdfLicensingException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfProductException : Exception Constructors IronPdfProductException() Initializes a new instance of the IronPdfProductException class. Declaration public IronPdfProductException() IronPdfProductException(String) Initializes a new instance of the IronPdfProductException class with a specified error message. Declaration public IronPdfProductException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfProductException(String, Exception) Initializes a new instance of the IronPdfProductException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfProductException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Forms.CheckBoxField.html": {
    "href": "api/IronPdf.Forms.CheckBoxField.html",
    "title": "Class CheckBoxField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CheckBoxField Represents a check-box in a PDF form. Inheritance System.Object FormField CheckBoxField Inherited Members FormField.pdfiumDocumentId FormField.SetFont(FontTypes, Double) FormField.ToString() FormField.Name FormField.ReadOnly FormField.Value Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class CheckBoxField : FormField Constructors CheckBoxField(Int32, String) Declaration public CheckBoxField(int id, string name) Parameters Type Name Description System.Int32 id System.String name Properties BooleanValue Gets or sets a value indicating whether the check-box is checked (ticked). Declaration public bool BooleanValue { get; set; } Property Value Type Description System.Boolean true if checked; otherwise, false . Inherited members pdfiumDocumentId SetFont(FontTypes, Double) ToString() Name ReadOnly Value See Also FormField"
  },
  "api/IronPdf.Forms.ComboBoxField.html": {
    "href": "api/IronPdf.Forms.ComboBoxField.html",
    "title": "Class ComboBoxField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ComboBoxField Represents a combo-box (drop down menu) in a PDF form. Inheritance System.Object FormField ComboBoxField Inherited Members FormField.pdfiumDocumentId FormField.SetFont(FontTypes, Double) FormField.ToString() FormField.Name FormField.ReadOnly FormField.Value Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class ComboBoxField : FormField Constructors ComboBoxField(Int32, String) Declaration public ComboBoxField(int id, string name) Parameters Type Name Description System.Int32 id System.String name Properties Options Gets the available options for the combo-box in zero based index order. Declaration public string[] Options { get; } Property Value Type Description System.String [] The option names as strings. SelectedIndex Gets the index of the selected option. Declaration public int SelectedIndex { get; } Property Value Type Description System.Int32 The index of the selected. 0 based. Inherited members pdfiumDocumentId SetFont(FontTypes, Double) ToString() Name ReadOnly Value See Also FormField"
  },
  "api/IronPdf.Forms.Enums.FontTypes.html": {
    "href": "api/IronPdf.Forms.Enums.FontTypes.html",
    "title": "Class FontTypes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FontTypes Enum that represents the list of available fonts for text fields. Inheritance System.Object FontTypes Namespace : IronPdf.Forms.Enums Assembly : IronPdf.dll Syntax public sealed class FontTypes : Enum Fields Courier Declaration public const FontTypes Courier Field Value Type Description FontTypes CourierBold Declaration public const FontTypes CourierBold Field Value Type Description FontTypes CourierBoldOblique Declaration public const FontTypes CourierBoldOblique Field Value Type Description FontTypes CourierOblique Declaration public const FontTypes CourierOblique Field Value Type Description FontTypes Helvetica Declaration public const FontTypes Helvetica Field Value Type Description FontTypes HelveticaBold Declaration public const FontTypes HelveticaBold Field Value Type Description FontTypes HelveticaBoldOblique Declaration public const FontTypes HelveticaBoldOblique Field Value Type Description FontTypes HelveticaOblique Declaration public const FontTypes HelveticaOblique Field Value Type Description FontTypes Symbol Declaration public const FontTypes Symbol Field Value Type Description FontTypes TimesBold Declaration public const FontTypes TimesBold Field Value Type Description FontTypes TimesBoldItalic Declaration public const FontTypes TimesBoldItalic Field Value Type Description FontTypes TimesItalic Declaration public const FontTypes TimesItalic Field Value Type Description FontTypes TimesRoman Declaration public const FontTypes TimesRoman Field Value Type Description FontTypes value__ Declaration public int value__ Field Value Type Description System.Int32 ZapfDingbats Declaration public const FontTypes ZapfDingbats Field Value Type Description FontTypes"
  },
  "api/IronPdf.Forms.Enums.html": {
    "href": "api/IronPdf.Forms.Enums.html",
    "title": "Namespace IronPdf.Forms.Enums | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Forms.Enums Classes FontTypes Enum that represents the list of available fonts for text fields."
  },
  "api/IronPdf.Forms.FormField.html": {
    "href": "api/IronPdf.Forms.FormField.html",
    "title": "Class FormField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FormField Generic base class from which all PDF Form fields are derived. Inheritance System.Object FormField CheckBoxField ComboBoxField TextField Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class FormField : Object Fields pdfiumDocumentId Declaration protected int pdfiumDocumentId Field Value Type Description System.Int32 Properties Name Gets the ID name of this field. Declaration public string Name { get; } Property Value Type Description System.String The name as a string. See Also GetFieldByName(String) ReadOnly Gets or sets the permissions for users to fill-in current form field. Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean true if form field is readonly, otherwise false . Value Gets the value of the editable PDF field. Declaration public string Value { get; set; } Property Value Type Description System.String The value. Methods SetFont(FontTypes, Double) Sets the font to the text field of pdf form. Declaration public virtual void SetFont(FontTypes fontType, double fontSize = 11) Parameters Type Name Description FontTypes fontType Type of the font. System.Double fontSize Size of the font. ToString() Returns the value of this field. Declaration public override string ToString() Returns Type Description System.String The value of this field."
  },
  "api/IronPdf.Forms.html": {
    "href": "api/IronPdf.Forms.html",
    "title": "Namespace IronPdf.Forms | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Forms Classes CheckBoxField Represents a check-box in a PDF form. ComboBoxField Represents a combo-box (drop down menu) in a PDF form. FormField Generic base class from which all PDF Form fields are derived. PdfForm PdfForm class represents a collection of the user-editable form fields within a PDD document. TextField Represents an editable text input field in a PDF document."
  },
  "api/IronPdf.Forms.PdfForm.html": {
    "href": "api/IronPdf.Forms.PdfForm.html",
    "title": "Class PdfForm | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfForm PdfForm class represents a collection of the user-editable form fields within a PDD document. Inheritance System.Object PdfForm Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class PdfForm : Object Fields Fields The editable fields within this PDF. Declaration public readonly FormField[] Fields Field Value Type Description FormField [] See Also Form Properties FieldNames Returns the field name of every editable data field in the PDF. Declaration public string[] FieldNames { get; } Property Value Type Description System.String [] The field names as an array of strings. Methods GetFieldByName(String) Returns a FormField by its name. This method is fault tolerant and will attempt to match case mistakes and partial field names. Declaration public FormField GetFieldByName(string FieldName) Parameters Type Name Description System.String FieldName The name of the field to be edited. This is analogous to the HTML input 'name' attribute when creating a PDF with forms from HTML using IronPDF. Returns Type Description FormField A FormField object RenameField(String, String) Rename a FormField Declaration public void RenameField(string CurrentFieldName, string NewFieldName) Parameters Type Name Description System.String CurrentFieldName Current field name System.String NewFieldName New field name"
  },
  "api/IronPdf.Forms.TextField.html": {
    "href": "api/IronPdf.Forms.TextField.html",
    "title": "Class TextField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextField Represents an editable text input field in a PDF document. Inheritance System.Object FormField TextField Inherited Members FormField.pdfiumDocumentId FormField.ToString() FormField.Name FormField.ReadOnly FormField.Value Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class TextField : FormField Constructors TextField(Int32, String) Declaration public TextField(int id, string name) Parameters Type Name Description System.Int32 id System.String name Methods SetFont(FontTypes, Double) Sets the font to the text field of pdf form. Declaration public override void SetFont(FontTypes fontType, double fontSize = 11) Parameters Type Name Description FontTypes fontType Type of the font. System.Double fontSize Size of the font. Overrides FormField.SetFont(FontTypes, Double) Inherited members pdfiumDocumentId ToString() Name ReadOnly Value See Also FormField"
  },
  "api/IronPdf.html": {
    "href": "api/IronPdf.html",
    "title": "Namespace IronPdf | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf Classes ChromeHttpLoginCredentials Provides credentials for IronPdf's embedded Chrome browser to log-in to an intranet, extranet or website, impersonating a user. This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites. ChromePdfRenderer IronPdf.ChromePdfRenderer allows any web page or Html 'snippet' to be turned into a PDF document using an up-to-date embedded Chrome browser. As of 2021 Iron Software recommend ChromePdfRenderer as our best PDF Renderer and a drop-in replacement for this class. ChromePdfRenderOptions Html To PDF output options for ChromePdfRenderer . Specifies options such as Paper-Size, DPI, Headers and Footers and other Chromium specific browser setup options. ImageToPdfConverter The ImageToPdfConveter class can be used to create PDF documents from images. It accepts both image files and System.Drawing.Image objects as input. The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF. To rasterize PDF documents as images (the reverse operation), see ToBitmap(Int32) and RasterizeToImageFiles(String, ImageType, Int32) Installation Global installation and setup preferences for all instances of IronPDF License Allows IronPdf license keys to be applied globally across an application. PdfDocument TextHeaderFooter Defines PDF Header and Footer display options. TextHeaderFooter uses a logial apporach to rendering Headers and Footers for the most common use cases."
  },
  "api/IronPdf.ImageToPdfConverter.html": {
    "href": "api/IronPdf.ImageToPdfConverter.html",
    "title": "Class ImageToPdfConverter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageToPdfConverter The ImageToPdfConveter class can be used to create PDF documents from images. It accepts both image files and System.Drawing.Image objects as input. The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF. To rasterize PDF documents as images (the reverse operation), see ToBitmap(Int32) and RasterizeToImageFiles(String, ImageType, Int32) Inheritance System.Object ImageToPdfConverter Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class ImageToPdfConverter : Object Properties PaperSize Declaration public static PdfPaperSize PaperSize { get; set; } Property Value Type Description PdfPaperSize Methods ImageToPdf(IEnumerable<Image>, ImageBehavior) Converts multiple System.Drawing.Image objects or Bitmaps into a PDF document. Each image creates 1 page which matches the image dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(IEnumerable<Image> images, ImageBehavior behavior) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Drawing.Image > images The image objects. Requires a project reference to the System.Drawing Assembly. ImageBehavior behavior Describes how image should be placed on the PDF page Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException ImageToPdf(IEnumerable<String>, ImageBehavior) Converts multiple image files to a PDF document. Each image creates 1 page which matches the image dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(IEnumerable<string> imageFileNames, ImageBehavior behavior) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > imageFileNames The image file path names. ImageBehavior behavior Describes how image should be placed on the PDF page Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException ImageToPdf(Image, ImageBehavior) Converts a single System.Drawing.Image object or Bitmap to a PDF document of matching dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(Image image, ImageBehavior behavior) Parameters Type Name Description System.Drawing.Image image The image object. Requires a project reference to the System.Drawing Assembly. ImageBehavior behavior Describes how image should be placed on the PDF page Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException ImageToPdf(String, ImageBehavior) Converts a single image file to an identical PDF document of matching dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(string imageFileName, ImageBehavior behavior) Parameters Type Name Description System.String imageFileName File path of the image file. ImageBehavior behavior Describes how image should be placed on the PDF page Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException"
  },
  "api/IronPdf.Imaging.html": {
    "href": "api/IronPdf.Imaging.html",
    "title": "Namespace IronPdf.Imaging | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Imaging Classes ImageBehavior ImageType An Image File Type Enumeration used to select image file formats when converting PDF documents to images. Also see: RasterizeToImageFiles(String, ImageType, Int32) ImageUtilities Useful methods for working with images in PDF files."
  },
  "api/IronPdf.Imaging.ImageBehavior.html": {
    "href": "api/IronPdf.Imaging.ImageBehavior.html",
    "title": "Class ImageBehavior | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageBehavior Inheritance System.Object ImageBehavior Namespace : IronPdf.Imaging Assembly : IronPdf.dll Syntax public sealed class ImageBehavior : Enum Fields BottomLeftCornerOfPage Image should be placed to the left bottom corner of the page Declaration public const ImageBehavior BottomLeftCornerOfPage Field Value Type Description ImageBehavior BottomRightCornerOfPage Image should be placed to the right bottom corner of the page Declaration public const ImageBehavior BottomRightCornerOfPage Field Value Type Description ImageBehavior CenteredOnPage Image should be placed on center of the page Declaration public const ImageBehavior CenteredOnPage Field Value Type Description ImageBehavior CropPage Page should fit to the image Declaration public const ImageBehavior CropPage Field Value Type Description ImageBehavior FitToPage Image should fit to the page Declaration public const ImageBehavior FitToPage Field Value Type Description ImageBehavior FitToPageAndMaintainAspectRatio Image should fit to the page and keep aspect ratio Declaration public const ImageBehavior FitToPageAndMaintainAspectRatio Field Value Type Description ImageBehavior TopLeftCornerOfPage Image should be placed to the left top corner of the page Declaration public const ImageBehavior TopLeftCornerOfPage Field Value Type Description ImageBehavior TopRightCornerOfPage Image should be placed to the right top corner of the page Declaration public const ImageBehavior TopRightCornerOfPage Field Value Type Description ImageBehavior value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Imaging.ImageType.html": {
    "href": "api/IronPdf.Imaging.ImageType.html",
    "title": "Class ImageType | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageType An Image File Type Enumeration used to select image file formats when converting PDF documents to images. Also see: RasterizeToImageFiles(String, ImageType, Int32) Inheritance System.Object ImageType Namespace : IronPdf.Imaging Assembly : IronPdf.dll Syntax public sealed class ImageType : Enum Fields Bitmap PDF pages will be rendered to windows Bitmap image files. Declaration public const ImageType Bitmap Field Value Type Description ImageType Default Default file type. WIll save images in a Bitmap file type unless a file pattern ends in an image file format such as .png or .jpeg Declaration public const ImageType Default Field Value Type Description ImageType Gif PDF pages will be rendered to non-animated GIF image files. The GIF Declaration public const ImageType Gif Field Value Type Description ImageType Jpeg PDF pages will be rendered to JPEG image files. Declaration public const ImageType Jpeg Field Value Type Description ImageType MultiPageTiff Every page of the PDF will be compiled into a single multi-page TIFF image file (aka. multi-frame TIFF). Declaration public const ImageType MultiPageTiff Field Value Type Description ImageType Png PDF pages will be rendered to PNG (Portable Network Graphics) image files. Declaration public const ImageType Png Field Value Type Description ImageType Tiff PDF pages will be rendered to TIFF image files. Declaration public const ImageType Tiff Field Value Type Description ImageType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Imaging.ImageUtilities.html": {
    "href": "api/IronPdf.Imaging.ImageUtilities.html",
    "title": "Class ImageUtilities | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageUtilities Useful methods for working with images in PDF files. Inheritance System.Object ImageUtilities Namespace : IronPdf.Imaging Assembly : IronPdf.dll Syntax public static class ImageUtilities : Object Methods ImageToDataUri(Image, Boolean) Turns a System.Drawing.Image or System.Drawing.Bitmap into a DataUri which can used to embed the Image directly into an HTML document. Read standard https://en.wikipedia.org/wiki/Data_URI_scheme Declaration public static string ImageToDataUri(Image Image, bool Rasterize = false) Parameters Type Name Description System.Drawing.Image Image A non-null System.Drawing.Image or System.Drawing.Bitmap System.Boolean Rasterize Optional flag to flatten the image to raw pixels to increase compatibility with HTML (may affect PDF file size and rendering time) Returns Type Description System.String A data URL which can be used as the src attribute of an HTML <img tag"
  },
  "api/IronPdf.Installation.html": {
    "href": "api/IronPdf.Installation.html",
    "title": "Class Installation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Installation Global installation and setup preferences for all instances of IronPDF Inheritance System.Object Installation Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class Installation : Object Fields LinuxAndDockerDependenciesAutoConfig If true The necessary package dependencies for IronPDf rendering will we automatically installed to Docker and Debian / Ubuntu Linux deployments. Applies only to IronPDF for .Net Core. This will take a few minutes the next time you run IronPDF. Watch the Visual Studio \"Output\" window for progress. Set this to false if manual Docker / Linux setup is more convenient: https://ironpdf.com/docs/questions/docker-linux/ Declaration public static bool LinuxAndDockerDependenciesAutoConfig Field Value Type Description System.Boolean SendAnonymousAnalyticsAndCrashData Opt in or out of sending anonymous usage statistics about IronPdf usage and performance to help us improve the product and developer experience. Usage statistics are never sent in commercially deployed projects (when a license key is applied), only during development usage. Declaration public static bool SendAnonymousAnalyticsAndCrashData Field Value Type Description System.Boolean Properties ChromeBrowserLimit Maximum number of concurrent browsers when using the Chrome renderer Declaration public static int ChromeBrowserLimit { get; set; } Property Value Type Description System.Int32 ChromeGpuMode Chrome renderer GPU compatibility mode. In special environment like Docker or Cloud Service please use ChromeGpuModes.Disabled Declaration public static ChromeGpuModes ChromeGpuMode { get; set; } Property Value Type Description ChromeGpuModes CleanupOnProcessExit Cleanup resources automatically when process exits or domain unloads Declaration public static bool CleanupOnProcessExit { get; set; } Property Value Type Description System.Boolean CustomDeploymentDirectory Custom deployment directory for renderer native binaries. Declaration public static string CustomDeploymentDirectory { get; set; } Property Value Type Description System.String SkipInitialization Set to True to skip certain initialization routines, e.g. Cef initialization Declaration public static bool SkipInitialization { get; set; } Property Value Type Description System.Boolean Remarks Useful for certain environments which have persistence, e.g. IIS or web apps TempFolderPath The temporary folder path which temporary files and rendering engine DLLs will be deployed to where necessary. The default location is the system temp folder which is appropriate for most use cases. Declaration public static string TempFolderPath { get; set; } Property Value Type Description System.String Exceptions Type Condition System.ArgumentException value is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars . -or- The system could not retrieve the absolute path. System.Security.SecurityException The caller does not have the required permissions. System.ArgumentNullException value is null . System.NotSupportedException value contains a colon (\":\") that is not part of a volume identifier (for example, \"c:&quot;). System.IO.PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. IronPdfProductException The property TempFolderPath is already initialized. Methods Cleanup() Shutdown and clean-up rendering resources used by IronPdf. Prevents further renders from completing on this process Declaration public static void Cleanup() CleanupTempImages(Nullable<TimeSpan>) Method to remove temporary images from TempFolderPath If you used a custom TempFolderPath then set TempFolderPath to point towards your deployment directory before you call this cleanup method. Declaration public static void CleanupTempImages(Nullable<TimeSpan> expirationTime = null) Parameters Type Name Description System.Nullable < System.TimeSpan > expirationTime Time from last access for files to delete. All files are deleted by default. Initialize() Initializes IronPDF rendering engines immediately to avoid startup time on your first render. Declaration public static void Initialize()"
  },
  "api/IronPdf.License.html": {
    "href": "api/IronPdf.License.html",
    "title": "Class License | C# PDF Library Documentation | IronPDF",
    "keywords": "Class License Allows IronPdf license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class License : Object Fields LicenseKey Removes watermarks. Get Licensed at https://ironpdf.com/licensing For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronPdf.LicenseKey\" value=\"IRONPDF-LICENSE-KEY\"/> within the appSettings tag. See https://ironpdf.com/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronPdf.LicenseKey\" and the value is a valid IronPDF trial or full license key. See https://ironpdf.com/licensing/ for licensing options. Declaration public static string LicenseKey Field Value Type Description System.String Properties IsLicensed Determines whether this instance of IronPDF is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in IronPdf.License.LicenseKey, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironpdf.com/licensing/ and https://ironpdf.com/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean True if the license key given is valid. Methods IsValidLicense(String) Determines whether a string license key is valid. See https://ironpdf.com/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string LicenseKey) Parameters Type Name Description System.String LicenseKey IronPDF license key as a string Returns Type Description System.Boolean True if the license key given is valid."
  },
  "api/IronPdf.Logging.html": {
    "href": "api/IronPdf.Logging.html",
    "title": "Namespace IronPdf.Logging | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Logging Classes Logger Provides functionality for developers to view debug logs and export log files from IronPdf. Logger.LoggingModes Different Ways to log developer notices and warnings"
  },
  "api/IronPdf.Logging.Logger.html": {
    "href": "api/IronPdf.Logging.Logger.html",
    "title": "Class Logger | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger Provides functionality for developers to view debug logs and export log files from IronPdf. Inheritance System.Object Logger Namespace : IronPdf.Logging Assembly : IronPdf.dll Syntax public static class Logger : Object Properties CustomLogger Declaration public static ILogger CustomLogger { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger EnableDebugging Declaration public static bool EnableDebugging { get; set; } Property Value Type Description System.Boolean LogFilePath Setting a log path produces ‘log files’ which may be vey useful for debugging in production or providing to Iron Software support when reporting an issue. LogFilePath may be set to a directory name or a full file name. Setting LogFilePath = null will turn off log files. Declaration public static string LogFilePath { get; set; } Property Value Type Description System.String See Also ClearLogFiles() LoggingMode Activate or disable detailed developer messages sent to your choice of location in the IDE or application console. Declaration public static Logger.LoggingModes LoggingMode { get; set; } Property Value Type Description Logger.LoggingModes Methods ClearLogFiles() Removes any Iron Software log files at the LogFilePath . Declaration public static void ClearLogFiles() See Also LogFilePath Events MessageLogged Event handler to intercept logged messages. Declaration public static event Action<string> MessageLogged Event Type Type Description System.Action < System.String >"
  },
  "api/IronPdf.Logging.Logger.LoggingModes.html": {
    "href": "api/IronPdf.Logging.Logger.LoggingModes.html",
    "title": "Class Logger.LoggingModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger.LoggingModes Different Ways to log developer notices and warnings Inheritance System.Object Logger.LoggingModes Namespace : IronPdf.Logging Assembly : IronPdf.dll Syntax public sealed class LoggingModes : Enum Fields All Send messages to all available endpoints Declaration public const Logger.LoggingModes All Field Value Type Description Logger.LoggingModes Console Sends Messages to System.Console Declaration public const Logger.LoggingModes Console Field Value Type Description Logger.LoggingModes Custom Send messages to custom logger Declaration public const Logger.LoggingModes Custom Field Value Type Description Logger.LoggingModes DebugOutputWindow Sends Messages to System.Diagnostics.Debug Declaration public const Logger.LoggingModes DebugOutputWindow Field Value Type Description Logger.LoggingModes File Send messages to file Declaration public const Logger.LoggingModes File Field Value Type Description Logger.LoggingModes None Do not log messages Declaration public const Logger.LoggingModes None Field Value Type Description Logger.LoggingModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.MetaData.html": {
    "href": "api/IronPdf.MetaData.html",
    "title": "Namespace IronPdf.MetaData | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.MetaData Classes PdfCustomMetadataProperties Class that represents set of custom metadata properties PdfDateFormatter PdfMetaData A class defining PDF file meta-data. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Implemented in MetaData ."
  },
  "api/IronPdf.MetaData.PdfCustomMetadataProperties.html": {
    "href": "api/IronPdf.MetaData.PdfCustomMetadataProperties.html",
    "title": "Class PdfCustomMetadataProperties | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfCustomMetadataProperties Class that represents set of custom metadata properties Inheritance System.Object PdfCustomMetadataProperties Namespace : IronPdf.MetaData Assembly : IronPdf.dll Syntax public class PdfCustomMetadataProperties : Object Properties Item[String] Gets or sets element value with the specified key. Declaration public string this[string key] { get; set; } Parameters Type Name Description System.String key The key of the element. Property Value Type Description System.String Methods Add(String, String) Method for adding property with the specified name and value. You can convert value of any type to the string and store it in custom properties. Declaration public void Add(string name, string value) Parameters Type Name Description System.String name The name of the custom PDF MetaData Property. System.String value The value of the custom PDF MetaData Property as a String. Remove(String) Method for removing property by its name. Declaration public bool Remove(string name) Parameters Type Name Description System.String name The name of the property. Returns Type Description System.Boolean true if property was removed, otherwise false ."
  },
  "api/IronPdf.MetaData.PdfDateFormatter.html": {
    "href": "api/IronPdf.MetaData.PdfDateFormatter.html",
    "title": "Class PdfDateFormatter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDateFormatter Inheritance System.Object PdfDateFormatter Namespace : IronPdf.MetaData Assembly : IronPdf.dll Syntax public class PdfDateFormatter : Object Constructors PdfDateFormatter() Declaration public PdfDateFormatter() Methods Convert(DateTime) Convert the specified date into a PDF-compatible local date string with UTC offset information Declaration public string Convert(DateTime date) Parameters Type Name Description System.DateTime date Date to convert Returns Type Description System.String PDF-compatible local date string Convert(String) Convert the specified PDF-compatible local date string with UTC offset information into a universal DateTime object Declaration public DateTime Convert(string text) Parameters Type Name Description System.String text Text to convert Returns Type Description System.DateTime Universal DateTime object GetTimeZoneOffset() Declaration public virtual TimeSpan GetTimeZoneOffset() Returns Type Description System.TimeSpan"
  },
  "api/IronPdf.MetaData.PdfMetaData.html": {
    "href": "api/IronPdf.MetaData.PdfMetaData.html",
    "title": "Class PdfMetaData | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfMetaData A class defining PDF file meta-data. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Implemented in MetaData . Inheritance System.Object PdfMetaData Namespace : IronPdf.MetaData Assembly : IronPdf.dll Syntax public class PdfMetaData : Object Properties Author Gets or sets the Author of the document. Declaration public string Author { get; set; } Property Value Type Description System.String The author name as a string. CreationDate Gets or sets the PDF file creation DateTime. Declaration public DateTime CreationDate { get; set; } Property Value Type Description System.DateTime DateTime of PDF file creation as a Local Time. Use CreationDate.ToUniversalTime() to return a UTC DateTime Creator Gets or sets the Creator of the document. Declaration public string Creator { get; set; } Property Value Type Description System.String The creator name as a string. CustomProperties Property defining custom metadata properties of the document. Declaration public PdfCustomMetadataProperties CustomProperties { get; } Property Value Type Description PdfCustomMetadataProperties Keywords Gets or sets the Keywords of the document. This helps search indexes and operating systems correctly index the PDF. Declaration public string Keywords { get; set; } Property Value Type Description System.String The Keywords of the document as a string. It is customary to use comma separation between keywords. ModifiedDate Gets or sets the PDF file last-modified DateTime. Declaration public DateTime ModifiedDate { get; set; } Property Value Type Description System.DateTime DateTime of PDF file modification as a Local Time. Use ModifiedDate.ToUniversalTime() to return a UTC DateTime. Producer Gets or sets the Producer of the document. Declaration public string Producer { get; set; } Property Value Type Description System.String The producer name as a string. Subject Gets or sets the Subject of the document. This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software. Declaration public string Subject { get; set; } Property Value Type Description System.String The Subject of the document as a string. Title Gets or sets the Title of the document. This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software. Declaration public string Title { get; set; } Property Value Type Description System.String The Title of the document as a string."
  },
  "api/IronPdf.Pages.html": {
    "href": "api/IronPdf.Pages.html",
    "title": "Namespace IronPdf.Pages | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Pages Classes PdfPage A class which represents one page of a PDF Document. PdfPagesCollection Class for managing the collection of PdfPage elements."
  },
  "api/IronPdf.Pages.PdfPage.html": {
    "href": "api/IronPdf.Pages.PdfPage.html",
    "title": "Class PdfPage | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPage A class which represents one page of a PDF Document. Inheritance System.Object PdfPage Namespace : IronPdf.Pages Assembly : IronPdf.dll Syntax public class PdfPage : Object Properties Height Gets the height of the pdf page in mm. Declaration public double Height { get; } Property Value Type Description System.Double PageOrientation Gets the page orientation. Declaration public PdfPaperOrientation PageOrientation { get; } Property Value Type Description PdfPaperOrientation PrintHeight Gets the height of the pdf page in printer points. Declaration public double PrintHeight { get; } Property Value Type Description System.Double PrintWidth Gets the width of the pdf page in printer points. Declaration public double PrintWidth { get; } Property Value Type Description System.Double Width Gets the width of the pdf page in mm. Declaration public double Width { get; } Property Value Type Description System.Double"
  },
  "api/IronPdf.Pages.PdfPagesCollection.html": {
    "href": "api/IronPdf.Pages.PdfPagesCollection.html",
    "title": "Class PdfPagesCollection | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPagesCollection Class for managing the collection of PdfPage elements. Inheritance System.Object PdfPagesCollection Implements System.Collections.Generic.IEnumerable < PdfPage > System.Collections.IEnumerable Namespace : IronPdf.Pages Assembly : IronPdf.dll Syntax public class PdfPagesCollection : Object Properties Count Gets the number of elements contained in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 The count of pages. Item[Int32] Gets the PdfPage at the specified index. Declaration public PdfPage this[int index] { get; } Parameters Type Name Description System.Int32 index The index. Property Value Type Description PdfPage The PdfPage . Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<PdfPage> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PdfPage > An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronPdf.PdfDocument.html": {
    "href": "api/IronPdf.PdfDocument.html",
    "title": "Class PdfDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocument Inheritance System.Object PdfDocument Implements System.IDisposable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfDocument : Object Constructors PdfDocument(Byte[], String, String, Boolean) Opens an existing PDF document for editing. Declaration public PdfDocument(byte[] PdfData, string Password = \"\", string OwnerPassword = \"\", bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.Byte [] PdfData The PDF file data as byte array. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). System.Boolean GenerateUniqueDocumentIdentifiers If false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. PdfDocument(Stream, String, String, Boolean) Opens an existing PDF document for editing. Declaration public PdfDocument(Stream PdfDataStream, string Password = \"\", string OwnerPassword = \"\", bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.IO.Stream PdfDataStream The PDF file data as a Stream. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. PdfDocument(String, String, String, Boolean) Opens an existing PDF document for editing. Declaration public PdfDocument(string PdfFilePath, string Password = \"\", string OwnerPassword = \"\", bool GenerateUniqueDocumentIdentifiers = true) Parameters Type Name Description System.String PdfFilePath The PDF file path. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). System.Boolean GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM and BinaryData for two identical PDF files will be the same. This is very useful for Unit Testing, especially comparing rendered PDFs for Equality. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. System.ArgumentException PdfFilePath is null, empty, or consists only of white-space characters. Properties BinaryData Gets the binary data for the full PDF file as a byte array. Declaration public byte[] BinaryData { get; } Property Value Type Description System.Byte [] The PDF file as a byte array. BookMarks An PdfOutline object allowing developers to add, edit and remove navigational bookmarks from PDF documents. Declaration public PdfOutline BookMarks { get; } Property Value Type Description PdfOutline Form Gets an object returning any PDF editable form fields which can have their values both read and set programmatically. Declaration public PdfForm Form { get; } Property Value Type Description PdfForm The form. GenerateUniqueDocumentIdentifiers if false, System.Guid is not generated inside PDF DOM (better for unit testing) and BinaryData of two identical PDF files is the same. If true, System.Guid is generated inside PDF DOM (better for security) and BinaryData of two identical PDF files differs. Default value is false. Declaration public bool GenerateUniqueDocumentIdentifiers { get; } Property Value Type Description System.Boolean MetaData MetaData information settings for the PDF. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Declaration public PdfMetaData MetaData { get; } Property Value Type Description PdfMetaData MetaData settings for this PDF as an instance of PdfMetaData OwnerPassword Sets the owner password and enables 128-bit encryption of PDF content. An owner password is one used to enable and disable all other security settings. OwnerPassword must be set to a non empty string value for AllowUserCopyPasteContent , AllowUserAnnotations , AllowUserFormData , AllowUserPrinting and AllowUserEdits to be restricted. Declaration public string OwnerPassword { get; set; } Property Value Type Description System.String PageCount Gets the number of pages in the PDF document. Declaration public int PageCount { get; } Property Value Type Description System.Int32 The page count. Pages Gets the list of pages in the PDF document. Declaration public PdfPagesCollection Pages { get; } Property Value Type Description PdfPagesCollection Password Sets a Password used to protect and encrypt the PDF File. Setting a password will cause IronPDF to automatically protect the PDF file content using strong 128 bit encryption. Setting the password to null will remove any existing password. Declaration public string Password { get; set; } Property Value Type Description System.String SecuritySettings Advanced security settings for the PDF. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Declaration public PdfSecuritySettings SecuritySettings { get; } Property Value Type Description PdfSecuritySettings Advanced security settings for this PDF as an instance of PdfSecuritySettings Stream Gets the binary data for the full PDF file as a Stream. This Stream is System.IDisposable and should be disposed with \"using\" or \"Dispose()\" methods. Declaration public MemoryStream Stream { get; } Property Value Type Description System.IO.MemoryStream The PDF file as a new MemoryStream which is System.IDisposable and should be disposed with \"using\" or \"Dispose()\" methods. Methods AddBackgroundPdf(PdfDocument, Int32) Adds a background to each page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdf(PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdf(String, Int32) Adds a background to each page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdf(string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.String BackgroundPdfPath The background PDF's file path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPage(Int32, PdfDocument, Int32) Adds the background to one page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPage(int ToPageIndex, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the background will be applied to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPage(Int32, String, Int32) Adds the background to one page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPage(int ToPageIndex, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the background will be applied to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(IEnumerable<Int32>, PdfDocument, Int32) Adds the background to specified pages of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(IEnumerable<int> ToPageIndexes, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(IEnumerable<Int32>, String, Int32) Adds the background to specified pages of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(IEnumerable<int> ToPageIndexes, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(Int32, Int32, PdfDocument, Int32) Adds the background to a range of pages in this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(int StartPageIndex, int EndPageIndex, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding backgrounds to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding backgrounds to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(Int32, Int32, String, Int32) Adds the background to a range of pages in this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(int StartPageIndex, int EndPageIndex, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding backgrounds to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding backgrounds to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdf(PdfDocument, Int32) Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdf(PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdf(String, Int32) Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdf(string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.String OverlayPdfPath The background PDF's file path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPage(Int32, PdfDocument, Int32) Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPage(int ToPageIndex, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the foreground will be applied to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPage(Int32, String, Int32) Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPage(int ToPageIndex, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the foreground will be applied to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(IEnumerable<Int32>, PdfDocument, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(IEnumerable<int> ToPageIndexes, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(IEnumerable<Int32>, String, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(IEnumerable<int> ToPageIndexes, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(Int32, Int32, PdfDocument, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(int StartPageIndex, int EndPageIndex, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding overlays to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding overlays to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(Int32, Int32, String, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(int StartPageIndex, int EndPageIndex, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding overlays to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding overlays to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlFooters(HtmlHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Renders HTML page footers to an existing PDF File Declaration public PdfDocument AddHtmlFooters(HtmlHeaderFooter Footer, double MarginLeft, double MarginRight, double MarginBottom, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description IronPdf.HtmlHeaderFooter Footer A new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout. System.Double MarginLeft The left margin of the footer on the page in mm. System.Double MarginRight The right margin of the footer on the page in mm. System.Double MarginBottom The bottom margin of the footer on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlFooters(HtmlHeaderFooter, Int32, IEnumerable<Int32>) Renders HTML page footers to an existing PDF File Margin spacing on the PDF page for the footer are set to default values of 25mm. An overload method allow footer margins to be chosen specifically or set to zero. Declaration public PdfDocument AddHtmlFooters(HtmlHeaderFooter Footer, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description IronPdf.HtmlHeaderFooter Footer A new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlHeaders(HtmlHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Renders HTML page headers to an existing PDF File Declaration public PdfDocument AddHtmlHeaders(HtmlHeaderFooter Header, double MarginLeft, double MarginRight, double MarginTop, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description IronPdf.HtmlHeaderFooter Header A new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout. System.Double MarginLeft The left margin of the header on the page in mm. System.Double MarginRight The right margin of the header on the page in mm. System.Double MarginTop The top margin of the header on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlHeaders(HtmlHeaderFooter, Int32, IEnumerable<Int32>) Renders HTML page headers to an existing PDF File Margin spacing on the PDF page for the header are set to default values of 25mm. An overload method allow header margins to be chosen specifically or set to zero. Declaration public PdfDocument AddHtmlHeaders(HtmlHeaderFooter Header, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description IronPdf.HtmlHeaderFooter Header A new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlHeadersAndFooters(ChromePdfRenderOptions, IEnumerable<Int32>) Add HTML headers and footers using the specified render options and optional list of page indices Declaration public PdfDocument AddHtmlHeadersAndFooters(ChromePdfRenderOptions Options, IEnumerable<int> PageIndexes = null) Parameters Type Name Description ChromePdfRenderOptions Options Render options for the HTML headers and footers System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Optional list of page indices to apply headers and footers to. Defaults to all pages Returns Type Description PdfDocument Pdf document AddTextAnnotation(TextAnnotation, Int32, Int32, Int32, Int32, Int32) Adds an annotation to a page of this PdfDocument Declaration public void AddTextAnnotation(TextAnnotation TextAnnotation, int PageIndex, int X, int Y, int Width = 30, int Height = 30) Parameters Type Name Description TextAnnotation TextAnnotation The annotation as a IronPdf.PdfDocument.TextAnnotation object. System.Int32 PageIndex Index of the page to add the annotation. The first page has a PageIndex of 0 System.Int32 X The horizontal X position of the annotation on your page in pixels System.Int32 Y The vertical Y position of the annotation on your page in pixels. Measured from top downwards. System.Int32 Width The width of your annotation's icon and interactive area in pixels System.Int32 Height The height of your annotation's icon and interactive area in pixels AddTextAnnotation(String, String, String, Int32, Int32, Int32, Int32, Int32, TextAnnotation.AnnotationIcon, Boolean, Boolean, Boolean, String, Double) Adds an annotation to a page of this PdfDocument Declaration public void AddTextAnnotation(string Title, string Subject, string Contents, int PageIndex, int X, int Y, int Width = 30, int Height = 30, TextAnnotation.AnnotationIcon Icon, bool Open = true, bool ReadOnly = true, bool Printable = false, string RgbColor = \"#FFFF33\", double Opacity = 1) Parameters Type Name Description System.String Title The title of the annotation System.String Subject The subject or 'subheading' of the annotation System.String Contents The text content of the annotation System.Int32 PageIndex Index of the page to add the annotation. The first page has a PageIndex of 0 System.Int32 X The horizontal X position of the annotation on your page in pixels System.Int32 Y The vertical Y position of the annotation on your page in pixels. Measured from top downwards. System.Int32 Width The width of your annotation's icon and interactive area in pixels System.Int32 Height The height of your annotation's icon and interactive area in pixels TextAnnotation.AnnotationIcon Icon The icon used to display the interactive annotation within the PDF System.Boolean Open Sets the annotation to be opened and readable by default, without user interaction System.Boolean ReadOnly Makes the annotation non user editable System.Boolean Printable Makes the annotation render during user PDF printing operations System.String RgbColor Color of the annotation's background 'sticky note' using Html color notation. E.g. '#FFFF33'. System.Double Opacity The opacity of the annotation (valid values are from 0.0 to 1.0) AddTextFooters(TextHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Renders page footers to an existing PDF File Declaration public PdfDocument AddTextFooters(TextHeaderFooter Footer, double MarginLeft, double MarginRight, double MarginBottom, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description TextHeaderFooter Footer A new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout. System.Double MarginLeft The left margin of the footer on the page in mm. System.Double MarginRight The right margin of the footer on the page in mm. System.Double MarginBottom The bottom margin of the footer on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextFooters(TextHeaderFooter, Int32, IEnumerable<Int32>) Renders page footers to an existing PDF File Margin spacing on the PDF page for the footer are set to default values of 25mm. An overload method allow footer margins to be chosen specifically or set to zero. Declaration public PdfDocument AddTextFooters(TextHeaderFooter Footer, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description TextHeaderFooter Footer A new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextHeaders(TextHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Renders page headers to an existing PDF File Declaration public PdfDocument AddTextHeaders(TextHeaderFooter Header, double MarginLeft, double MarginRight, double MarginTop, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description TextHeaderFooter Header A new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout. System.Double MarginLeft The left margin of the header on the page in mm. System.Double MarginRight The right margin of the header on the page in mm. System.Double MarginTop The top margin of the header on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextHeaders(TextHeaderFooter, Int32, IEnumerable<Int32>) Renders page headers to an existing PDF File Margin spacing on the PDF page for the header are set to default values of 25mm. An overload method allow header margins to be chosen specifically or set to zero. Declaration public PdfDocument AddTextHeaders(TextHeaderFooter Header, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description TextHeaderFooter Header A new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout. System.Int32 FirstPageNumber Optional. The number of first page. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextHeadersAndFooters(ChromePdfRenderOptions, IEnumerable<Int32>) Add text headers and footers using the specified render options and optional list of page indices Declaration public PdfDocument AddTextHeadersAndFooters(ChromePdfRenderOptions Options, IEnumerable<int> PageIndexes = null) Parameters Type Name Description ChromePdfRenderOptions Options Render options for the text headers and footers System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Optional list of page indices to apply headers and footers to. Defaults to all pages Returns Type Description PdfDocument Pdf document AppendPdf(PdfDocument) Appends another PDF to the end of the current PdfDocument Declaration public PdfDocument AppendPdf(PdfDocument AnotherPdfFile) Parameters Type Name Description PdfDocument AnotherPdfFile PdfDocument to append. Returns Type Description PdfDocument A new PdfDocument CopyPage(Int32) Creates a new PDF by copying a page from this PdfDocument. Declaration public PdfDocument CopyPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description PdfDocument A new PdfDocument CopyPages(IEnumerable<Int32>) Creates a new PDF by copying a range of pages from this PdfDocument. Declaration public PdfDocument CopyPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable of page indexes to copy into the new PDF. Returns Type Description PdfDocument A new PdfDocument CopyPages(Int32, Int32) Creates a new PDF by copying a range of pages from this PdfDocument . Declaration public PdfDocument CopyPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to copy.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to copy.> Returns Type Description PdfDocument A new PdfDocument Dispose() Releases used resources. Declaration public void Dispose() ExtractAllBitmaps() Finds all embedded Images from within the PDF and returns then as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractAllBitmaps() Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractAllImages() Finds all embedded Images from within the PDF and returns then as System.Drawing.Image objects Declaration public IEnumerable<Image> ExtractAllImages() Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractAllRawImages() Extracts all images from a PDf document. Images are returned as their raw data in as Byte Arrays (byte[]) Declaration public IEnumerable<byte[]> ExtractAllRawImages() Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> An Enumerable of Byte Arrays. Each Byte Array represents one image. ExtractAllText() Extracts the written text content from the PDF and returns it as a string. Pages are be separated by 4 consecutive Environment.NewLines Declaration public string ExtractAllText() Returns Type Description System.String All text in the PDF as a string. ExtractBitmapsFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractBitmapsFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractBitmapsFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractBitmapsFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractBitmapsFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Bitmap> ExtractBitmapsFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > IEnumerable of Bitmap. The extracted images as System.Drawing Objects ExtractImagesFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as System.Drawing.Image objects Declaration public IEnumerable<Image> ExtractImagesFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractImagesFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as System.Drawing.Image objects Declaration public IEnumerable<Image> ExtractImagesFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractImagesFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as System.Drawing.Bitmap objects Declaration public IEnumerable<Image> ExtractImagesFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.IEnumerable < System.Drawing.Image > IEnumerable of Image. The extracted images as System.Drawing Objects ExtractRawImagesFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as raw image byte array objects Declaration public IEnumerable<byte[]> ExtractRawImagesFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> IEnumerable of raw image byte array. ExtractRawImagesFromPages(IEnumerable<Int32>) Finds all embedded Images from specified pages in the PDF and returns them as System.Drawing.Image objects Declaration public IEnumerable<byte[]> ExtractRawImagesFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> IEnumerable of raw image byte array. ExtractRawImagesFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as raw image byte array objects Declaration public IEnumerable<byte[]> ExtractRawImagesFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.IEnumerable < System.Byte []> IEnumerable of raw image byte array. ExtractTextFromPage(Int32) Extracts the text content from one page of the PDF and returns it as a string. Declaration public string ExtractTextFromPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.String The text extracted from the PDF page as a string. ExtractTextFromPages(IEnumerable<Int32>) Extracts the written text content from specified pages in the PDF PDF and returns it as a string. Pages will be separated by 4 consecutive Environment.NewLines Declaration public string ExtractTextFromPages(IEnumerable<int> pageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageIndexes An IEnumerable list of page indexes. Returns Type Description System.String The text extracted from the PDF pages as a string. ExtractTextFromPages(Int32, Int32) Extracts the written text content from a range of pages within the PDF and returns it as a string. Pages will be separated by 4 consecutive Environment.NewLines Declaration public string ExtractTextFromPages(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex The start page index. Note: Page 1 has index 0 System.Int32 endIndex The end page index. Note: The last page has index PageCount -1 Returns Type Description System.String The text extracted from the PDF pages as a string. Finalize() Finalizer Declaration protected override void Finalize() Flatten(IEnumerable<Int32>) Flattens a document (make the fields non-editable). Declaration public void Flatten(IEnumerable<int> Pages = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > Pages Optional page indices to flatten (defaults to all pages) FromFile(String, String, String) Opens an existing PDF document for editing. Declaration public static PdfDocument FromFile(string PdfFilePath, string password = \"\", string ownerPassword = \"\") Parameters Type Name Description System.String PdfFilePath The PDF file path. System.String password Optional user password if the PDF document is encrypted. System.String ownerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Returns Type Description PdfDocument An IronPdf.PdfDocument object as loaded from the file path. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. System.ArgumentException PdfFilePath is null, empty, or consists only of white-space characters. GetPageRotation(Int32) Gets the rotation of a PDF page in degrees. Declaration public RenderRotations GetPageRotation(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page to inspect. PageIndex is a 'Zero based' page number, the first page being 0. Returns Type Description RenderRotations Degrees of rotation GetPrintDocument() Returns a System.Drawing.Printing.PrintDocument for the PDF allowing developers granular control over sending the PDF to a Printer. An assembly reference to System.Drawing is required in your project. Declaration public PrintDocument GetPrintDocument() Returns Type Description System.Drawing.Printing.PrintDocument A System.Drawing.Printing.PrintDocument . Exceptions Type Condition System.Exception IronPdf must be licensed to use this feature. GetVerifiedSignatures() Returns a list of IronPdf.VerifiedSignature . Declaration public ICollection<VerifiedSignature> GetVerifiedSignatures() Returns Type Description System.Collections.Generic.ICollection < VerifiedSignature > list of IronPdf.VerifiedSignature GetVerifiedSignatures(Byte[]) Returns a list of IronPdf.VerifiedSignature from the specified PDF document by the parameter data . Declaration public static ICollection<VerifiedSignature> GetVerifiedSignatures(byte[] data) Parameters Type Name Description System.Byte [] data the bytes of a pdf document Returns Type Description System.Collections.Generic.ICollection < VerifiedSignature > list of IronPdf.VerifiedSignature InsertPdf(PdfDocument, Int32) Inserts another PDF into the current PdfDocument, starting at a given Page Index. Declaration public PdfDocument InsertPdf(PdfDocument AnotherPdfFile, int AtIndex = 0) Parameters Type Name Description PdfDocument AnotherPdfFile Another PdfDocument. System.Int32 AtIndex Index at which to insert the new content. Note: Page 1 has index 0... Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Merge(PdfDocument, PdfDocument) Static method that joins (concatenates) 2 PDF documents together into one PDF document. Declaration public static PdfDocument Merge(PdfDocument a, PdfDocument b) Parameters Type Name Description PdfDocument a A PDF PdfDocument b A Seconds PDF Returns Type Description PdfDocument A new, merged PdfDocument Merge(IEnumerable<PdfDocument>) Static method that joins (concatenates) multiple PDF documents together into one compiled PDF document. Declaration public static PdfDocument Merge(IEnumerable<PdfDocument> pdfs) Parameters Type Name Description System.Collections.Generic.IEnumerable < PdfDocument > pdfs A IEnumerable of PdfDocument. To merge existing PDF files you may use the PdfDocument.FromFile static method in conjunction with Merge. Returns Type Description PdfDocument A new, merged PdfDocument PageToBitmap(Int32, Int32) Renders a single page of the PDF to a System.Drawing.Bitmap object. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap PageToBitmap(int PageNumber, int DPI = 96) Parameters Type Name Description System.Int32 PageNumber The page number to be converted to an image. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap A System.Drawing.Bitmap of the rendered PDF page. Remarks The DPI will be ignored under Linux and macOS. PageToBitmap(Int32, Nullable<Int32>, Nullable<Int32>, Int32) Renders a single page of the PDF to a System.Drawing.Bitmap object. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap PageToBitmap(int pageNumber, Nullable<int> imageMaxWidth, Nullable<int> imageMaxHeight, int DPI = 96) Parameters Type Name Description System.Int32 pageNumber The page number to be converted to an image. System.Nullable < System.Int32 > imageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > imageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap A System.Drawing.Bitmap of the rendered PDF page. Remarks The DPI will be ignored under Linux and macOS. PrependPdf(PdfDocument) Adds another PDF to the beginning of the current PdfDocument Declaration public PdfDocument PrependPdf(PdfDocument AnotherPdfFile) Parameters Type Name Description PdfDocument AnotherPdfFile PdfDocument to prepend. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Print(Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int Print(bool showPreview = false) Parameters Type Name Description System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(Int32, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . if true print preview dialogs will be displayed to the user. Default value is false . the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . Declaration public int Print(int dpi, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(Int32, Int32, String, String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see GetPrintDocument() . the horizontal PDF resolution, in dots per inch. the vertical PDF resolution, in dots per inch. the name of a printer, set null or an empty string (\"\") to use default print. The default value is null . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. The default value is false . Declaration public int Print(int dpiX, int dpiY, string printerName = null, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpiX System.Int32 dpiY System.String printerName System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(Int32, String, String, Boolean) Prints this PDF by sending it to the computer's printer. For even more advanced real-world printing options please see overloads of this method and also GetPrintDocument() . the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int Print(int dpi, string printerName = null, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.String printerName System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() Print(String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int Print(string printerName, bool showPreview = false) Parameters Type Name Description System.String printerName System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() PrintToFile(Int32, String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument() . the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int PrintToFile(int dpi, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() PrintToFile(String, Boolean) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads GetPrintDocument() . the file path, when printing to a file, set null or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . if true print preview dialogs will be displayed to the user. Default value is false . Declaration public int PrintToFile(string filePath, bool showPreview = false) Parameters Type Name Description System.String filePath System.Boolean showPreview Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument() QuickSignPdfWithDigitalSignatureFile(String, String) Sign PDF with digital signature certificate. For more advanced options please see QuickSignPdfWithDigitalSignatureFile(String, String) Note that the PDF will not be fully signed until Saved using SaveAs(String) , TrySaveAs(String) , Stream or BinaryData . Multiple certificates may be used. Declaration public PdfDocument QuickSignPdfWithDigitalSignatureFile(string CertificateFilePath, string Password) Parameters Type Name Description System.String CertificateFilePath The file path to a .pfx or .p12 digital signing certificate which may be generated using Adobe Acrobat Viewer. System.String Password The certificate password as a String. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style See Also IronPdf.PdfSignature RasterizeToImageFiles(String, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, IEnumerable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Page Numbers may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, IEnumerable<int> PageNumbers, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Page Numbers may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, Nullable<Int32>, Nullable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Image dimensions may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RemovePage(Int32) Removes a page from the PDF at the given index. Declaration public PdfDocument RemovePage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RemovePages(IEnumerable<Int32>) Removes a range of pages from the PDF Declaration public PdfDocument RemovePages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of pages indexes to remove. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RemovePages(Int32, Int32) Removes a range of pages from the PDF Declaration public PdfDocument RemovePages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The start index. Note: Page 1 has index 0 System.Int32 EndIndex The end index. Note: The last page has index PageCount -1 Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RotateAllPages(RenderRotations) Rotates all pages of the PdfDocument by a specified number of degrees. Declaration public void RotateAllPages(RenderRotations Rotation) Parameters Type Name Description RenderRotations Rotation Degrees of rotation RotatePage(Int32, RenderRotations) Rotates one page of the PdfDocument by a specified number of degrees. Declaration public void RotatePage(int PageIndex, RenderRotations Rotation) Parameters Type Name Description System.Int32 PageIndex Index of the page to rotate. PageIndex is a 'Zero based' page number, the first page being 0. RenderRotations Rotation Degrees of rotation RotateSelectedPages(IEnumerable<Int32>, RenderRotations) Rotates selected pages of the PdfDocument by a specified number of degrees. Declaration public void RotateSelectedPages(IEnumerable<int> PageIndexes, RenderRotations Rotation) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Indexes of the pages to rotate in an IEnumerable, list or array. PageIndex is a 'Zero based' page number, the first page being 0. RenderRotations Rotation Degrees of rotation SaveAs(String) Saves the PdfDocument to a file. Supports site relative paths staring with \"~/\" in .Net Framework Web 4+ Applications Declaration public PdfDocument SaveAs(string FileName) Parameters Type Name Description System.String FileName File Path Returns Type Description PdfDocument This PdfDocument for fluid code notation. SignPdfWithDigitalSignature(PdfSignature) Signs the PDF with digital signature with advanced options. Note that the PDF will not be fully signed until Saved using SaveAs(String) , TrySaveAs(String) , Stream or BinaryData . Multiple certificates may be used. Declaration public PdfDocument SignPdfWithDigitalSignature(PdfSignature Signature) Parameters Type Name Description PdfSignature Signature The PdfSignature. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTML(HtmlStamp, ChromePdfRenderOptions) Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of every page. Declaration public PdfDocument StampHTML(HtmlStamp Stamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description HtmlStamp Stamp The HtmlStamp stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTML(HtmlStamp, IEnumerable<Int32>, ChromePdfRenderOptions) Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of specified pages. Declaration public PdfDocument StampHTML(HtmlStamp Stamp, IEnumerable<int> PageIndexesToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description HtmlStamp Stamp The IronPdf.HtmlStamp stamp. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The list page indexes (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTML(HtmlStamp, Int32, ChromePdfRenderOptions) Edits the PDF by adding rendered HTML either behind or in-front of the existing contents of one page. Declaration public PdfDocument StampHTML(HtmlStamp Stamp, int PageIndexToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description HtmlStamp Stamp The IronPdf.HtmlStamp stamp. System.Int32 PageIndexToStamp The page index (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTMLAsync(HtmlStamp, ChromePdfRenderOptions) Asynchronously edits the PDF by adding rendered HTML either behind or in-front of the existing contents of every page. Declaration public Task<PdfDocument> StampHTMLAsync(HtmlStamp Stamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description HtmlStamp Stamp The HtmlStamp stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Remarks Please wait for the task to be completed before saving to file! StampHTMLAsync(HtmlStamp, IEnumerable<Int32>, ChromePdfRenderOptions) Asynchronously edits the PDF by adding rendered HTML either behind or in-front of the existing contents of specified pages. Declaration public Task<PdfDocument> StampHTMLAsync(HtmlStamp Stamp, IEnumerable<int> PageIndexesToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description HtmlStamp Stamp The IronPdf.HtmlStamp stamp. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The list page indexes (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Remarks Please wait for the task to be completed before saving to file! StampHTMLAsync(HtmlStamp, Int32, ChromePdfRenderOptions) Asynchronously edits the PDF by adding rendered HTML either behind or in-front of the existing contents of one page. Declaration public Task<PdfDocument> StampHTMLAsync(HtmlStamp Stamp, int PageIndexToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description HtmlStamp Stamp The IronPdf.HtmlStamp stamp. System.Int32 PageIndexToStamp The page index (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Remarks Please wait for the task to be completed before saving to file! StampHTMLRange(IEnumerable<HtmlStamp>, ChromePdfRenderOptions) Edits the PDF by adding rendered HTML(s) either behind or in-front of the existing contents of specified pages. Declaration public PdfDocument StampHTMLRange(IEnumerable<HtmlStamp> Stamps, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlStamp > Stamps The list of IronPdf.HtmlStamp stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTMLRange(IEnumerable<HtmlStamp>, IEnumerable<Int32>, ChromePdfRenderOptions) Edits the PDF by adding rendered HTML(s) either behind or in-front of the existing contents of specified pages. Declaration public PdfDocument StampHTMLRange(IEnumerable<HtmlStamp> Stamps, IEnumerable<int> PageIndexesToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlStamp > Stamps The list of IronPdf.HtmlStamp stamp. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The list page indexes (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTMLRange(IEnumerable<HtmlStamp>, Int32, ChromePdfRenderOptions) Edits the PDF by adding rendered HTML(s) either behind or in-front of the existing contents of specified pages. Declaration public PdfDocument StampHTMLRange(IEnumerable<HtmlStamp> Stamps, int PageIndexToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlStamp > Stamps The list of IronPdf.HtmlStamp stamp. System.Int32 PageIndexToStamp The page index (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTMLRangeAsync(IEnumerable<HtmlStamp>, ChromePdfRenderOptions) Asynchronously edit the PDF by adding rendered HTML(s) either behind or in-front of the existing contents of specified pages. This method will grouping up stamps before process, This should be faster but the result may diffrent from normal StampHTML(HtmlStamp, ChromePdfRenderOptions) Declaration public Task<PdfDocument> StampHTMLRangeAsync(IEnumerable<HtmlStamp> Stamps, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlStamp > Stamps The list of IronPdf.HtmlStamp stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTMLRangeAsync(IEnumerable<HtmlStamp>, IEnumerable<Int32>, ChromePdfRenderOptions) Asynchronously edits the PDF by adding rendered HTML(s) either behind or in-front of the existing contents of specified pages. This method will grouping up stamps before process, This should be faster but the result may diffrent from normal StampHTML(HtmlStamp, ChromePdfRenderOptions) Declaration public Task<PdfDocument> StampHTMLRangeAsync(IEnumerable<HtmlStamp> Stamps, IEnumerable<int> PageIndexesToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlStamp > Stamps The list of IronPdf.HtmlStamp stamp. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The list page indexes (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style StampHTMLRangeAsync(IEnumerable<HtmlStamp>, Int32, ChromePdfRenderOptions) Asynchronously edit the PDF by adding rendered HTML(s) either behind or in-front of the existing contents of specified pages. This method will grouping up stamps before process, This should be faster but the result may diffrent from normal StampHTML(HtmlStamp, ChromePdfRenderOptions) Declaration public Task<PdfDocument> StampHTMLRangeAsync(IEnumerable<HtmlStamp> Stamps, int PageIndexToStamp, ChromePdfRenderOptions RenderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlStamp > Stamps The list of IronPdf.HtmlStamp stamp. System.Int32 PageIndexToStamp The page index (zero-based page number) to stamp. ChromePdfRenderOptions RenderOptions Rendering options. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style ToBitmap(IEnumerable<Int32>, Int32) Rasterizes (renders) the PDF into System.Drawing.Bitmap objects. Specific pages may be selected using the PageNumbers parameter. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap[] ToBitmap(IEnumerable<int> pageNumbers, int DPI = 96) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageNumbers Specific page numbers may be given to only convert part of the PDF document to images System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap [] An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToBitmap(Int32) Rasterizes (renders) the PDF into System.Drawing.Bitmap objects. 1 Bitmap for each page. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method. Please Dispose() each Bitmap object after use. Declaration public Bitmap[] ToBitmap(int DPI = 96) Parameters Type Name Description System.Int32 DPI The resolution of the output Bitmap in 'Dots Per Inch'. Higher DPI creates larger bitmap files of higher image quality. Returns Type Description System.Drawing.Bitmap [] An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI may be ignored on some Linux distros. ToBitmap(Nullable<Int32>, Nullable<Int32>, IEnumerable<Int32>, Int32) Rasterizes (renders) the PDF into System.Drawing.Bitmap objects. Specific pages may be selected using the PageNumbers parameter. The Widths and Height of the output images may be specified. Please add an assembly reference to System.Drawing to use this \"PDF To Image\" method Please Dispose() each Bitmap object after use. Declaration public Bitmap[] ToBitmap(Nullable<int> imageMaxWidth, Nullable<int> imageMaxHeight, IEnumerable<int> pageNumbers = null, int DPI = 96) Parameters Type Name Description System.Nullable < System.Int32 > imageMaxWidth The target maximum width(in mm) of the output images. System.Nullable < System.Int32 > imageMaxHeight The target maximum height(in mm) of the output images. System.Collections.Generic.IEnumerable < System.Int32 > pageNumbers Specific page numbers may be given to only convert part of the PDF document to images System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.Drawing.Bitmap [] An array of System.Drawing.Bitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, IEnumerable<int> PageNumbers, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, IEnumerable<int> PageNumbers, int DPI = 96) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, int DPI) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, IEnumerable<int> PageNumbers, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, IEnumerable<int> PageNumbers, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, IEnumerable<int> PageNumbers, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageNumbers A list of the specific page numbers to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, int DPI) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Nullable < System.Int32 > ImageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. TrySaveAs(String) Attempt to save the PdfDocument to a file. Declaration public bool TrySaveAs(string FileName) Parameters Type Name Description System.String FileName File Path Returns Type Description System.Boolean } true if the file was saved successfully. false if an error occurred (e.g. file was locked or insufficient permissions). VerifyPdfSignatures() Verifies all the PDF signatures for this PDF document and returns true if there are no invalid signatures. Declaration public bool VerifyPdfSignatures() Returns Type Description System.Boolean true if all digital signatures for this PDF document are currently valid. Editing a PDF document in any way will invalidate signatures. VerifyPdfSignaturesInFile(String) Verifies all the PDF signatures for a PDF file (by file path) and returns true if there are no invalid signatures. Declaration public static bool VerifyPdfSignaturesInFile(string PdfFilePath) Parameters Type Name Description System.String PdfFilePath The full or relative PDF file path. Returns Type Description System.Boolean true if all digital signatures for the PDF document are currently valid. Editing a PDF document in any way will invalidate signatures. WatermarkAllPages(String, WaterMarkLocation, Int32, Int32, String) Watermarks all pages of this PDF with HTML content. Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size. Declaration public PdfDocument WatermarkAllPages(string Html, WaterMarkLocation Location, int Opacity = 100, int Rotation = 0, string Hyperlink = \"\") Parameters Type Name Description System.String Html The HTML fragment WaterMarkLocation Location The location of the watermark. IronPdf.PdfDocument.WaterMarkLocation System.Int32 Opacity The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible. System.Int32 Rotation The rotation of the watermark content in clockwise degrees. System.String Hyperlink An optional hyperlink which the watermark will link to. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style WatermarkPage(String, Int32, WaterMarkLocation, Int32, Int32, String) Watermarks a single page of this PDF with HTML content. Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size. Declaration public PdfDocument WatermarkPage(string Html, int PageIndexToWaterMark, WaterMarkLocation Location, int Opacity = 100, int Rotation = 0, string Hyperlink = \"\") Parameters Type Name Description System.String Html The HTML fragment System.Int32 PageIndexToWaterMark The page index (zero-based page number) of this PDF to watermark. WaterMarkLocation Location The location of the watermark. IronPdf.PdfDocument.WaterMarkLocation System.Int32 Opacity The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible. System.Int32 Rotation The rotation of the watermark content in clockwise degrees. System.String Hyperlink An optional hyperlink which the watermark will link to. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style WatermarkPages(String, IEnumerable<Int32>, WaterMarkLocation, Int32, Int32, String, WaterMarkPositioning) Watermarks all pages of this PDF with HTML content. Watermarks are restricted to basic positioning and a 100mm by 100mm maximum size. Declaration public PdfDocument WatermarkPages(string Html, IEnumerable<int> PageIndexesToWaterMark, WaterMarkLocation Location, int Opacity = 100, int Rotation = 0, string Hyperlink = \"\", WaterMarkPositioning positionOptions = null) Parameters Type Name Description System.String Html The HTML fragment System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToWaterMark A list of page index (zero-based page number) of this PDF to watermark. WaterMarkLocation Location The location of the watermark. WaterMarkLocation System.Int32 Opacity The opacity of the watermark from 0-100%. 100 is opaque, 0 is invisible. System.Int32 Rotation The rotation of the watermark content in clockwise degrees. System.String Hyperlink An optional hyperlink which the watermark will link to. WaterMarkPositioning positionOptions Additional options for positioning the watermark on the page Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Implements System.IDisposable"
  },
  "api/IronPdf.PrintDoc.html": {
    "href": "api/IronPdf.PrintDoc.html",
    "title": "Namespace IronPdf.PrintDoc | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.PrintDoc Classes PdfPrintDocument PdfPrintMultiplePages Configuration for printing multiple PDF pages on a single page. PdfPrintSettings Configures the print document."
  },
  "api/IronPdf.PrintDoc.PdfPrintDocument.html": {
    "href": "api/IronPdf.PrintDoc.PdfPrintDocument.html",
    "title": "Class PdfPrintDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintDocument Inheritance System.Object PdfPrintDocument Namespace : IronPdf.PrintDoc Assembly : IronPdf.dll Syntax public class PdfPrintDocument : PrintDocument Constructors PdfPrintDocument(Int32, PdfPrintSettings) Declaration public PdfPrintDocument(int id, PdfPrintSettings settings) Parameters Type Name Description System.Int32 id PdfPrintSettings settings Properties DefaultPageSettings Declaration public PageSettings DefaultPageSettings { get; set; } Property Value Type Description System.Drawing.Printing.PageSettings PrinterSettings Declaration public PrinterSettings PrinterSettings { get; set; } Property Value Type Description System.Drawing.Printing.PrinterSettings Methods OnBeforePrintPage(PrintPageEventArgs) Declaration protected virtual void OnBeforePrintPage(PrintPageEventArgs e) Parameters Type Name Description System.Drawing.Printing.PrintPageEventArgs e OnBeforeQueryPageSettings(QueryPageSettingsEventArgs) Declaration protected virtual void OnBeforeQueryPageSettings(QueryPageSettingsEventArgs e) Parameters Type Name Description System.Drawing.Printing.QueryPageSettingsEventArgs e OnBeginPrint(PrintEventArgs) Declaration protected override void OnBeginPrint(PrintEventArgs e) Parameters Type Name Description System.Drawing.Printing.PrintEventArgs e OnPrintPage(PrintPageEventArgs) Declaration protected override void OnPrintPage(PrintPageEventArgs e) Parameters Type Name Description System.Drawing.Printing.PrintPageEventArgs e OnQueryPageSettings(QueryPageSettingsEventArgs) Declaration protected override void OnQueryPageSettings(QueryPageSettingsEventArgs e) Parameters Type Name Description System.Drawing.Printing.QueryPageSettingsEventArgs e Events BeforePrintPage Declaration public event PrintPageEventHandler BeforePrintPage Event Type Type Description System.Drawing.Printing.PrintPageEventHandler BeforeQueryPageSettings Declaration public event QueryPageSettingsEventHandler BeforeQueryPageSettings Event Type Type Description System.Drawing.Printing.QueryPageSettingsEventHandler"
  },
  "api/IronPdf.PrintDoc.PdfPrintMultiplePages.html": {
    "href": "api/IronPdf.PrintDoc.PdfPrintMultiplePages.html",
    "title": "Class PdfPrintMultiplePages | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintMultiplePages Configuration for printing multiple PDF pages on a single page. Inheritance System.Object PdfPrintMultiplePages Namespace : IronPdf.PrintDoc Assembly : IronPdf.dll Syntax public class PdfPrintMultiplePages : Object Constructors PdfPrintMultiplePages(Int32, Int32, PdfPaperOrientation, Single) Creates a new instance of the PdfPrintMultiplePages class. Declaration public PdfPrintMultiplePages(int column, int row, PdfPaperOrientation orientation, float margin) Parameters Type Name Description System.Int32 column The number of pages to print horizontally. System.Int32 row The number of pages to print vertically. PdfPaperOrientation orientation The orientation in which PDF pages are layed out on the physical page. System.Single margin The margin between PDF pages in device units. Properties Column Gets the number of pages to print horizontally. Declaration public int Column { get; } Property Value Type Description System.Int32 Margin Gets the margin between PDF pages in device units. Declaration public float Margin { get; } Property Value Type Description System.Single Orientation Gets the orientation in which PDF pages are layed out on the physical page. Declaration public PdfPaperOrientation Orientation { get; } Property Value Type Description PdfPaperOrientation Row Gets the number of pages to print vertically. Declaration public int Row { get; } Property Value Type Description System.Int32"
  },
  "api/IronPdf.PrintDoc.PdfPrintSettings.html": {
    "href": "api/IronPdf.PrintDoc.PdfPrintSettings.html",
    "title": "Class PdfPrintSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintSettings Configures the print document. Inheritance System.Object PdfPrintSettings Namespace : IronPdf.PrintDoc Assembly : IronPdf.dll Syntax public class PdfPrintSettings : Object Constructors PdfPrintSettings(PdfPrintMultiplePages) Creates a new instance of the PdfPrintSettings class. Declaration public PdfPrintSettings(PdfPrintMultiplePages multiplePages) Parameters Type Name Description PdfPrintMultiplePages multiplePages Configuration for printing multiple PDF pages on a single page. Properties MultiplePages Gets configuration for printing multiple PDF pages on a single page. Declaration public PdfPrintMultiplePages MultiplePages { get; } Property Value Type Description PdfPrintMultiplePages"
  },
  "api/IronPdf.Rendering.Abstractions.BasePdfRenderer.html": {
    "href": "api/IronPdf.Rendering.Abstractions.BasePdfRenderer.html",
    "title": "Class BasePdfRenderer | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BasePdfRenderer An abstract generic class Inheritance System.Object BasePdfRenderer ChromePdfRenderer Implements IPdfRenderer Namespace : IronPdf.Rendering.Abstractions Assembly : IronPdf.dll Syntax public abstract class BasePdfRenderer : Object, IPdfRenderer Remarks Implements functionality and program flow details which are common to all renderers Properties LoginCredentials Http login credentials Declaration public ChromeHttpLoginCredentials LoginCredentials { get; set; } Property Value Type Description ChromeHttpLoginCredentials RenderingOptions Html to Pdf rendering options Declaration public ChromePdfRenderOptions RenderingOptions { get; set; } Property Value Type Description ChromePdfRenderOptions Methods RenderHtmlAsPdf(String, String, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . Declaration public PdfDocument RenderHtmlAsPdf(string Html, string BaseUrlOrPath, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.String BaseUrlOrPath Optional. Setting the BaseUBaseUrlOrPathRL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdf(String, Uri, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . Declaration public PdfDocument RenderHtmlAsPdf(string Html, Uri BaseUrl = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Optional. Setting the BaseURL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdfAsync(String, Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderHtmlAsPdf(String, Uri, String) Declaration public Task<PdfDocument> RenderHtmlAsPdfAsync(string Html, Uri BaseUrl = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseUrl property gives the relative context for hyper-links, images, CSS and JavaScript files. May point to a local directory or a remote URL. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderHtmlFileAsPdf(String) Synonym of RenderHtmlFileAsPdf Declaration public PdfDocument RenderHtmlFileAsPdf(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderHTMLFileAsPdf(String) Declaration public PdfDocument RenderHTMLFileAsPdf(string FilePath) Parameters Type Name Description System.String FilePath Returns Type Description PdfDocument RenderHtmlFileAsPdfAsync(String) Asynchronously creates a PDF file from a local Html file, and returns it as a PdfDocument . Asynchronous variant of RenderHtmlFileAsPdf(String) Declaration public Task<PdfDocument> RenderHtmlFileAsPdfAsync(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdf(String) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration public PdfDocument RenderUrlAsPdf(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdf(Uri) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration public PdfDocument RenderUrlAsPdf(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdfAsync(String) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(String) Declaration public Task<PdfDocument> RenderUrlAsPdfAsync(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path or URL to an Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdfAsync(Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(Uri) Declaration public Task<PdfDocument> RenderUrlAsPdfAsync(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument Implements IPdfRenderer"
  },
  "api/IronPdf.Rendering.Abstractions.html": {
    "href": "api/IronPdf.Rendering.Abstractions.html",
    "title": "Namespace IronPdf.Rendering.Abstractions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Rendering.Abstractions Classes BasePdfRenderer An abstract generic class Interfaces IPdfRenderer An Interface for \"Html To Pdf\" rendering classes."
  },
  "api/IronPdf.Rendering.Abstractions.IPdfRenderer.html": {
    "href": "api/IronPdf.Rendering.Abstractions.IPdfRenderer.html",
    "title": "Interface IPdfRenderer | C# PDF Library Documentation | IronPDF",
    "keywords": "Interface IPdfRenderer An Interface for \"Html To Pdf\" rendering classes. Namespace : IronPdf.Rendering.Abstractions Assembly : IronPdf.dll Syntax public interface IPdfRenderer Methods RenderHtmlAsPdf(String, String, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . Declaration PdfDocument RenderHtmlAsPdf(string Html, string BaseUrlOrPath, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.String BaseUrlOrPath Optional. Setting the BaseUBaseUrlOrPathRL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdf(String, Uri, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . Declaration PdfDocument RenderHtmlAsPdf(string Html, Uri BaseUrl = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Optional. Setting the BaseURL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdfAsync(String, Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderHtmlAsPdf(String, Uri, String) Declaration Task<PdfDocument> RenderHtmlAsPdfAsync(string Html, Uri BaseUrl = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseUrl property gives the relative context for hyper-links, images, CSS and JavaScript files. May point to a local directory or a remote URL. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderHtmlFileAsPdf(String) Creates a PDF file from a local Html file, and returns it as a PdfDocument . Declaration PdfDocument RenderHtmlFileAsPdf(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderHtmlFileAsPdfAsync(String) Asynchronously creates a PDF file from a local Html file, and returns it as a PdfDocument . Asynchronous variant of RenderHtmlFileAsPdf(String) Declaration Task<PdfDocument> RenderHtmlFileAsPdfAsync(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdf(String) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration PdfDocument RenderUrlAsPdf(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdf(Uri) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration PdfDocument RenderUrlAsPdf(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdfAsync(String) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(String) Declaration Task<PdfDocument> RenderUrlAsPdfAsync(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path or URL to an Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdfAsync(Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(Uri) Declaration Task<PdfDocument> RenderUrlAsPdfAsync(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument"
  },
  "api/IronPdf.Rendering.html": {
    "href": "api/IronPdf.Rendering.html",
    "title": "Namespace IronPdf.Rendering | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Rendering Classes PdfCssMediaType Defines which style-sheet should be rendered. 'Print' or 'Screen'. This matches the CSS3 Media Queries standard. PdfPaperOrientation Paper Orientation PdfPaperSize Defines the target virtual paper size the PDF. Relates to real-world paper-sizes. PdfRenderingEngine Specifies which \"HTML to PDF\" rendering engine to use."
  },
  "api/IronPdf.Rendering.PdfCssMediaType.html": {
    "href": "api/IronPdf.Rendering.PdfCssMediaType.html",
    "title": "Class PdfCssMediaType | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfCssMediaType Defines which style-sheet should be rendered. 'Print' or 'Screen'. This matches the CSS3 Media Queries standard. Inheritance System.Object PdfCssMediaType Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfCssMediaType : Enum Fields Print Declaration public const PdfCssMediaType Print Field Value Type Description PdfCssMediaType Screen Declaration public const PdfCssMediaType Screen Field Value Type Description PdfCssMediaType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfPaperOrientation.html": {
    "href": "api/IronPdf.Rendering.PdfPaperOrientation.html",
    "title": "Class PdfPaperOrientation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPaperOrientation Paper Orientation Inheritance System.Object PdfPaperOrientation Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfPaperOrientation : Enum Fields Landscape Declaration public const PdfPaperOrientation Landscape Field Value Type Description PdfPaperOrientation Portrait Declaration public const PdfPaperOrientation Portrait Field Value Type Description PdfPaperOrientation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfPaperSize.html": {
    "href": "api/IronPdf.Rendering.PdfPaperSize.html",
    "title": "Class PdfPaperSize | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPaperSize Defines the target virtual paper size the PDF. Relates to real-world paper-sizes. Inheritance System.Object PdfPaperSize Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfPaperSize : Enum Fields A2 Declaration public const PdfPaperSize A2 Field Value Type Description PdfPaperSize A3 Declaration public const PdfPaperSize A3 Field Value Type Description PdfPaperSize A3Extra Declaration public const PdfPaperSize A3Extra Field Value Type Description PdfPaperSize A3ExtraTransverse Declaration public const PdfPaperSize A3ExtraTransverse Field Value Type Description PdfPaperSize A3Rotated Declaration public const PdfPaperSize A3Rotated Field Value Type Description PdfPaperSize A3Transverse Declaration public const PdfPaperSize A3Transverse Field Value Type Description PdfPaperSize A4 Declaration public const PdfPaperSize A4 Field Value Type Description PdfPaperSize A4Extra Declaration public const PdfPaperSize A4Extra Field Value Type Description PdfPaperSize A4Plus Declaration public const PdfPaperSize A4Plus Field Value Type Description PdfPaperSize A4Rotated Declaration public const PdfPaperSize A4Rotated Field Value Type Description PdfPaperSize A4Small Declaration public const PdfPaperSize A4Small Field Value Type Description PdfPaperSize A4Transverse Declaration public const PdfPaperSize A4Transverse Field Value Type Description PdfPaperSize A5 Declaration public const PdfPaperSize A5 Field Value Type Description PdfPaperSize A5Extra Declaration public const PdfPaperSize A5Extra Field Value Type Description PdfPaperSize A5Rotated Declaration public const PdfPaperSize A5Rotated Field Value Type Description PdfPaperSize A5Transverse Declaration public const PdfPaperSize A5Transverse Field Value Type Description PdfPaperSize A6 Declaration public const PdfPaperSize A6 Field Value Type Description PdfPaperSize A6Rotated Declaration public const PdfPaperSize A6Rotated Field Value Type Description PdfPaperSize APlus Declaration public const PdfPaperSize APlus Field Value Type Description PdfPaperSize B4 Declaration public const PdfPaperSize B4 Field Value Type Description PdfPaperSize B4Envelope Declaration public const PdfPaperSize B4Envelope Field Value Type Description PdfPaperSize B4JisRotated Declaration public const PdfPaperSize B4JisRotated Field Value Type Description PdfPaperSize B5 Declaration public const PdfPaperSize B5 Field Value Type Description PdfPaperSize B5Envelope Declaration public const PdfPaperSize B5Envelope Field Value Type Description PdfPaperSize B5Extra Declaration public const PdfPaperSize B5Extra Field Value Type Description PdfPaperSize B5JisRotated Declaration public const PdfPaperSize B5JisRotated Field Value Type Description PdfPaperSize B5Transverse Declaration public const PdfPaperSize B5Transverse Field Value Type Description PdfPaperSize B6Envelope Declaration public const PdfPaperSize B6Envelope Field Value Type Description PdfPaperSize B6Jis Declaration public const PdfPaperSize B6Jis Field Value Type Description PdfPaperSize B6JisRotated Declaration public const PdfPaperSize B6JisRotated Field Value Type Description PdfPaperSize BPlus Declaration public const PdfPaperSize BPlus Field Value Type Description PdfPaperSize C3Envelope Declaration public const PdfPaperSize C3Envelope Field Value Type Description PdfPaperSize C4Envelope Declaration public const PdfPaperSize C4Envelope Field Value Type Description PdfPaperSize C5Envelope Declaration public const PdfPaperSize C5Envelope Field Value Type Description PdfPaperSize C65Envelope Declaration public const PdfPaperSize C65Envelope Field Value Type Description PdfPaperSize C6Envelope Declaration public const PdfPaperSize C6Envelope Field Value Type Description PdfPaperSize CSheet Declaration public const PdfPaperSize CSheet Field Value Type Description PdfPaperSize Custom Declaration public const PdfPaperSize Custom Field Value Type Description PdfPaperSize DLEnvelope Declaration public const PdfPaperSize DLEnvelope Field Value Type Description PdfPaperSize DSheet Declaration public const PdfPaperSize DSheet Field Value Type Description PdfPaperSize ESheet Declaration public const PdfPaperSize ESheet Field Value Type Description PdfPaperSize Executive Declaration public const PdfPaperSize Executive Field Value Type Description PdfPaperSize Folio Declaration public const PdfPaperSize Folio Field Value Type Description PdfPaperSize GermanLegalFanfold Declaration public const PdfPaperSize GermanLegalFanfold Field Value Type Description PdfPaperSize GermanStandardFanfold Declaration public const PdfPaperSize GermanStandardFanfold Field Value Type Description PdfPaperSize InviteEnvelope Declaration public const PdfPaperSize InviteEnvelope Field Value Type Description PdfPaperSize IsoB4 Declaration public const PdfPaperSize IsoB4 Field Value Type Description PdfPaperSize ItalyEnvelope Declaration public const PdfPaperSize ItalyEnvelope Field Value Type Description PdfPaperSize JapaneseDoublePostcard Declaration public const PdfPaperSize JapaneseDoublePostcard Field Value Type Description PdfPaperSize JapaneseDoublePostcardRotated Declaration public const PdfPaperSize JapaneseDoublePostcardRotated Field Value Type Description PdfPaperSize JapanesePostcard Declaration public const PdfPaperSize JapanesePostcard Field Value Type Description PdfPaperSize JapanesePostcardRotated Declaration public const PdfPaperSize JapanesePostcardRotated Field Value Type Description PdfPaperSize Ledger Declaration public const PdfPaperSize Ledger Field Value Type Description PdfPaperSize Legal Declaration public const PdfPaperSize Legal Field Value Type Description PdfPaperSize LegalExtra Declaration public const PdfPaperSize LegalExtra Field Value Type Description PdfPaperSize Letter Declaration public const PdfPaperSize Letter Field Value Type Description PdfPaperSize LetterExtra Declaration public const PdfPaperSize LetterExtra Field Value Type Description PdfPaperSize LetterExtraTransverse Declaration public const PdfPaperSize LetterExtraTransverse Field Value Type Description PdfPaperSize LetterPlus Declaration public const PdfPaperSize LetterPlus Field Value Type Description PdfPaperSize LetterRotated Declaration public const PdfPaperSize LetterRotated Field Value Type Description PdfPaperSize LetterSmall Declaration public const PdfPaperSize LetterSmall Field Value Type Description PdfPaperSize LetterTransverse Declaration public const PdfPaperSize LetterTransverse Field Value Type Description PdfPaperSize MonarchEnvelope Declaration public const PdfPaperSize MonarchEnvelope Field Value Type Description PdfPaperSize Note Declaration public const PdfPaperSize Note Field Value Type Description PdfPaperSize Number10Envelope Declaration public const PdfPaperSize Number10Envelope Field Value Type Description PdfPaperSize Number11Envelope Declaration public const PdfPaperSize Number11Envelope Field Value Type Description PdfPaperSize Number12Envelope Declaration public const PdfPaperSize Number12Envelope Field Value Type Description PdfPaperSize Number14Envelope Declaration public const PdfPaperSize Number14Envelope Field Value Type Description PdfPaperSize Number9Envelope Declaration public const PdfPaperSize Number9Envelope Field Value Type Description PdfPaperSize PersonalEnvelope Declaration public const PdfPaperSize PersonalEnvelope Field Value Type Description PdfPaperSize Prc16K Declaration public const PdfPaperSize Prc16K Field Value Type Description PdfPaperSize Prc16KRotated Declaration public const PdfPaperSize Prc16KRotated Field Value Type Description PdfPaperSize Prc32K Declaration public const PdfPaperSize Prc32K Field Value Type Description PdfPaperSize Prc32KBig Declaration public const PdfPaperSize Prc32KBig Field Value Type Description PdfPaperSize Prc32KBigRotated Declaration public const PdfPaperSize Prc32KBigRotated Field Value Type Description PdfPaperSize Prc32KRotated Declaration public const PdfPaperSize Prc32KRotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber1 Declaration public const PdfPaperSize PrcEnvelopeNumber1 Field Value Type Description PdfPaperSize PrcEnvelopeNumber10 Declaration public const PdfPaperSize PrcEnvelopeNumber10 Field Value Type Description PdfPaperSize PrcEnvelopeNumber10Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber10Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber1Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber1Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber2 Declaration public const PdfPaperSize PrcEnvelopeNumber2 Field Value Type Description PdfPaperSize PrcEnvelopeNumber2Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber2Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber3 Declaration public const PdfPaperSize PrcEnvelopeNumber3 Field Value Type Description PdfPaperSize PrcEnvelopeNumber3Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber3Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber4 Declaration public const PdfPaperSize PrcEnvelopeNumber4 Field Value Type Description PdfPaperSize PrcEnvelopeNumber4Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber4Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber5 Declaration public const PdfPaperSize PrcEnvelopeNumber5 Field Value Type Description PdfPaperSize PrcEnvelopeNumber5Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber5Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber6 Declaration public const PdfPaperSize PrcEnvelopeNumber6 Field Value Type Description PdfPaperSize PrcEnvelopeNumber6Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber6Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber7 Declaration public const PdfPaperSize PrcEnvelopeNumber7 Field Value Type Description PdfPaperSize PrcEnvelopeNumber7Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber7Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber8 Declaration public const PdfPaperSize PrcEnvelopeNumber8 Field Value Type Description PdfPaperSize PrcEnvelopeNumber8Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber8Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber9 Declaration public const PdfPaperSize PrcEnvelopeNumber9 Field Value Type Description PdfPaperSize PrcEnvelopeNumber9Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber9Rotated Field Value Type Description PdfPaperSize Quarto Declaration public const PdfPaperSize Quarto Field Value Type Description PdfPaperSize Standard10x11 Declaration public const PdfPaperSize Standard10x11 Field Value Type Description PdfPaperSize Standard10x14 Declaration public const PdfPaperSize Standard10x14 Field Value Type Description PdfPaperSize Standard11x17 Declaration public const PdfPaperSize Standard11x17 Field Value Type Description PdfPaperSize Standard12x11 Declaration public const PdfPaperSize Standard12x11 Field Value Type Description PdfPaperSize Standard15x11 Declaration public const PdfPaperSize Standard15x11 Field Value Type Description PdfPaperSize Standard9x11 Declaration public const PdfPaperSize Standard9x11 Field Value Type Description PdfPaperSize Statement Declaration public const PdfPaperSize Statement Field Value Type Description PdfPaperSize Tabloid Declaration public const PdfPaperSize Tabloid Field Value Type Description PdfPaperSize TabloidExtra Declaration public const PdfPaperSize TabloidExtra Field Value Type Description PdfPaperSize USStandardFanfold Declaration public const PdfPaperSize USStandardFanfold Field Value Type Description PdfPaperSize value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfRenderingEngine.html": {
    "href": "api/IronPdf.Rendering.PdfRenderingEngine.html",
    "title": "Class PdfRenderingEngine | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfRenderingEngine Specifies which \"HTML to PDF\" rendering engine to use. Inheritance System.Object PdfRenderingEngine Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfRenderingEngine : Enum Fields Chrome Recommended as our most capable, multithreaded and standards compliant rendering engine. Chooses the IronPDf embedded Chrome browser rendering engine. Declaration public const PdfRenderingEngine Chrome Field Value Type Description PdfRenderingEngine Default Chooses the first renderer in this list which is currently available at runtime. Declaration public const PdfRenderingEngine Default Field Value Type Description PdfRenderingEngine value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Security.html": {
    "href": "api/IronPdf.Security.html",
    "title": "Namespace IronPdf.Security | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Security Classes PdfEditSecurity Enumeration defining levels of PDF user access rights to edit a PDF. Edit rights may also be limited by the User's PDF document client software. See AllowUserEdits PdfPrintSecurity Enumeration defining levels of PDF user access rights to print a PDF. See AllowUserPrinting PdfSecuritySettings A class defining user security settings for a PDF document. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Implemented in SecuritySettings ."
  },
  "api/IronPdf.Security.PdfEditSecurity.html": {
    "href": "api/IronPdf.Security.PdfEditSecurity.html",
    "title": "Class PdfEditSecurity | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfEditSecurity Enumeration defining levels of PDF user access rights to edit a PDF. Edit rights may also be limited by the User's PDF document client software. See AllowUserEdits Inheritance System.Object PdfEditSecurity Namespace : IronPdf.Security Assembly : IronPdf.dll Syntax public sealed class PdfEditSecurity : Enum Fields EditAll The user may edit the PDF as allowed by their PDF client software. Declaration public const PdfEditSecurity EditAll Field Value Type Description PdfEditSecurity EditPages The user may re-arrange pages, rotate pages and manage PDF thumbnails, but may not otherwise edit the PDF unless they have the Owner password. Declaration public const PdfEditSecurity EditPages Field Value Type Description PdfEditSecurity NoEdit The user may not edit the PDF unless they have the Owner password. Declaration public const PdfEditSecurity NoEdit Field Value Type Description PdfEditSecurity value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Security.PdfPrintSecurity.html": {
    "href": "api/IronPdf.Security.PdfPrintSecurity.html",
    "title": "Class PdfPrintSecurity | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintSecurity Enumeration defining levels of PDF user access rights to print a PDF. See AllowUserPrinting Inheritance System.Object PdfPrintSecurity Namespace : IronPdf.Security Assembly : IronPdf.dll Syntax public sealed class PdfPrintSecurity : Enum Fields FullPrintRights Users may print the PDF without restriction. Declaration public const PdfPrintSecurity FullPrintRights Field Value Type Description PdfPrintSecurity NoPrint The user may not print the PDF unless they have the Owner password. Declaration public const PdfPrintSecurity NoPrint Field Value Type Description PdfPrintSecurity PrintLowQuality The user may only print the PDF at low resolution unless they have the Owner password. Declaration public const PdfPrintSecurity PrintLowQuality Field Value Type Description PdfPrintSecurity value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Security.PdfSecuritySettings.html": {
    "href": "api/IronPdf.Security.PdfSecuritySettings.html",
    "title": "Class PdfSecuritySettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfSecuritySettings A class defining user security settings for a PDF document. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Implemented in SecuritySettings . Inheritance System.Object PdfSecuritySettings Namespace : IronPdf.Security Assembly : IronPdf.dll Syntax public class PdfSecuritySettings : Object Properties AllowUserAnnotations Gets or sets the permissions for users to annotate the PDF document with comments. If AllowUserAnnotations is set false , the OwnerPassword must be set for the security measure to take effect. Declaration public bool AllowUserAnnotations { get; set; } Property Value Type Description System.Boolean true if users may annotate the PDF document, otherwise false . AllowUserCopyPasteContent Gets or sets the permissions for users to extract or 'copy & paste' content (text and images) from the PDF document. If AllowUserCopyPasteContent is set false , the OwnerPassword must also be set for the security measure to take effect. Declaration public bool AllowUserCopyPasteContent { get; set; } Property Value Type Description System.Boolean true if users may 'copy and paste' content out of the PDF otherwise, false . AllowUserCopyPasteContentForAccessibility Gets or sets the permissions for users to extract or 'copy & paste' content (text and images) from the PDF document for accessibility. Declaration public bool AllowUserCopyPasteContentForAccessibility { get; set; } Property Value Type Description System.Boolean true if users may 'copy and paste' content out of the PDF otherwise, false . AllowUserEdits Gets or sets the permissions for users edit the PDF document. The features to edit the document depends entirely on the PDF client software used by the end user. If editing rights are restricted, then the OwnerPassword must be set for the security measure to take effect. Declaration public PdfEditSecurity AllowUserEdits { get; set; } Property Value Type Description PdfEditSecurity The PdfEditSecurity value for user edit security. AllowUserFormData Gets or sets the permissions for users to fill-in (enter data into) forms in the PDF document. If AllowUserFormData is set false , the OwnerPassword must be set for the security measure to take effect. Note. If you want to make the form readonly in Adobe Acrobat Reader please call MakePdfDocumentReadOnly(String) method or set AllowUserEdits to NoEdit and set OwnerPassword . Declaration public bool AllowUserFormData { get; set; } Property Value Type Description System.Boolean true if users may annotate the PDF document, otherwise false . Setting AllowUserFormData true will also enable annotations. AllowUserPrinting Gets or sets the permissions for users to print the PDF document. If print rights are restricted, then the OwnerPassword must be set for the security measure to take effect. Declaration public PdfPrintSecurity AllowUserPrinting { get; set; } Property Value Type Description PdfPrintSecurity The PdfPrintSecurity value for user printing. OwnerPassword Sets the owner password and enables 128Bit encryption of PDF content. An owner password is one used to enable and disable all other security settings. OwnerPassword must be set to a non empty string value for AllowUserCopyPasteContent , AllowUserAnnotations , AllowUserFormData ,s AllowUserPrinting and AllowUserEdits to be restricted. Declaration public string OwnerPassword { get; set; } Property Value Type Description System.String UserPassword Sets the user password and enables 128Bit encryption of PDF content . A user password if a password that each user must enter to open or print the PDF document. Declaration public string UserPassword { get; set; } Property Value Type Description System.String Methods MakePdfDocumentReadOnly(String) Makes this PDF document read only such that: Content is encrypted at 128 bit. Copy and paste of content is disallowed. Annotations and form editing are disabled. Declaration public void MakePdfDocumentReadOnly(string OwnerPassword) Parameters Type Name Description System.String OwnerPassword The owner password for the PDF. A string for owner password is required to enable PDF encryption and all document security options. RemovePasswordsAndEncryption() Removes all user and owner password security for a PDF document. Also disables content encryption. Content is encrypted at 128 bit. Copy and paste of content is disallowed. Annotations and form editing are disabled. Declaration public void RemovePasswordsAndEncryption()"
  },
  "api/IronPdf.Signing.html": {
    "href": "api/IronPdf.Signing.html",
    "title": "Namespace IronPdf.Signing | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Signing Classes PdfSignature A class that represents a PDF signing certificate (.PFX or .p12) format which can be used to digitally sign a PDF. This protecting it from alteration."
  },
  "api/IronPdf.Signing.Inspection.html": {
    "href": "api/IronPdf.Signing.Inspection.html",
    "title": "Namespace IronPdf.Signing.Inspection | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Signing.Inspection Classes VerifiedSignature A class that represents a verified digital signature for a PDF document."
  },
  "api/IronPdf.Signing.Inspection.VerifiedSignature.html": {
    "href": "api/IronPdf.Signing.Inspection.VerifiedSignature.html",
    "title": "Class VerifiedSignature | C# PDF Library Documentation | IronPDF",
    "keywords": "Class VerifiedSignature A class that represents a verified digital signature for a PDF document. Inheritance System.Object VerifiedSignature Namespace : IronPdf.Signing.Inspection Assembly : IronPdf.dll Syntax public class VerifiedSignature : Object Properties SignatureName Gets the field name of the digital signature. Declaration public string SignatureName { get; } Property Value Type Description System.String SigningContact The contact person or email address for signing related inquiries (optional). Declaration public string SigningContact { get; } Property Value Type Description System.String SigningDate The date and time of the digital signature. Declaration public DateTime SigningDate { get; } Property Value Type Description System.DateTime SigningLocation The physical location the PDF was signed (optional). Declaration public string SigningLocation { get; } Property Value Type Description System.String SigningReason The reason the PDF was signed (optional). Declaration public string SigningReason { get; } Property Value Type Description System.String Valid true if the signature is valid, Declaration public bool Valid { get; } Property Value Type Description System.Boolean Methods ToString() Returns a string that represents the current digital signature for a PDF document. Declaration public override string ToString() Returns Type Description System.String A string that represents the current digital signature for a PDF document."
  },
  "api/IronPdf.Signing.PdfSignature.html": {
    "href": "api/IronPdf.Signing.PdfSignature.html",
    "title": "Class PdfSignature | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfSignature A class that represents a PDF signing certificate (.PFX or .p12) format which can be used to digitally sign a PDF. This protecting it from alteration. Inheritance System.Object PdfSignature Namespace : IronPdf.Signing Assembly : IronPdf.dll Syntax public class PdfSignature : Object Constructors PdfSignature(Byte[], String) Initializes a new instance of the PdfSignature class. Declaration public PdfSignature(byte[] CertificateRawData, string Password) Parameters Type Name Description System.Byte [] CertificateRawData The certificate as a binary data (byte array). System.String Password The certificate's password. PdfSignature(X509Certificate2) Initializes a new instance of the PdfSignature class. Declaration public PdfSignature(X509Certificate2 ExportableNativeCertificate) Parameters Type Name Description System.Security.Cryptography.X509Certificates.X509Certificate2 ExportableNativeCertificate The exportable native certificate as a System.Security.Cryptography.X509Certificates.X509Certificate2. PdfSignature(String, String) Initializes a new instance of the PdfSignature class using a .pfx or .p12 digital signature file. Declaration public PdfSignature(string FilePathToCertificate, string Password) Parameters Type Name Description System.String FilePathToCertificate The file path to certificate. System.String Password The certificate's password. Fields SignatureDate The date and time of the digital signature. If left null, the signature will be timestamped at the millisecond that the PdfDocument is saved to Disk or Stream. Declaration public Nullable<DateTime> SignatureDate Field Value Type Description System.Nullable < System.DateTime > SignatureImage A visual image for the sign, often a PNG of a human signature or company stamp (optional). This appends a visual signature in addition to cryptographic signing. LoadSignatureImageFromFile(String) LoadSignatureImageFromStream(Stream) Declaration public Image SignatureImage Field Value Type Description System.Drawing.Image SigningContact The contact person or email address for signing related inquiries (optional). Declaration public string SigningContact Field Value Type Description System.String SigningLocation The physical location the PDF was signed (optional). Declaration public string SigningLocation Field Value Type Description System.String SigningReason The reason the PDF was signed (optional). Declaration public string SigningReason Field Value Type Description System.String Methods LoadSignatureImageFromFile(String) Loads a signature image from an image file. This appends a visual signature in addition to cryptographic signing. Declaration public void LoadSignatureImageFromFile(string FilePath) Parameters Type Name Description System.String FilePath The file path. LoadSignatureImageFromStream(Stream) Loads a signature image from a stream. This appends visual signature in addition to cryptographic signing. Declaration public void LoadSignatureImageFromStream(Stream Stream) Parameters Type Name Description System.IO.Stream Stream The image file as a stream. SignPdfFile(String, Boolean, String, String) Signs an existing PDF file. Declaration public bool SignPdfFile(string PdfFilePath, bool RemoveOldSignatures = false, string UserPassword = null, string OwnerPassword = null) Parameters Type Name Description System.String PdfFilePath The PDF file path. System.Boolean RemoveOldSignatures if set to true old digital signatures are removed to ensure signing validity. System.String UserPassword Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional owner password if the PDF document is encrypted. Returns Type Description System.Boolean true if successful."
  },
  "api/IronPdf.TextHeaderFooter.html": {
    "href": "api/IronPdf.TextHeaderFooter.html",
    "title": "Class TextHeaderFooter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextHeaderFooter Defines PDF Header and Footer display options. TextHeaderFooter uses a logial apporach to rendering Headers and Footers for the most common use cases. Inheritance System.Object TextHeaderFooter Implements System.ICloneable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class TextHeaderFooter : Object Constructors TextHeaderFooter() Declaration public TextHeaderFooter() Properties CenterText Sets the centered header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string CenterText { get; set; } Property Value Type Description System.String DrawDividerLine Adds a horizontal line divider between the header / footer and the page content on every page of the PDF document. Declaration public bool DrawDividerLine { get; set; } Property Value Type Description System.Boolean FontSize Font size in px. Declaration public double FontSize { get; set; } Property Value Type Description System.Double LeftText Sets the left hand side header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string LeftText { get; set; } Property Value Type Description System.String RightText Sets the right hand side header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string RightText { get; set; } Property Value Type Description System.String Spacing Vertical spacing between the header and page content in millimeters. Declaration public double Spacing { get; set; } Property Value Type Description System.Double Methods Clone() Clones this instance. Declaration public object Clone() Returns Type Description System.Object System.Object of type SimpleHeaderFooter Implements System.ICloneable See Also IronPdf.HtmlHeaderFooter"
  }
}
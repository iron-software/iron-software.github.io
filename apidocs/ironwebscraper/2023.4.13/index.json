{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronWebscraper - The C# Web Scraping Library | C# Web Scraping API | IronWebScraper",
    "keywords": "IronWebscraper - The C# Web Scraping Library IronWebscraper is a C# web-scraper library, allowing developers to automate & simulate human browsing behavior to extract content, files & images from web applications as native .Net objects. Iron Web Scraper manages politeness & multithreading in the background, leaving a developerâ€™s own application easy to understand & maintain. Key Library Features: Iron Web Scraper can be used to migrate content from existing websites as well as build search indexes and monitor website structure & content changes. It's functionality includes: Read & extract structured content from web pages using html DOM, Javascript, Xpath, jQuery Style CSS Selectors. Fast multi threading allows hundreds of simultaneous requests. Politely avoid over stalling remote servers using IP/domain level throttling & optionally respecting robots.txt Manage multiple identities, DNS, proxies, user agents, request methods, custom headers, cookies & logins. Data exported from websites becomes native C# objects which can be stored or used immediately. Exceptions managed in all but the developers own code. Errors and captchas auto retried on failure Save, pause, resume, autosave scrape jobs. Built in web cache allows for action replay, crash recovery, and querying existing web scrape data. Change scrape logic on the fly, then replay job without internet traffic. Quickstart Guide: https://ironsoftware.com/csharp/webscraper/ Further Documentation Code Samples : https://ironsoftware.com/csharp/webscraper/examples/c-sharp-web-scraper Tutorials : https://ironsoftware.com/csharp/webscraper/tutorials/webscraping-in-c-sharp/ Nuget Package Manager : https://www.nuget.org/packages/IronWebScraper/ Support : developers@ironsoftware.com"
  },
  "api/IronWebScraper.CommonUserAgents.html": {
    "href": "api/IronWebScraper.CommonUserAgents.html",
    "title": "Class CommonUserAgents | C# Web Scraping API | IronWebScraper",
    "keywords": "Class CommonUserAgents Static helper class which lists common web-browser user-agent strings. Inheritance System.Object CommonUserAgents Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public static class CommonUserAgents : Object Fields ChromeDesktopUserAgents Common desktop Chrome web-browser user-agent strings, most popular first. Declaration public static string[] ChromeDesktopUserAgents Field Value Type Description System.String [] FireFoxDesktopUserAgents Common desktop FireFox web-browser user-agent strings, most popular first. Declaration public static string[] FireFoxDesktopUserAgents Field Value Type Description System.String [] IE11DesktopUserAgents Common IE11 desktop web-browser user-agent strings, most popular first. Only IE11 is listed for IE to give the best chance of consistent HTML being served. Declaration public static string[] IE11DesktopUserAgents Field Value Type Description System.String [] IPadUserAgents Common Apple iApd user agent strings. Declaration public static string[] IPadUserAgents Field Value Type Description System.String [] IPhoneUserAgents Common Apple iPhone user agent strings. Declaration public static string[] IPhoneUserAgents Field Value Type Description System.String [] SafariDesktopUserAgents Common OS X Safari web-browser user-agent strings, most popular first. Declaration public static string[] SafariDesktopUserAgents Field Value Type Description System.String [] WindowsTabletUserAgents Common Windows Tablet user-agent strings. Declaration public static string[] WindowsTabletUserAgents Field Value Type Description System.String [] Properties All Common desktop, tablet and mobile user-agent strings. Declaration public static string[] All { get; } Property Value Type Description System.String [] DesktopUserAgents Common desktop web-browser user-agent strings. Chrome, IE11 and Safari. Declaration public static string[] DesktopUserAgents { get; } Property Value Type Description System.String [] MobileUserAgents Common mobile web-browser user-agent strings. iPad, iPhone and Windows Tablet. Declaration public static string[] MobileUserAgents { get; } Property Value Type Description System.String []"
  },
  "api/IronWebScraper.html": {
    "href": "api/IronWebScraper.html",
    "title": "Namespace IronWebScraper | C# Web Scraping API | IronWebScraper",
    "keywords": "Namespace IronWebScraper Classes CommonUserAgents Static helper class which lists common web-browser user-agent strings. HtmlNode The HtmlNode class represents a single DOM element in a HTML or XML document. HtmlNodeExtensions Extension methods for finding elements within with IEnumerable<HtmlNode> HttpIdentity A class defining the browsing 'identity' to be used to fetch a given Url. Contains Proxy, UserAgent and Http Header information. License Allows IronWebScraper license keys to be applied globally across an application. MetaData A flexible dictionary of object values which can be used to attach your own additional data or objects to any Request. Meta can contain objects of any Type including instances of classes, List and Dictionaries. This meta-data can then be accessed while Paring the Response and even passed forwards to the next Request. Metadata send might include pagination page numbers, referrer Urls, User Ids etc. E.g: Request[\"page-number\"] = 2; int pageNumber = Response.Request.Meta.Get<int>(\"page-number\"); Request Represents a http request to be made by IronWebScraper Response Represents a http response made by IronWebScraper ScrapedData A flexible dictionary of object values used to conveniently store scraped data of any Type in a key-value dictionary which can be saved as JSON using the Yield method. ScrapedData can hold data objects of any Type, including Classes. E.g: var Data = new ScrapedData(); Data['title'] = \"Page Title\"; Data['date'] = DateTime.Now; WebScraper An easy to use base class which developers can extend to rapidly build custom web-scraping applications. WebScraper.LogLevel Level of WebScraper logging to the Console. Because this Enum is a Flag type options can be combined using a pipe: e.g. LogLevel.Critical | LogLevel.ScrapedData WebScraper.Throttle Throttle remote clients by their host name or by their public IP address."
  },
  "api/IronWebScraper.HtmlNode.html": {
    "href": "api/IronWebScraper.HtmlNode.html",
    "title": "Class HtmlNode | C# Web Scraping API | IronWebScraper",
    "keywords": "Class HtmlNode The HtmlNode class represents a single DOM element in a HTML or XML document. Inheritance System.Object HtmlNode Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public class HtmlNode : Object Properties Attributes Gets the attributes of the HTML node (such ash href, class, style etc). Declaration public Dictionary<string, string> Attributes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > The attributes as a Dictionary<string, string> ChildNodes An array of nodes nested within the HtmlNode. Declaration public HtmlNode[] ChildNodes { get; } Property Value Type Description HtmlNode [] InnerHtml Gets the HtmlNode's inner Html as a string. OuterHTML will not include the current tag's own html markup, only that nested inside it. Declaration public string InnerHtml { get; } Property Value Type Description System.String InnerText Gets the text content of the HtmlNode as might be shown to a user. Text will be trimmed, with all groups of whitespace turned into a single space character. Declaration public string InnerText { get; } Property Value Type Description System.String InnerTextClean Gets the text content of the HtmlNode as might be shown to a user. Declaration public string InnerTextClean { get; } Property Value Type Description System.String NodeName Name of the HtmlNode such as \"div\" \"p\" or \"#text\" Declaration public string NodeName { get; } Property Value Type Description System.String NodeType Type of the HtmlNode Possible values are: \"ELEMENT_NODE\", \"TEXT_NODE\" , \"CDATA_SECTION_NODE\", \"COMMENT_NODE\", \"DOCUMENT_NODE\", \"DOCUMENT_TYPE_NODE\" Declaration public string NodeType { get; } Property Value Type Description System.String OuterHtml Gets the HtmlNode's outer Html as a string. OuterHTML will include the tag's own html markup. Declaration public string OuterHtml { get; } Property Value Type Description System.String ParentNode Gets the Parent (enclosing) tag for this HtmlNode. Declaration public HtmlNode ParentNode { get; } Property Value Type Description HtmlNode The parent node as an HtmlNode. TextContent Gets the text content of the HtmlNode and all of its descendants. Declaration public string TextContent { get; } Property Value Type Description System.String TextContentClean Gets the text content of the HtmlNode, Trimmed, with all groups of whitespace turned into a single space character. TextContent will include the content of non-printable elements just as style and script nodes. Declaration public string TextContentClean { get; } Property Value Type Description System.String Methods Css(String) Uses CSS selectors to find all child nodes matching selector. This works in the same way as $('.ClassName') in jQuery or querySelectorAll() in JavaScript. Declaration public HtmlNode[] Css(string selector) Parameters Type Name Description System.String selector Returns Type Description HtmlNode [] CssExists(String) Uses CSS selectors to find if there are any matching nodes within the Response Document. This works in the same way as $('.ClassName').length > 0 in jQuery or querySelectorAll().length > 0 in JavaScript. Declaration public bool CssExists(string selector) Parameters Type Name Description System.String selector Returns Type Description System.Boolean Equals(Object) Method to assert if the object is equal to this HtmlNode Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean true if object is equal to this HtmlNode and false if not GetAttribute(String) Gets a single attribute vale from the HtmlNode. Returns null if that attribute is not present. Declaration public string GetAttribute(string Attribute) Parameters Type Name Description System.String Attribute Returns Type Description System.String GetElementById(String) Synonym of JavaScript's getElementById function. Searches inside the current HtmlNode. Declaration public HtmlNode GetElementById(string id) Parameters Type Name Description System.String id Returns Type Description HtmlNode GetElementsByTagName(String) Synonym of JavaScript's getElementsByTagName function. Searches inside the current HtmlNode. Declaration public HtmlNode[] GetElementsByTagName(string tagName) Parameters Type Name Description System.String tagName Returns Type Description HtmlNode [] GetHashCode() Method to get a HashCode of this HtmlNode Declaration public override int GetHashCode() Returns Type Description System.Int32 HasAtribute(String) Tests if the HtmlNode has a given attribute such as \"class\" or \"href\" Declaration public bool HasAtribute(string Attribute) Parameters Type Name Description System.String Attribute Returns Type Description System.Boolean QuerySelector(String) Synonym of JavaScript's querySelector function. Searches inside the current HtmlNode. Declaration public HtmlNode QuerySelector(string selector) Parameters Type Name Description System.String selector Returns Type Description HtmlNode QuerySelectorAll(String) Synonym of JavaScript's querySelectorAll function. Searches inside the current HtmlNode. Declaration public HtmlNode[] QuerySelectorAll(string selector) Parameters Type Name Description System.String selector Returns Type Description HtmlNode [] XPath(String) Queries the HtmlNode to return all descendant nodes matching an XPath expression. Declaration public HtmlNode[] XPath(string expression) Parameters Type Name Description System.String expression Returns Type Description HtmlNode []"
  },
  "api/IronWebScraper.HtmlNodeExtensions.html": {
    "href": "api/IronWebScraper.HtmlNodeExtensions.html",
    "title": "Class HtmlNodeExtensions | C# Web Scraping API | IronWebScraper",
    "keywords": "Class HtmlNodeExtensions Extension methods for finding elements within with IEnumerable<HtmlNode> Inheritance System.Object HtmlNodeExtensions Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public static class HtmlNodeExtensions : Object Methods ContainingText(IEnumerable<HtmlNode>, String) Returns all HtmlNodes in the collection that contain the search text. Declaration public static IEnumerable<HtmlNode> ContainingText(this IEnumerable<HtmlNode> nodes, string search) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlNode > nodes The nodes. System.String search The search string. Returns Type Description System.Collections.Generic.IEnumerable < HtmlNode > ContainingTextCaseInsensitive(IEnumerable<HtmlNode>, String) Returns all HtmlNodes in the collection that contain the search text. Case Insensitive. Declaration public static IEnumerable<HtmlNode> ContainingTextCaseInsensitive(this IEnumerable<HtmlNode> nodes, string search) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlNode > nodes The nodes. System.String search The search string. Returns Type Description System.Collections.Generic.IEnumerable < HtmlNode > CSS(IEnumerable<HtmlNode>, String) Searched multiple HtmlNodes for the given CSS Selector, and returns all distinct matches. Declaration public static HtmlNode[] CSS(this IEnumerable<HtmlNode> nodes, string selector) Parameters Type Name Description System.Collections.Generic.IEnumerable < HtmlNode > nodes HtmlNodes to search System.String selector A CSS query selector Returns Type Description HtmlNode []"
  },
  "api/IronWebScraper.HttpIdentity.html": {
    "href": "api/IronWebScraper.HttpIdentity.html",
    "title": "Class HttpIdentity | C# Web Scraping API | IronWebScraper",
    "keywords": "Class HttpIdentity A class defining the browsing 'identity' to be used to fetch a given Url. Contains Proxy, UserAgent and Http Header information. Inheritance System.Object HttpIdentity Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public class HttpIdentity : Object Constructors HttpIdentity() Declaration public HttpIdentity() Fields DefaultHttpRequestHeaders Default HTTP request headers to be assigned to every new identity. Declaration public static Dictionary<string, string> DefaultHttpRequestHeaders Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > HttpRequestHeaders The default headers which will be sent with all http Requests for this identity. Declaration public Dictionary<string, string> HttpRequestHeaders Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > NetworkDomain The network domain to be used for user authentication. Supports Windows, NTLM , Keroberos, Linux, BSD and Mac OS X networks. See also NetworkUsername, NetworkPassword Declaration public string NetworkDomain Field Value Type Description System.String NetworkPassword The network/http password to be used for user authentication. Supports Http , Windows networks, NTLM , Keroberos , Linux networks, BSD networks and Mac OS X networks. See also NetworkUsername, NetworkDomain Declaration public string NetworkPassword Field Value Type Description System.String NetworkUsername The network/http username to be used for user authentication. Supports Http , Windows networks, NTLM , Keroberos , Linux networks, BSD networks and Mac OS X networks. See also NetworkPassword, NetworkDomain Declaration public string NetworkUsername Field Value Type Description System.String Proxy A proxy string such as \"102.192.92.192:8088\" or \"username:password@102.192.92.192\" Declaration public string Proxy Field Value Type Description System.String UseCookies Stores a \"Cookie Jar\" which persists http cookies for this browser identity. Declaration public bool UseCookies Field Value Type Description System.Boolean UserAgent A default User-Agent header string. E.g: \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\". Find examples online at: http://www.useragentstring.com/pages/useragentstring.php Declaration public string UserAgent Field Value Type Description System.String Properties Cookies A \"Cookie Jar\" which persists http cookies for this browser identity. Declaration public CookieContainer Cookies { get; } Property Value Type Description System.Net.CookieContainer NetworkLoginCredential Returns the System.Net.NetworkCredential which will be used on for networks and http authentication (Supports: Windows / NTLM / Keroberos / Linux / BSD / Mac) Declaration public NetworkCredential NetworkLoginCredential { get; } Property Value Type Description System.Net.NetworkCredential ProxyFailureCount Gets the number of times this proxy has failed. Declaration public int ProxyFailureCount { get; } Property Value Type Description System.Int32 The proxy failure count."
  },
  "api/IronWebScraper.License.html": {
    "href": "api/IronWebScraper.License.html",
    "title": "Class License | C# Web Scraping API | IronWebScraper",
    "keywords": "Class License Allows IronWebScraper license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronWebScraper is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in LicenseKey property, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironsoftware.com/csharp/webscraper/licensing/ and https://ironsoftware.com/csharp/webscraper/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean true if the license key given is valid. LicenseKey Get Licensed at https://ironsoftware.com/csharp/webscraper/licensing/ For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronWebScraper.LicenseKey\" value=\"IRONWEBSCRAPER-LICENSE-KEY\"/> within the appSettings node. See https://ironsoftware.com/csharp/webscraper/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronWebScraper.LicenseKey\" and the value is a valid IronWebScraper trial or full license key. See https://ironsoftware.com/csharp/webscraper/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods IsValidLicense(String) Determines whether a string license key is valid. See https://ironsoftware.com/csharp/webscraper/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string licenseKey) Parameters Type Name Description System.String licenseKey IronWebScraper license key as a string Returns Type Description System.Boolean true if the license key given is valid."
  },
  "api/IronWebScraper.MetaData.html": {
    "href": "api/IronWebScraper.MetaData.html",
    "title": "Class MetaData | C# Web Scraping API | IronWebScraper",
    "keywords": "Class MetaData A flexible dictionary of object values which can be used to attach your own additional data or objects to any Request. Meta can contain objects of any Type including instances of classes, List and Dictionaries. This meta-data can then be accessed while Paring the Response and even passed forwards to the next Request. Metadata send might include pagination page numbers, referrer Urls, User Ids etc. E.g: Request[\"page-number\"] = 2; int pageNumber = Response.Request.Meta.Get<int>(\"page-number\"); Inheritance System.Object MetaData Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public class MetaData : Dictionary<string, object> Constructors MetaData() Declaration public MetaData() Methods Get<T>(String) Returns the specified meta object cast as the appropriate type. E.g: Get<int>(\"index\") Declaration public T Get<T>(string key) Parameters Type Name Description System.String key Key Returns Type Description T Type Parameters Name Description T Type Exceptions Type Condition System.Collections.Generic.KeyNotFoundException"
  },
  "api/IronWebScraper.Request.html": {
    "href": "api/IronWebScraper.Request.html",
    "title": "Class Request | C# Web Scraping API | IronWebScraper",
    "keywords": "Class Request Represents a http request to be made by IronWebScraper Inheritance System.Object Request Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public class Request : Object Constructors Request() Declaration public Request() Fields Action The Action<Response> which will be used to parse the response. See IronWebScraper.Parse. Declaration public Action<Response> Action Field Value Type Description System.Action < Response > Identity An HttpIdentity comprising Proxy, Headers, UserAgnet etc.. which will be used to fetch the Request. Declaration public HttpIdentity Identity Field Value Type Description HttpIdentity MetaData Allows additional meta-data of any Type to be attached to a request, and retrieved when the subsequent Response is parsed. Declaration public MetaData MetaData Field Value Type Description MetaData Properties Method Http Request method. Declaration public string Method { get; } Property Value Type Description System.String \"GET\" or \"POST\" Retries Number of attempts which have been made to fetch content from this Request so far. Declaration public int Retries { get; } Property Value Type Description System.Int32 Url Absolute URL to be scraped. Declaration public string Url { get; set; } Property Value Type Description System.String Methods Hash(Request) Hashing function for uniquely identifying web requests. Declaration public static string Hash(Request Request) Parameters Type Name Description Request Request A Request object Returns Type Description System.String"
  },
  "api/IronWebScraper.Response.html": {
    "href": "api/IronWebScraper.Response.html",
    "title": "Class Response | C# Web Scraping API | IronWebScraper",
    "keywords": "Class Response Represents a http response made by IronWebScraper Inheritance System.Object Response Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public class Response : Object Constructors Response() Declaration public Response() Fields CharSet Name of the charset used to encode the web resource. When reading TextConent, the result has already been decoded to C# default encoding (utf-8) on your behalf. Declaration public string CharSet Field Value Type Description System.String CretaedFromWebCache True if the Response was created from a cached version of the Url rather than from live data. See WebScraper.EnableWebCache() method, which is can be called from within the WebScraper.Init() method. Declaration public bool CretaedFromWebCache Field Value Type Description System.Boolean FinalUrl The Url from which the Response was returned. This may differ from RequestlUrl if these was an http redirect. Declaration public string FinalUrl Field Value Type Description System.String MimeType The MIME type of the Response content. E.g: \"text/html\" Declaration public string MimeType Field Value Type Description System.String Request The Request from which the Response was created. Declaration public Request Request Field Value Type Description Request StatusCode The http status code given by the url which as 200 or 404. 0 is returned in case the server is uncontactable. Declaration public int StatusCode Field Value Type Description System.Int32 Properties BinaryContent The content downloaded from the Url as raw binary data Declaration public byte[] BinaryContent { get; } Property Value Type Description System.Byte [] Document Returns an HtmlNode for the entire Response Document. (HTML/XML) Declaration public HtmlNode Document { get; } Property Value Type Description HtmlNode Html Synonym of content which checks for an Html content Declaration public string Html { get; } Property Value Type Description System.String The HTML. Exceptions Type Condition System.FormatException Document does not have an HTML mime type or contain a <body> or <html> tag MetaData Returns additional meta-data which was attached to the Request. Declaration public MetaData MetaData { get; } Property Value Type Description MetaData RequestlUrl The Url from which the Response was requested. This may differ from FinalUrl if these was an http redirect. Declaration public string RequestlUrl { get; } Property Value Type Description System.String TextContent The content downloaded from the Url encoded as a String. Declaration public string TextContent { get; } Property Value Type Description System.String WasSuccessful Gets a value indicating whether this HTTP request yielded a successful response code. Declaration public bool WasSuccessful { get; } Property Value Type Description System.Boolean true if the response was successful; otherwise, false . Methods Css(String) Uses CSS selectors to find all matching nodes within the Response Document. This works in the same way as $('.ClassName') in jQuery or querySelectorAll() in JavaScript. Declaration public HtmlNode[] Css(string selector) Parameters Type Name Description System.String selector Returns Type Description HtmlNode [] CssExists(String) Uses CSS selectors to find if there are any matching nodes within the Response Document. This works in the same way as $('.ClassName').length > 0 in jQuery or querySelectorAll().length > 0 in JavaScript. Declaration public bool CssExists(string selector) Parameters Type Name Description System.String selector Returns Type Description System.Boolean GetElementById(String) Synonym of JavaScript's getElementById function. Searches inside the response as an HTML or XML Document by ID attribute. Declaration public HtmlNode GetElementById(string id) Parameters Type Name Description System.String id Returns Type Description HtmlNode GetElementsByTagName(String) Synonym of JavaScript's getElementById function. Searches inside the response as an HTML or XML Document by tag-name such as \"a\" or \"img\". Declaration public HtmlNode[] GetElementsByTagName(string tagName) Parameters Type Name Description System.String tagName Returns Type Description HtmlNode [] QuerySelector(String) Synonym of JavaScript's querySelector function. Searches inside the Response document as an HTML or XML Document using CSS selectors. Declaration public HtmlNode QuerySelector(string selector) Parameters Type Name Description System.String selector Returns Type Description HtmlNode QuerySelectorAll(String) Synonym of JavaScript's querySelectorAll function. Searches inside the response document as an HTML or XML Document using CSS selectors. Declaration public HtmlNode[] QuerySelectorAll(string selector) Parameters Type Name Description System.String selector Returns Type Description HtmlNode [] ToAbsoluteUrl(IEnumerable<String>) Makes any relative url strings absolute relative to this Response Document. Declaration public IEnumerable<string> ToAbsoluteUrl(IEnumerable<string> urls) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > urls Returns Type Description System.Collections.Generic.IEnumerable < System.String > ToAbsoluteUrl(String) Makes a relative url strings absolute relative to this Response Document. Declaration public string ToAbsoluteUrl(string url) Parameters Type Name Description System.String url Returns Type Description System.String XPath(String) Searches inside the response as an HTML/XML Document using an XPath expression. Declaration public HtmlNode[] XPath(string expression) Parameters Type Name Description System.String expression Returns Type Description HtmlNode []"
  },
  "api/IronWebScraper.ScrapedData.html": {
    "href": "api/IronWebScraper.ScrapedData.html",
    "title": "Class ScrapedData | C# Web Scraping API | IronWebScraper",
    "keywords": "Class ScrapedData A flexible dictionary of object values used to conveniently store scraped data of any Type in a key-value dictionary which can be saved as JSON using the Yield method. ScrapedData can hold data objects of any Type, including Classes. E.g: var Data = new ScrapedData(); Data['title'] = \"Page Title\"; Data['date'] = DateTime.Now; Inheritance System.Object ScrapedData Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public class ScrapedData : Dictionary<string, object> Constructors ScrapedData() Declaration public ScrapedData() Methods FromJson(String) Deserializes a ScrapedData object from JSON created using the toJson() method. Declaration public static ScrapedData FromJson(string json) Parameters Type Name Description System.String json Returns Type Description ScrapedData Get<T>(String) Returns the specified ScrapedData item cast as the appropriate type. E.g: Get<string>(\"url\"); Declaration public T Get<T>(string key) Parameters Type Name Description System.String key Key Returns Type Description T Type Parameters Name Description T Type Exceptions Type Condition System.Collections.Generic.KeyNotFoundException ToJson() Converts the ScrapedData to a JSON string. Declaration public string ToJson() Returns Type Description System.String"
  },
  "api/IronWebScraper.Urls.html": {
    "href": "api/IronWebScraper.Urls.html",
    "title": "Namespace IronWebScraper.Urls | C# Web Scraping API | IronWebScraper",
    "keywords": "Namespace IronWebScraper.Urls Classes UrlMatchPatternCollection A class used for control URL, Domain and File type access using positive and negative wild-card(*?) and Regex rules."
  },
  "api/IronWebScraper.Urls.UrlMatchPatternCollection.html": {
    "href": "api/IronWebScraper.Urls.UrlMatchPatternCollection.html",
    "title": "Class UrlMatchPatternCollection | C# Web Scraping API | IronWebScraper",
    "keywords": "Class UrlMatchPatternCollection A class used for control URL, Domain and File type access using positive and negative wild-card(*?) and Regex rules. Inheritance System.Object UrlMatchPatternCollection Namespace : IronWebScraper.Urls Assembly : IronWebScraper.dll Syntax public class UrlMatchPatternCollection : List<Regex> Constructors UrlMatchPatternCollection() Declaration public UrlMatchPatternCollection() Methods Add(String) Adds a match pattern using strings with wild-card. ? matches exactly 1 character * matches exactly zero to any number of characters Declaration public void Add(string WildCardPattern) Parameters Type Name Description System.String WildCardPattern The wild-card pattern. Add(String[]) Adds multiple match patterns using strings with wild-card. ? matches exactly 1 character * matches exactly zero to any number of characters Declaration public void Add(params string[] WildCardPatterns) Parameters Type Name Description System.String [] WildCardPatterns The wild-card patterns."
  },
  "api/IronWebScraper.WebScraper.html": {
    "href": "api/IronWebScraper.WebScraper.html",
    "title": "Class WebScraper | C# Web Scraping API | IronWebScraper",
    "keywords": "Class WebScraper An easy to use base class which developers can extend to rapidly build custom web-scraping applications. Inheritance System.Object WebScraper Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public abstract class WebScraper : Object Constructors WebScraper() Declaration protected WebScraper() Fields AllowedDomains If not empty, all requested Urls' hostname must match at least one of the AllowedDomains patterns. Patterns may be added using glob wildcard strings or Regex Declaration public UrlMatchPatternCollection AllowedDomains Field Value Type Description UrlMatchPatternCollection AllowedUrls If not empty, all requested Urls must match at least one of the AllowedUrls patterns. Patterns may be added using glob wildcard strings or Regex Declaration public UrlMatchPatternCollection AllowedUrls Field Value Type Description UrlMatchPatternCollection BannedDomains If not empty, no requested Urls' hostname may match any of the BannedDomains patterns. Patterns may be added using glob wildcard strings or Regex Declaration public UrlMatchPatternCollection BannedDomains Field Value Type Description UrlMatchPatternCollection BannedUrls If not empty, no requested Urls may match any of the BannedUrls patterns. Patterns may be added using glob wildcard strings or Regex Declaration public UrlMatchPatternCollection BannedUrls Field Value Type Description UrlMatchPatternCollection CrawlId A unique string used to identify a crawl job. Declaration public string CrawlId Field Value Type Description System.String FilesDownloaded The total number of files downloaded successfully with the DownloadImage and DownloadFile methods. Declaration public int FilesDownloaded Field Value Type Description System.Int32 Identities A list of http identities to be used to fetch web resources. Each Identity may have a different proxy IP addresses, userAgent, http headers, persistent cookies, username and password. Best practice is to create Identities in your WebScraper.Init Method and Add them to this WebScraper.Identities List. Declaration public List<HttpIdentity> Identities Field Value Type Description System.Collections.Generic.List < HttpIdentity > LoggingLevel The level of logging made by the WebScraper engine to the Console. LogLevel.Critical is normally the most useful setting, allowing the developer to write their own, meaningful and application relevant messages inside of Parse methods. LogLevel.ScrapedData is useful when coding and testing a new WebScraper. Declaration public WebScraper.LogLevel LoggingLevel Field Value Type Description WebScraper.LogLevel ObeyRobotsDotTxt Causes the WebScraper to always obey /robots.txt directives including url and path restrictions and crawl rates. Declaration public bool ObeyRobotsDotTxt Field Value Type Description System.Boolean WorkingDirectory Path to a local directory where scraped data and state information will be saved. Declaration public string WorkingDirectory Field Value Type Description System.String Properties FailedUrls Gets the number of failed http requests which have exceeded their total maximum number of retries. Declaration public int FailedUrls { get; } Property Value Type Description System.Int32 HttpRetryAttempts The number of times WebScraper will retry a failed URL (normally with a new identity) before considering it non-scrapable. Declaration public int HttpRetryAttempts { get; set; } Property Value Type Description System.Int32 HttpTimeOut Gets or the time after-which a HTTP request will be considered failed or lost. (non-contactable or Dns unavailable) Declaration public TimeSpan HttpTimeOut { get; set; } Property Value Type Description System.TimeSpan MaxHttpConnectionLimit Gets or sets the total number of allowed open HTTP requests (threads) Declaration public int MaxHttpConnectionLimit { get; set; } Property Value Type Description System.Int32 OpenConnectionLimitPerHost Gets or sets the allowed number of concurrent HTTP requests (threads) per hostname or IP address. This helps protect hosts against too many requests. Declaration public int OpenConnectionLimitPerHost { get; set; } Property Value Type Description System.Int32 RateLimitPerHost Gets or sets minimum polite delay (pause) between request to a given domain or IP address. Declaration public TimeSpan RateLimitPerHost { get; set; } Property Value Type Description System.TimeSpan SuccessfulFileDownloadCount Gets the number of successful http downloads using the DownloadFile and DownloadImage methods.. Declaration public int SuccessfulFileDownloadCount { get; } Property Value Type Description System.Int32 SuccessfulfulRequestCount Gets the number of successful http requests. Declaration public int SuccessfulfulRequestCount { get; } Property Value Type Description System.Int32 ThrottleMode Makes the WebSraper intelligently throttle requests not only by hostname, but also by host servers' IP addresses. This is polite in-case multiple scraped domains are hosted on the same machine. Declaration public WebScraper.Throttle ThrottleMode { get; set; } Property Value Type Description WebScraper.Throttle true if we wish to look up hosts' IP addresses for throttling; otherwise, false . Methods AcceptUrl(String) Decides if the WebScraper will accept a given url. My be overridden to apply custom middleware logic. Declaration public virtual bool AcceptUrl(string url) Parameters Type Name Description System.String url Returns Type Description System.Boolean ChooseIdentityForRequest(Request) Picks a random identity from WebScraper.Identities for each request. Add Identities with proxy IP addresses, userAgents, headers, cookies, username and password in your Init Method and add them to the WebScraper.Identities List; Override this method to create your own logic for non-random selection of a HttpIdentity for each request. Declaration public virtual HttpIdentity ChooseIdentityForRequest(Request request) Parameters Type Name Description Request request The http Request Returns Type Description HttpIdentity An HttpIdentity DownloadFile(String, String, Boolean, HttpIdentity) Requests a file to be downloaded from the given Url to the local file-system. Often used for scraping documents, assets and images. Normally called with an Parse Method of IronWebScraper.WebScraper Declaration public virtual string DownloadFile(string url, string path, bool overWrite = false, HttpIdentity identity = null) Parameters Type Name Description System.String url The absolute url of the resource to be downloaded. System.String path The path to which the downloaded file should be saved. You may give a directory name or a file name. Relative paths will be resolved relative to WorkingDirectory. System.Boolean overWrite If set to true any existing file at the given path will be overwritten. If set to false a unique name such as \"file(1).html\" will be created in the case of a naming conflict. HttpIdentity identity An HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. Returns Type Description System.String The file path (relative to WorkingDirecory) which the file will be saved to. DownloadFile(Uri, String, Boolean, HttpIdentity) Requests a file to be downloaded from the given Url to the local file-system. Often used for scraping documents, assets and images. Normally called with an Parse Method of IronWebScraper.WebScraper Declaration public virtual string DownloadFile(Uri uri, string path, bool overWrite = false, HttpIdentity identity = null) Parameters Type Name Description System.Uri uri The absolute uri of the resource to be downloaded. System.String path The path to which the downloaded file should be saved. You may give a directory name or a file name. Relative paths will be resolved relative to WorkingDirectory. System.Boolean overWrite If set to true any existing file at the given path will be overwritten. If set to false a unique name such as \"file(1).html\" will be created in the case of a naming conflict. HttpIdentity identity An HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. Returns Type Description System.String The file path (relative to WorkingDirecory) which the file will be saved to. DownloadFileUnique(String, String, HttpIdentity) Much like DownloadFile except if the file has already been downloaded or exists locally, it will not be re-downloaded. Requests a file to be downloaded from the given Url to the local file-system. Often used for scraping documents, assets and images. Normally called with an Parse Method of IronWebScraper.WebScraper Declaration public virtual string DownloadFileUnique(string url, string path, HttpIdentity identity = null) Parameters Type Name Description System.String url The URL. System.String path The path. HttpIdentity identity The identity. Returns Type Description System.String DownloadImage(String, String, Int32, Int32, Boolean, HttpIdentity) Requests a file to be downloaded from the given Url to the local file-system. Often used for scraping documents, assets and images. Normally called with an Parse Method of IronWebScraper.WebScraper Declaration public virtual string DownloadImage(string url, string path, int maxWidth = 0, int maxHeight = 0, bool overWrite = false, HttpIdentity identity = null) Parameters Type Name Description System.String url The absolute url of the resource to be downloaded. System.String path The path to which the downloaded file should be saved. You may give a directory name or a file name. Relative paths will be resolved relative to WorkingDirectory. System.Int32 maxWidth The Downloaded image will be scaled proportionally to this maximum width. Zero means no constraint. System.Int32 maxHeight The Downloaded image will be scaled proportionally to this maximum height. Zero means no constraint. System.Boolean overWrite If set to true any existing file at the given path will be overwritten. If set to false a unique name such as \"file(1).html\" will be created in the case of a naming conflict. HttpIdentity identity An HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. Returns Type Description System.String The file path (relative to WorkingDirecory) which the image will be saved to. DownloadImage(Uri, String, Int32, Int32, Boolean, HttpIdentity) Requests a file to be downloaded from the given Url to the local file-system. Often used for scraping documents, assets and images. Normally called with an Parse Method of IronWebScraper.WebScraper Declaration public virtual string DownloadImage(Uri uri, string path, int maxWidth = 0, int maxHeight = 0, bool overWrite = false, HttpIdentity identity = null) Parameters Type Name Description System.Uri uri The absolute uri of the resource to be downloaded. System.String path The path to which the downloaded file should be saved. You may give a directory name or a file name. Relative paths will be resolved relative to WorkingDirectory. System.Int32 maxWidth The Downloaded image will be scaled proportionally to this maximum width. Zero means no constraint. System.Int32 maxHeight The Downloaded image will be scaled proportionally to this maximum height. Zero means no constraint. System.Boolean overWrite If set to true any existing file at the given path will be overwritten. If set to false a unique name such as \"file(1).html\" will be created in the case of a naming conflict. HttpIdentity identity An HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. Returns Type Description System.String The file path (relative to WorkingDirecory) which the image will be saved to. EnableWebCache() Caches web http responses for reuse. This allows WebScraper classes to be modified and restarted without re-downloading previously scraped urls. Declaration public void EnableWebCache() EnableWebCache(TimeSpan) Caches web http responses for reuse. This allows WebScraper classes to be modified and restarted without re-downloading previously scrape urls. Declaration public void EnableWebCache(TimeSpan cacheDuration) Parameters Type Name Description System.TimeSpan cacheDuration Duration that responses will be cached for. FetchUrlContents(String, HttpIdentity) A handy shortcut method that fetches the text content from any Url (synchronously). Declaration public static string FetchUrlContents(string url, HttpIdentity identity = null) Parameters Type Name Description System.String url The absolute URL. HttpIdentity identity OPtional HTTP identity to choose a proxy, user agent, headers, username and password for the request. Returns Type Description System.String FetchUrlContentsBinary(String, HttpIdentity) A handy shortcut method that fetches the text content from any Url (synchronously) as a binary data in a byye array (byte[]) Declaration public byte[] FetchUrlContentsBinary(string url, HttpIdentity identity = null) Parameters Type Name Description System.String url The absolute URL. HttpIdentity identity OPtional HTTP identity to choose a proxy, user agent, headers, username and password for the request. Returns Type Description System.Byte [] Init() Override this method initialize your web-scraper. Important tasks will be to Request at least one start url... and set allowed/banned domain or url patterns. Declaration public abstract void Init() Log(String, WebScraper.LogLevel) Logs the specified message to the console. Logs can be Enabled using the EnableLogging. This function has been exposed and is over-ridable to allow for easy Email and Slack notification integration. Declaration public virtual void Log(string Message, WebScraper.LogLevel Type) Parameters Type Name Description System.String Message The string message. WebScraper.LogLevel Type The LogLevel. ObeyRobotsDotTxtForHost(String) Causes the WebScraper to always obey /robots.txt directives including path restrictions and crawl rates on a domain by domain basis. May be overridden for advanced control. Declaration public virtual bool ObeyRobotsDotTxtForHost(string Host) Parameters Type Name Description System.String Host Returns Type Description System.Boolean Parse(Response) Override this method to create the default Response handler for your web scraper. If you have multiple page types, you can add additional similar methods. Declaration public abstract void Parse(Response response) Parameters Type Name Description Response response The http Response object to parse PostRequest(String, Action<Response>, Dictionary<String, String>) Request adds a new request to the scrape-job queue using the POST http method. Declaration public virtual void PostRequest(string url, Action<Response> parse, Dictionary<string, string> postVaraibles) Parameters Type Name Description System.String url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) System.Collections.Generic.Dictionary < System.String , System.String > postVaraibles The POST variables as a dictionary of key-value pairs. PostRequest(String, Action<Response>, Dictionary<String, String>, HttpIdentity, MetaData) Request adds a new request to the scrape-job queue using the POST http method. Declaration public virtual void PostRequest(string url, Action<Response> parse, Dictionary<string, string> postVaraibles, HttpIdentity identity = null, MetaData metaData = null) Parameters Type Name Description System.String url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) System.Collections.Generic.Dictionary < System.String , System.String > postVaraibles The POST variables as a dictionary of key-value pairs. HttpIdentity identity An optional HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. PostRequest(String, Action<Response>, Dictionary<String, String>, MetaData) Request adds a new request to the scrape-job queue using the POST http method. Declaration public virtual void PostRequest(string url, Action<Response> parse, Dictionary<string, string> postVaraibles, MetaData metaData) Parameters Type Name Description System.String url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) System.Collections.Generic.Dictionary < System.String , System.String > postVaraibles The POST variables as a dictionary of key-value pairs. MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. PostRequest(Uri, Action<Response>, Dictionary<String, String>) Request adds a new request to the scrape-job queue using the POST http method. Declaration public virtual void PostRequest(Uri url, Action<Response> parse, Dictionary<string, string> postVaraibles) Parameters Type Name Description System.Uri url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) System.Collections.Generic.Dictionary < System.String , System.String > postVaraibles The POST variables as a dictionary of key-value pairs. PostRequest(Uri, Action<Response>, Dictionary<String, String>, HttpIdentity, MetaData) Request adds a new request to the scrape-job queue using the POST http method. Declaration public virtual void PostRequest(Uri url, Action<Response> parse, Dictionary<string, string> postVaraibles, HttpIdentity identity = null, MetaData metaData = null) Parameters Type Name Description System.Uri url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) System.Collections.Generic.Dictionary < System.String , System.String > postVaraibles The POST variables as a dictionary of key-value pairs. HttpIdentity identity An optional HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. PostRequest(Uri, Action<Response>, Dictionary<String, String>, MetaData) Request adds a new request to the scrape-job queue using the POST http method. Declaration public virtual void PostRequest(Uri url, Action<Response> parse, Dictionary<string, string> postVaraibles, MetaData metaData) Parameters Type Name Description System.Uri url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) System.Collections.Generic.Dictionary < System.String , System.String > postVaraibles The POST variables as a dictionary of key-value pairs. MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. Request(IEnumerable<String>, Action<Response>) A key method called from with the Init and Parse Methods. Request adds new requests to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(IEnumerable<string> urls, Action<Response> parse) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > urls The Absolute url or urls to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) Request(String, Action<Response>) A key method called from with the Init and Parse Methods. Request adds a new request to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(string url, Action<Response> parse) Parameters Type Name Description System.String url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) Request(String, Action<Response>, HttpIdentity, MetaData) A key method called from with the Init and Parse Methods. Request adds a new request to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(string url, Action<Response> parse, HttpIdentity identity = null, MetaData metaData = null) Parameters Type Name Description System.String url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) HttpIdentity identity An HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. Request(String, Action<Response>, MetaData) A key method called from with the Init and Parse Methods. Request adds a new request to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(string url, Action<Response> parse, MetaData metaData) Parameters Type Name Description System.String url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. Request(Uri, Action<Response>) A key method called from with the Init and Parse Methods. Request adds a new request to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(Uri url, Action<Response> parse) Parameters Type Name Description System.Uri url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) Request(Uri, Action<Response>, HttpIdentity, MetaData) A key method called from with the Init and Parse Methods. Request adds a new request to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(Uri url, Action<Response> parse, HttpIdentity identity = null, MetaData metaData = null) Parameters Type Name Description System.Uri url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) HttpIdentity identity An HttpIdentity to send the Request. If null, the ChooseIdentityForRequest method will be used to find a suitable identity. MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. Request(Uri, Action<Response>, MetaData) A key method called from with the Init and Parse Methods. Request adds a new request to the scrape-job queue, and decides which method (e.g. Parse) will be used to parse the Response object. Declaration public virtual void Request(Uri url, Action<Response> parse, MetaData metaData) Parameters Type Name Description System.Uri url The absolute url to be fetched. Developers may use Response.ToAbsoluteUrl to resolve all relative links to Absolute Url strings. System.Action < Response > parse The method to be used to parse the Response (often this is WebScraper.Parse) MetaData metaData Additional information of any Type can be sent with the request and then re-read when the response is parsed. Retry(Response) Retries a Response. Usually called in a Parse method, this method is useful if a Captcha or error screen was encountered during Html parsing. Declaration public void Retry(Response Response) Parameters Type Name Description Response Response Scrape(Object, String) Appends any scraped data to a file in the JsonLines format. (1 json object per line). Will save any .Net object of any kind. This method is typically used with IronWebScraper.ScrapedData or developer defined classes for scraped data items. The default filename will follow the pattern \"NameSpace.TypeName.jsonl\". E.g: IronWebScraper.ScrapedData.jsonl Declaration public void Scrape(object Item, string fileName = null) Parameters Type Name Description System.Object Item System.String fileName ScrapeUnique(Object, String) Appends scraped data to a file in the JsonLines format. (1 json object per line). Automatically ignores duplicates. Will save any .Net object of any kind. This method is typically used with IronWebScraper.ScrapedData or developer defined classes for scraped data items. The default filename will follow the pattern \"WorkingDirecory/NameSpace.TypeName.jsonl\". E.g: Scrape/IronWebScraper.ScrapedData.jsonl Declaration public void ScrapeUnique(object Item, string fileName = null) Parameters Type Name Description System.Object Item System.String fileName SetSiteSpecificCrawlRateLimit(String, TimeSpan) Set a throttle limit for a specific domain Declaration public void SetSiteSpecificCrawlRateLimit(string hostName, TimeSpan crawlRate) Parameters Type Name Description System.String hostName The http host (domain name). System.TimeSpan crawlRate The maximum frequency of http requests for the given hostName. Start(String) Starts the WebScraper. Set CrawlId to make this crawl resumable. Will also resume a previous scrawl with the same CrawlId if it exists. Giving a CrawlId also causes the WebScraper to auto-save its state every 5 minutes in case of a crash, system failure or power outage. This feature is particularly useful for long running web-scraping tasks, allowing hours, days or even weeks of work to be recovered effortlessly. Declaration public void Start(string CrawlId = null) Parameters Type Name Description System.String CrawlId StartAsync(String) Starts the WebScraper Asynchronously. Set CrawlId to make this crawl resumable. Will resume a previous scrawl with the same CrawlId if it exists. Declaration public Task StartAsync(string CrawlId = null) Parameters Type Name Description System.String CrawlId Returns Type Description System.Threading.Tasks.Task Stop() Stops this WebScraper instance graceful. The WebScraper may be restated later with no loss of data by calling Start(CrawlId) or StartAsync(CrawlId) Declaration public void Stop() UnScrape(Boolean) Retrieves IronWebScraper.ScrapedData objects which were saved using the WebScraper.Scrape method. Declaration public IEnumerable<ScrapedData> UnScrape(bool IgnoreErrors) Parameters Type Name Description System.Boolean IgnoreErrors if set to true any objects that cant be cast to the specified Type T will be ignored.. Returns Type Description System.Collections.Generic.IEnumerable < ScrapedData > UnScrape(String, Boolean) Retrieves IronWebScraper.ScrapedData objects which were saved using the WebScraper.Scrape method. Declaration public IEnumerable<ScrapedData> UnScrape(string fileName = null, bool IgnoreErrors = false) Parameters Type Name Description System.String fileName Path of the saved data file. System.Boolean IgnoreErrors if set to true any objects that cant be cast to the specified Type T will be ignored.. Returns Type Description System.Collections.Generic.IEnumerable < ScrapedData > UnScrape<T>(Boolean) Retrieves native C# objects which were saved using the WebScraper.Scrape method in the JsonLines format. Declaration public IEnumerable<T> UnScrape<T>(bool IgnoreErrors) Parameters Type Name Description System.Boolean IgnoreErrors if set to true any objects that cant be cast to the specified Type T will be ignored.. Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T The Type of object to be returned. Giving no value will return an IEnumberable of IronWebScraper.ScrapedData UnScrape<T>(String, Boolean) Retrieves native C# objects which were saved using the WebScraper.Scrape method in the JsonLines format. Declaration public IEnumerable<T> UnScrape<T>(string fileName = null, bool IgnoreErrors = false) Parameters Type Name Description System.String fileName Path of the saved data file. System.Boolean IgnoreErrors if set to true any objects that cant be cast to the specified Type T will be ignored.. Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T The Type of object to be returned. Giving no value will return an IEnumberable of IronWebScraper.ScrapedData"
  },
  "api/IronWebScraper.WebScraper.LogLevel.html": {
    "href": "api/IronWebScraper.WebScraper.LogLevel.html",
    "title": "Class WebScraper.LogLevel | C# Web Scraping API | IronWebScraper",
    "keywords": "Class WebScraper.LogLevel Level of WebScraper logging to the Console. Because this Enum is a Flag type options can be combined using a pipe: e.g. LogLevel.Critical | LogLevel.ScrapedData Inheritance System.Object WebScraper.LogLevel Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public sealed class LogLevel : Enum Fields All All events are logged to the console. Extremely verbose; Declaration public const WebScraper.LogLevel All Field Value Type Description WebScraper.LogLevel Critical Logs critical events such as permanently irretrievable page failures and system information. Declaration public const WebScraper.LogLevel Critical Field Value Type Description WebScraper.LogLevel Decision Logs about decisions made by the crawler. Verbose. Useful for advanced debugging. Declaration public const WebScraper.LogLevel Decision Field Value Type Description WebScraper.LogLevel Http Logs HTTP request success and failures Verbose. Useful for advanced debugging. Declaration public const WebScraper.LogLevel Http Field Value Type Description WebScraper.LogLevel None No Logs Declaration public const WebScraper.LogLevel None Field Value Type Description WebScraper.LogLevel ScrapedData Logs data which has been extracted, in a JSON format. If using YieldUnique, only new records will be logged. Will also log File downloads and Images download Declaration public const WebScraper.LogLevel ScrapedData Field Value Type Description WebScraper.LogLevel value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronWebScraper.WebScraper.Throttle.html": {
    "href": "api/IronWebScraper.WebScraper.Throttle.html",
    "title": "Class WebScraper.Throttle | C# Web Scraping API | IronWebScraper",
    "keywords": "Class WebScraper.Throttle Throttle remote clients by their host name or by their public IP address. Inheritance System.Object WebScraper.Throttle Namespace : IronWebScraper Assembly : IronWebScraper.dll Syntax public sealed class Throttle : Enum Fields ByDomainHostName Identify unique hosts by their host name Declaration public const WebScraper.Throttle ByDomainHostName Field Value Type Description WebScraper.Throttle ByIpAddress Identify unique hosts by resolving the IP address for each host in-case multiple host names share an IP address. Declaration public const WebScraper.Throttle ByIpAddress Field Value Type Description WebScraper.Throttle value__ Declaration public int value__ Field Value Type Description System.Int32"
  }
}
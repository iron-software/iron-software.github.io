{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronXL - The Excel Library for .Net | C# Excel API | IronXL",
    "keywords": "IronXL - The Excel Library for .Net IronXL is an Excel Library for C# and .Net which allows developers to Read and edit Excel data from XLS and XLSX Documents without using Microsoft.Office.Interop.Excel IronXL allows developers to Read, Generate and Edit Excel (and other Spreadsheet files) in .Net Applications & websites. A fast and natural approach to work with Excel and Other Spreadsheet files in C#. Quickstart Guide: https://ironsoftware.com/csharp/excel/ Nuget Package : https://www.nuget.org/packages/IronXL.Excel/ Key Library Features Intuitive C# & VB.NET Excel Spreadsheet API No need to install MS Office or Excel Interop Read, edit & create Excel spreadsheet files Fully supports .NET Core, Framework, and Azure Import Data from XLS/XLSX/CSV/TSV. Export Work Sheets to XLS/XLSX/CSV/TSV/JSON. Work with Spreadsheets as System.Data.DataSet and System.Data.DataTable objects. Excel Formulas recalculated every time a sheet it edited. Intuitive Ranges setting with a WorkSheet[\"A1:B10\"] syntax. Sort Ranges, Columns and Rows. Style Cells - Font, Size, Background pattern, Border, Alignment and Number formats. Compatibility IronXL works well in C#, VB.NET, MVC, ASP.NET projects for Websites, Console & Desktop APPs. Works with: .NET Core 2 , 3 & 5 .NET Standard 2 & 3 .NET Framework 4.5 and above Xamarin, SharePoint, Mono Azure, AWS, Cloud hosting Windows, Linux, Mac, Mobile Does NOT require Excel or MS office to be installed. C# Excel Code Example using IronXL; //Create new Excel WorkBook document. //The default file format is XLSX, but we can override that for legacy support WorkBook xlsWorkbook = WorkBook.Create(ExcelFileFormat.XLS); xlsWorkbook.Metadata.Author = \"IronXL\"; //Add a blank WorkSheet WorkSheet xlsSheet = xlsWorkbook.CreateWorkSheet(\"new_sheet\"); //Add data and styles to the new worksheet xlsSheet[\"A1\"].Value = \"Hello World\"; xlsSheet[\"A2\"].Style.BottomBorder.SetColor(\"#ff6600\"); xlsSheet[\"A2\"].Style.BottomBorder.Type = IronXL.Styles.BorderType.Double; //Save the excel file xlsWorkbook.SaveAs(\"NewExcelFile.xls\"); Further Documentation Code Samples : https://ironsoftware.com/csharp/excel/examples/read-excel/ Tutorials : https://ironsoftware.com/csharp/excel/tutorials/how-to-read-excel-file-csharp/ Nuget Package Manager : https://www.nuget.org/packages/IronXL.Excel/ Support : developers@ironsoftware.com"
  },
  "api/IronXL.Cell.html": {
    "href": "api/IronXL.Cell.html",
    "title": "Class Cell | C# Excel API | IronXL",
    "keywords": "Class Cell Represents a Cell in an Excel WorkSheet. Inheritance System.Object Cell Namespace : IronXL Assembly : IronXL.dll Syntax public class Cell : Object Properties Address The location of this Cell within the WorkSheet Address of the cell in a WorkSheet represented as a RangeAddress . Declaration public RangeAddress Address { get; } Property Value Type Description RangeAddress AddressString Gets the cell location in Excel Notation. E.G. \"A12\" Declaration public string AddressString { get; } Property Value Type Description System.String The cell location. BoolValue Gets or sets the boolean value of a cell. Declaration public virtual bool BoolValue { get; set; } Property Value Type Description System.Boolean true if the cell is TRUE, or contains a number greater than zero. false otherwise. ColumnIndex Zero-based column index of a column in the sheet that contains this cell. e.g. if this Cell is in Excel col \"A\": ColumnIndex will equal 0 Declaration public int ColumnIndex { get; } Property Value Type Description System.Int32 DateTimeValue Gets or sets the date time value of this Cell . Declaration public Nullable<DateTime> DateTimeValue { get; set; } Property Value Type Description System.Nullable < System.DateTime > The System.DateTime value of this Cell .. null if the cell can not be cast as dateTime; DecimalValue Gets or sets the numeric System.Decimal value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual Decimal DecimalValue { get; set; } Property Value Type Description System.Decimal The System.Decimal value of the cell. DoubleValue Gets or sets the numeric System.Double value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual double DoubleValue { get; set; } Property Value Type Description System.Double The System.Double value of the cell. FloatValue Gets or sets the numeric System.Single value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual float FloatValue { get; set; } Property Value Type Description System.Single The System.Single value of the cell. FormatString The Excel Cell format as a string . E.g. $#.00 or 0.00% or m/d/yyyy Read more about number formats at https://www.ablebits.com/office-addins-blog/2016/07/07/custom-excel-number-format/ Declaration public string FormatString { get; set; } Property Value Type Description System.String FormattedCellValue Returns the Cell value as a human readable string. FormattedCellValue applies cell formating exactly as displayed in Excel, rather than the raw numerical values that undely the sheet. Declaration public string FormattedCellValue { get; } Property Value Type Description System.String Formula Property to get or set cell's formula. e.g. =A2+A2+A3+A4 Declaration public string Formula { get; set; } Property Value Type Description System.String Hyperlink Property to get or set the cell's value as a hyperlink. Available link types are: A URL starting with http:// , https:// or file:// An Email starting with mailto: An Document containing an abssolute or relative file path Declaration public string Hyperlink { get; set; } Property Value Type Description System.String Int32Value Gets or sets the numeric System.Int32 value of the cell. If the cell is non-numeric - zero will be returned. Synonym of IronXL.Cells.Cell.IntValue Declaration public virtual int Int32Value { get; set; } Property Value Type Description System.Int32 The System.Int32 value of the cell. Int64Value Gets or sets the numeric System.Int64 value of the cell. If the cell is non-numeric - zero will be returned. Synonym of IronXL.Cells.Cell.LongValue Declaration public virtual long Int64Value { get; set; } Property Value Type Description System.Int64 The System.Int64 value of the cell. IntValue Gets or sets the System.Int32 value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual int IntValue { get; set; } Property Value Type Description System.Int32 The System.Int32 value of the cell. IsBoolean Gets a value indicating whether this instance is boolean. Declaration public bool IsBoolean { get; } Property Value Type Description System.Boolean true if this cell is boolean; otherwise, false . IsDateTime Boolean property that indicates if cell contains System.DateTime value. Declaration public bool IsDateTime { get; } Property Value Type Description System.Boolean true if this cell contains a DateTime; otherwise, false . IsEmpty Boolean property that indicates if cell is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean IsError Boolean property that indicates if cell has an error in its formula. Declaration public bool IsError { get; } Property Value Type Description System.Boolean IsFormula Boolean property that indicates if cell contains a formula. Declaration public bool IsFormula { get; } Property Value Type Description System.Boolean true if this cell contains a formula; otherwise, false . IsNumeric Boolean property that indicates if this Cell contains a numeric value: E.g. cell contains a number such as decimal, int, long, float, double etc. Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean true if this cell is a number; otherwise, false . IsText Boolean property that indicates if cell contains a string value. Declaration public bool IsText { get; } Property Value Type Description System.Boolean true if this cell is text; otherwise, false . Location Gets the cell location in Excel Notation. E.G. \"A12\" Synonym of AddressString . Declaration public string Location { get; } Property Value Type Description System.String The cell location. LongValue Gets or sets the numeric System.Int64 value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual long LongValue { get; set; } Property Value Type Description System.Int64 The System.Int64 value of the cell. RowIndex Zero-based row index of the row in the sheet that contains this cell. e.g. if this Cell is in Excel row 3: RowIndex will equal 2 Declaration public int RowIndex { get; } Property Value Type Description System.Int32 StringValue Gets or sets the string value of this Cell. Declaration public virtual string StringValue { get; set; } Property Value Type Description System.String The string value of the cell. Numbers and dates will be rendered into readable strings; as displayed in Excel. Error end NAN cells will return as a null string Style The visual Style of this Cell. Declaration public IStyle Style { get; } Property Value Type Description IStyle See Also IStyle Text Gets or sets the string value of this Cell. Synonym of IronXL.Cells.ICell.StringValue . Declaration public string Text { get; set; } Property Value Type Description System.String The text as displayed in the cell. Value Property to Get or Set the cell's value. Cells may be get or set as types: System.Double , System.Decimal , System.Single , System.Int64 , System.Int32 , System.Boolean , System.DateTime or System.String . See IsFormula , IsEmpty , IsDateTime , IsNumeric , IsText and TryGetValue<TType>(out TType) for elegantly parsing sheets with unknown content. When System.DateTime values, the default Excel date display format is 'M/D/YY h:mm'. Use SetDateTimeValue(DateTime, String) to set a custom date display formatt format Declaration public object Value { get; set; } Property Value Type Description System.Object See Also FormattedCellValue Methods Copy(WorkSheet, String) Copies the specified cell to the sheet and inserts it at the specified point. Declaration public void Copy(WorkSheet sheet, string pointToInsert) Parameters Type Name Description WorkSheet sheet System.String pointToInsert GetValue<TType>() An method for getting a strongly-typed cell value which may throw cast exceptions if data is not in the System.Type expected. Throws System.ArgumentException if casting to TType is impossible. Use Try/Catch or TryGetValue<TType>(out TType) to cast cell values without possible exceptions. See Value for the list of valid types. Declaration public TType GetValue<TType>() Returns Type Description TType The value of the cell, cast as TType. E.g: double, decimal, float, long, int, bool, DateTime, string or object. Type Parameters Name Description TType The type of .net object to cast the result as. E.g: double, decimal, float, long, int, bool, DateTime, string or object. Exceptions Type Condition System.ArgumentException Cannot convert cell value to {type.Name} type. Please try another TType argument.\" + $\" You can also use boolean properties IsNumeric/IsText/etc.. to get information about cell value type. SetDateTimeValue(DateTime, String) Method for setting System.DateTime value with custom format. Declaration public void SetDateTimeValue(DateTime value, string format) Parameters Type Name Description System.DateTime value DateTime value System.String format Custom date format as a string. e.g. M/d/yyyy ToString() Gets the text content of this Cell . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the text content of this Cell . TryGetValue<TType>(out TType) Safe method for getting a strongly-typed cell value. See Value for the list of valid types. e.g. bool OK = Cell.TryGetValue<double>(double result); Declaration public bool TryGetValue<TType>(out TType value) Parameters Type Name Description TType value true if the value could be cast successfully as TType. Else false . Returns Type Description System.Boolean The value of the cell, cast as TType. E.g: double, decimal, float, long, int, bool, DateTime, string or object. Type Parameters Name Description TType The type of .net object to cast the result as. E.g: double, decimal, float, long, int, bool, DateTime, string or object."
  },
  "api/IronXL.Drawing.AnchorType.html": {
    "href": "api/IronXL.Drawing.AnchorType.html",
    "title": "Class AnchorType | C# Excel API | IronXL",
    "keywords": "Class AnchorType Enum that represents type of the anchor of the graphic object to the WorkSheet. Applies to charts, images, and other graphical objects attached to WorkSheets. Inheritance System.Object AnchorType Namespace : IronXL.Drawing Assembly : IronXL.dll Syntax public sealed class AnchorType : Enum Fields DontMoveAndResize Unable to move and resize Declaration public const AnchorType DontMoveAndResize Field Value Type Description AnchorType MoveAndResize Move and resize anchor Declaration public const AnchorType MoveAndResize Field Value Type Description AnchorType MoveDontResize Move but don't resize Declaration public const AnchorType MoveDontResize Field Value Type Description AnchorType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Drawing.Charts.ChartType.html": {
    "href": "api/IronXL.Drawing.Charts.ChartType.html",
    "title": "Class ChartType | C# Excel API | IronXL",
    "keywords": "Class ChartType Inheritance System.Object ChartType Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public sealed class ChartType : Enum Fields Area Declaration public const ChartType Area Field Value Type Description ChartType Bar Declaration public const ChartType Bar Field Value Type Description ChartType Column Declaration public const ChartType Column Field Value Type Description ChartType Line Declaration public const ChartType Line Field Value Type Description ChartType Pie Declaration public const ChartType Pie Field Value Type Description ChartType Scatter Declaration public const ChartType Scatter Field Value Type Description ChartType value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Drawing.Charts.html": {
    "href": "api/IronXL.Drawing.Charts.html",
    "title": "Namespace IronXL.Drawing.Charts | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Drawing.Charts Classes ChartType LegendPosition Interfaces IChart IChartSeries"
  },
  "api/IronXL.Drawing.Charts.IChart.html": {
    "href": "api/IronXL.Drawing.Charts.IChart.html",
    "title": "Interface IChart | C# Excel API | IronXL",
    "keywords": "Interface IChart Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public interface IChart Properties Position Declaration Position Position { get; } Property Value Type Description Position Methods AddSeries(String) Declaration IChartSeries AddSeries(string values) Parameters Type Name Description System.String values Returns Type Description IChartSeries AddSeries(String, String) Declaration IChartSeries AddSeries(string xRange, string yRange) Parameters Type Name Description System.String xRange System.String yRange Returns Type Description IChartSeries Plot() Declaration void Plot() SetLegendPosition(LegendPosition) Declaration void SetLegendPosition(LegendPosition position) Parameters Type Name Description LegendPosition position"
  },
  "api/IronXL.Drawing.Charts.IChartSeries.html": {
    "href": "api/IronXL.Drawing.Charts.IChartSeries.html",
    "title": "Interface IChartSeries | C# Excel API | IronXL",
    "keywords": "Interface IChartSeries Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public interface IChartSeries Properties Title Declaration string Title { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Drawing.Charts.LegendPosition.html": {
    "href": "api/IronXL.Drawing.Charts.LegendPosition.html",
    "title": "Class LegendPosition | C# Excel API | IronXL",
    "keywords": "Class LegendPosition Inheritance System.Object LegendPosition Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public sealed class LegendPosition : Enum Fields Bottom Declaration public const LegendPosition Bottom Field Value Type Description LegendPosition Left Declaration public const LegendPosition Left Field Value Type Description LegendPosition None Declaration public const LegendPosition None Field Value Type Description LegendPosition Right Declaration public const LegendPosition Right Field Value Type Description LegendPosition Top Declaration public const LegendPosition Top Field Value Type Description LegendPosition TopRight Declaration public const LegendPosition TopRight Field Value Type Description LegendPosition value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Drawing.html": {
    "href": "api/IronXL.Drawing.html",
    "title": "Namespace IronXL.Drawing | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Drawing Classes AnchorType Enum that represents type of the anchor of the graphic object to the WorkSheet. Applies to charts, images, and other graphical objects attached to WorkSheets. Position Class that represents an image object position within a WorkSheet"
  },
  "api/IronXL.Drawing.Images.html": {
    "href": "api/IronXL.Drawing.Images.html",
    "title": "Namespace IronXL.Drawing.Images | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Drawing.Images Classes ImageFormat Enum that represents type of the loaded image. Interfaces IImage Interface that represents a picture in a Excel document."
  },
  "api/IronXL.Drawing.Images.IImage.html": {
    "href": "api/IronXL.Drawing.Images.IImage.html",
    "title": "Interface IImage | C# Excel API | IronXL",
    "keywords": "Interface IImage Interface that represents a picture in a Excel document. Namespace : IronXL.Drawing.Images Assembly : IronXL.dll Syntax public interface IImage Properties Data Gets the byte representation of the image. Declaration byte[] Data { get; } Property Value Type Description System.Byte [] Id Gets the index of the image in workbook array. Declaration int Id { get; } Property Value Type Description System.Int32 ImageFormat Gets the format of the image. Declaration ImageFormat ImageFormat { get; } Property Value Type Description ImageFormat Position Gets the position of the image. Declaration Position Position { get; } Property Value Type Description Position Methods Resize() Reset the image to the dimension of the embedded image Declaration void Resize() Resize(Double) Resize the image proportionally. Declaration void Resize(double scale) Parameters Type Name Description System.Double scale The scale percentage. Resize(Double, Double) Resize the image. Please note, that this method works correctly only for workbooks with the default font size (Arial 10pt for .xls and Calibri 11pt for .xlsx). If the default font is changed the resized image can be stretched vertically or horizontally. Declaration void Resize(double scaleX, double scaleY) Parameters Type Name Description System.Double scaleX The scale x (horizontal). 100 is normal scale. System.Double scaleY The scale y (vertical). 100 is normal scale."
  },
  "api/IronXL.Drawing.Images.ImageFormat.html": {
    "href": "api/IronXL.Drawing.Images.ImageFormat.html",
    "title": "Class ImageFormat | C# Excel API | IronXL",
    "keywords": "Class ImageFormat Enum that represents type of the loaded image. Inheritance System.Object ImageFormat Namespace : IronXL.Drawing.Images Assembly : IronXL.dll Syntax public sealed class ImageFormat : Enum Fields BMP Windows Bitmap (.bmp) Declaration public const ImageFormat BMP Field Value Type Description ImageFormat GIF GIF image format Declaration public const ImageFormat GIF Field Value Type Description ImageFormat JPEG JPEG format Declaration public const ImageFormat JPEG Field Value Type Description ImageFormat PNG PNG format Declaration public const ImageFormat PNG Field Value Type Description ImageFormat TIFF Tag Image File (.tiff) Declaration public const ImageFormat TIFF Field Value Type Description ImageFormat value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Drawing.Position.html": {
    "href": "api/IronXL.Drawing.Position.html",
    "title": "Class Position | C# Excel API | IronXL",
    "keywords": "Class Position Class that represents an image object position within a WorkSheet Inheritance System.Object Position Namespace : IronXL.Drawing Assembly : IronXL.dll Syntax public class Position : Object Properties AnchorType Gets or sets the manor in which the image is anchored to the WorkSheet cells. Declaration public AnchorType AnchorType { get; set; } Property Value Type Description AnchorType See Also AnchorType BottomRowIndex Declaration public int BottomRowIndex { get; set; } Property Value Type Description System.Int32 LeftColumnIndex Declaration public int LeftColumnIndex { get; set; } Property Value Type Description System.Int32 LeftColumnLetter Declaration public string LeftColumnLetter { get; set; } Property Value Type Description System.String RightColumnIndex Declaration public int RightColumnIndex { get; set; } Property Value Type Description System.Int32 RightColumnLetter Declaration public string RightColumnLetter { get; set; } Property Value Type Description System.String TopRowIndex Declaration public int TopRowIndex { get; set; } Property Value Type Description System.Int32"
  },
  "api/IronXL.ExcelFileFormat.html": {
    "href": "api/IronXL.ExcelFileFormat.html",
    "title": "Class ExcelFileFormat | C# Excel API | IronXL",
    "keywords": "Class ExcelFileFormat Enum that represents the Excel file format which will be used for new workbook creation. XLS or XLSX (preferred). Inheritance System.Object ExcelFileFormat Namespace : IronXL Assembly : IronXL.dll Syntax public sealed class ExcelFileFormat : Enum Fields value__ Declaration public int value__ Field Value Type Description System.Int32 XLS Option stands for the old XLS Excel format (1997-2003) Declaration public const ExcelFileFormat XLS Field Value Type Description ExcelFileFormat XLSX Option stands for the new XLSX Excel format (2007+) Declaration public const ExcelFileFormat XLSX Field Value Type Description ExcelFileFormat"
  },
  "api/IronXL.Formatting.ConditionalFormatting.html": {
    "href": "api/IronXL.Formatting.ConditionalFormatting.html",
    "title": "Class ConditionalFormatting | C# Excel API | IronXL",
    "keywords": "Class ConditionalFormatting Inheritance System.Object ConditionalFormatting Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public class ConditionalFormatting : Object Properties NumberOfRules Declaration public int NumberOfRules { get; } Property Value Type Description System.Int32 Methods AddRule(ConditionalFormattingRule) Declaration public void AddRule(ConditionalFormattingRule cfRule) Parameters Type Name Description ConditionalFormattingRule cfRule GetFormattingRanges() Declaration public List<RangeAddress> GetFormattingRanges() Returns Type Description System.Collections.Generic.List < RangeAddress > GetRule(Int32) Declaration public ConditionalFormattingRule GetRule(int idx) Parameters Type Name Description System.Int32 idx Returns Type Description ConditionalFormattingRule SetRule(Int32, ConditionalFormattingRule) Declaration public void SetRule(int idx, ConditionalFormattingRule cfRule) Parameters Type Name Description System.Int32 idx ConditionalFormattingRule cfRule"
  },
  "api/IronXL.Formatting.ConditionalFormattingRule.html": {
    "href": "api/IronXL.Formatting.ConditionalFormattingRule.html",
    "title": "Class ConditionalFormattingRule | C# Excel API | IronXL",
    "keywords": "Class ConditionalFormattingRule Inheritance System.Object ConditionalFormattingRule Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public class ConditionalFormattingRule : Object Properties BorderFormatting Declaration public IBorderFormatting BorderFormatting { get; } Property Value Type Description IBorderFormatting ComparisonOperation Declaration public ComparisonOperator ComparisonOperation { get; } Property Value Type Description ComparisonOperator ConditionType Declaration public ConditionType ConditionType { get; } Property Value Type Description ConditionType FontFormatting Declaration public IFontFormatting FontFormatting { get; } Property Value Type Description IFontFormatting Formula1 Declaration public string Formula1 { get; } Property Value Type Description System.String Formula2 Declaration public string Formula2 { get; } Property Value Type Description System.String PatternFormatting Declaration public IPatternFormatting PatternFormatting { get; } Property Value Type Description IPatternFormatting"
  },
  "api/IronXL.Formatting.Enums.ComparisonOperator.html": {
    "href": "api/IronXL.Formatting.Enums.ComparisonOperator.html",
    "title": "Class ComparisonOperator | C# Excel API | IronXL",
    "keywords": "Class ComparisonOperator Inheritance System.Object ComparisonOperator Namespace : IronXL.Formatting.Enums Assembly : IronXL.dll Syntax public sealed class ComparisonOperator : Enum Fields Between Declaration public const ComparisonOperator Between Field Value Type Description ComparisonOperator Equal Declaration public const ComparisonOperator Equal Field Value Type Description ComparisonOperator GreaterThan Declaration public const ComparisonOperator GreaterThan Field Value Type Description ComparisonOperator GreaterThanOrEqual Declaration public const ComparisonOperator GreaterThanOrEqual Field Value Type Description ComparisonOperator LessThan Declaration public const ComparisonOperator LessThan Field Value Type Description ComparisonOperator LessThanOrEqual Declaration public const ComparisonOperator LessThanOrEqual Field Value Type Description ComparisonOperator NoComparison Declaration public const ComparisonOperator NoComparison Field Value Type Description ComparisonOperator NotBetween Declaration public const ComparisonOperator NotBetween Field Value Type Description ComparisonOperator NotEqual Declaration public const ComparisonOperator NotEqual Field Value Type Description ComparisonOperator value__ Declaration public byte value__ Field Value Type Description System.Byte"
  },
  "api/IronXL.Formatting.Enums.ConditionType.html": {
    "href": "api/IronXL.Formatting.Enums.ConditionType.html",
    "title": "Class ConditionType | C# Excel API | IronXL",
    "keywords": "Class ConditionType Inheritance System.Object ConditionType Namespace : IronXL.Formatting.Enums Assembly : IronXL.dll Syntax public sealed class ConditionType : Enum Fields CellValueIs Declaration public const ConditionType CellValueIs Field Value Type Description ConditionType Formula Declaration public const ConditionType Formula Field Value Type Description ConditionType None Declaration public const ConditionType None Field Value Type Description ConditionType value__ Declaration public byte value__ Field Value Type Description System.Byte"
  },
  "api/IronXL.Formatting.Enums.html": {
    "href": "api/IronXL.Formatting.Enums.html",
    "title": "Namespace IronXL.Formatting.Enums | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Formatting.Enums Classes ComparisonOperator ConditionType"
  },
  "api/IronXL.Formatting.html": {
    "href": "api/IronXL.Formatting.html",
    "title": "Namespace IronXL.Formatting | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Formatting Classes ConditionalFormatting ConditionalFormattingRule Interfaces IBorderFormatting IFontFormatting IPatternFormatting ISheetConditionalFormatting"
  },
  "api/IronXL.Formatting.IBorderFormatting.html": {
    "href": "api/IronXL.Formatting.IBorderFormatting.html",
    "title": "Interface IBorderFormatting | C# Excel API | IronXL",
    "keywords": "Interface IBorderFormatting Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface IBorderFormatting Properties BottomBorderColor Declaration string BottomBorderColor { get; set; } Property Value Type Description System.String BottomBorderType Declaration BorderType BottomBorderType { get; set; } Property Value Type Description BorderType DiagonalBorderColor Declaration string DiagonalBorderColor { get; set; } Property Value Type Description System.String DiagonalBorderType Declaration BorderType DiagonalBorderType { get; set; } Property Value Type Description BorderType LeftBorderColor Declaration string LeftBorderColor { get; set; } Property Value Type Description System.String LeftBorderType Declaration BorderType LeftBorderType { get; set; } Property Value Type Description BorderType RightBorderColor Declaration string RightBorderColor { get; set; } Property Value Type Description System.String RightBorderType Declaration BorderType RightBorderType { get; set; } Property Value Type Description BorderType TopBorderColor Declaration string TopBorderColor { get; set; } Property Value Type Description System.String TopBorderType Declaration BorderType TopBorderType { get; set; } Property Value Type Description BorderType"
  },
  "api/IronXL.Formatting.IFontFormatting.html": {
    "href": "api/IronXL.Formatting.IFontFormatting.html",
    "title": "Interface IFontFormatting | C# Excel API | IronXL",
    "keywords": "Interface IFontFormatting Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface IFontFormatting Properties EscapementType Declaration FontScript EscapementType { get; set; } Property Value Type Description FontScript FontColor Declaration string FontColor { get; set; } Property Value Type Description System.String FontHeight Declaration int FontHeight { get; set; } Property Value Type Description System.Int32 IsBold Declaration bool IsBold { get; set; } Property Value Type Description System.Boolean IsItalic Declaration bool IsItalic { get; set; } Property Value Type Description System.Boolean UnderlineType Declaration FontUnderlineType UnderlineType { get; set; } Property Value Type Description FontUnderlineType"
  },
  "api/IronXL.Formatting.IPatternFormatting.html": {
    "href": "api/IronXL.Formatting.IPatternFormatting.html",
    "title": "Interface IPatternFormatting | C# Excel API | IronXL",
    "keywords": "Interface IPatternFormatting Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface IPatternFormatting Properties BackgroundColor Declaration string BackgroundColor { get; set; } Property Value Type Description System.String FillPattern Declaration FillPattern FillPattern { get; set; } Property Value Type Description FillPattern"
  },
  "api/IronXL.Formatting.ISheetConditionalFormatting.html": {
    "href": "api/IronXL.Formatting.ISheetConditionalFormatting.html",
    "title": "Interface ISheetConditionalFormatting | C# Excel API | IronXL",
    "keywords": "Interface ISheetConditionalFormatting Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface ISheetConditionalFormatting Properties ConditionalFormattingsCount Declaration int ConditionalFormattingsCount { get; } Property Value Type Description System.Int32 Methods AddConditionalFormatting(ConditionalFormatting) Declaration ConditionalFormatting AddConditionalFormatting(ConditionalFormatting cf) Parameters Type Name Description ConditionalFormatting cf Returns Type Description ConditionalFormatting AddConditionalFormatting(IEnumerable<String>, ConditionalFormattingRule) Declaration ConditionalFormatting AddConditionalFormatting(IEnumerable<string> regions, ConditionalFormattingRule rule) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > regions ConditionalFormattingRule rule Returns Type Description ConditionalFormatting AddConditionalFormatting(IEnumerable<String>, ConditionalFormattingRule, ConditionalFormattingRule) Declaration ConditionalFormatting AddConditionalFormatting(IEnumerable<string> regions, ConditionalFormattingRule rule1, ConditionalFormattingRule rule2) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > regions ConditionalFormattingRule rule1 ConditionalFormattingRule rule2 Returns Type Description ConditionalFormatting AddConditionalFormatting(IEnumerable<String>, List<ConditionalFormattingRule>) Declaration ConditionalFormatting AddConditionalFormatting(IEnumerable<string> regions, List<ConditionalFormattingRule> cfRules) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > regions System.Collections.Generic.List < ConditionalFormattingRule > cfRules Returns Type Description ConditionalFormatting AddConditionalFormatting(String, ConditionalFormattingRule) Declaration ConditionalFormatting AddConditionalFormatting(string region, ConditionalFormattingRule rule) Parameters Type Name Description System.String region ConditionalFormattingRule rule Returns Type Description ConditionalFormatting AddConditionalFormatting(String, ConditionalFormattingRule, ConditionalFormattingRule) Declaration ConditionalFormatting AddConditionalFormatting(string region, ConditionalFormattingRule rule1, ConditionalFormattingRule rule2) Parameters Type Name Description System.String region ConditionalFormattingRule rule1 ConditionalFormattingRule rule2 Returns Type Description ConditionalFormatting AddConditionalFormatting(String, List<ConditionalFormattingRule>) Declaration ConditionalFormatting AddConditionalFormatting(string region, List<ConditionalFormattingRule> cfRules) Parameters Type Name Description System.String region System.Collections.Generic.List < ConditionalFormattingRule > cfRules Returns Type Description ConditionalFormatting CreateConditionalFormattingRule(ComparisonOperator, String) Declaration ConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator comparisonOperation, string formula) Parameters Type Name Description ComparisonOperator comparisonOperation System.String formula Returns Type Description ConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator, String, String) Declaration ConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator comparisonOperation, string formula1, string formula2) Parameters Type Name Description ComparisonOperator comparisonOperation System.String formula1 System.String formula2 Returns Type Description ConditionalFormattingRule CreateConditionalFormattingRule(String) Declaration ConditionalFormattingRule CreateConditionalFormattingRule(string formula) Parameters Type Name Description System.String formula Returns Type Description ConditionalFormattingRule GetConditionalFormattingAt(Int32) Declaration ConditionalFormatting GetConditionalFormattingAt(int index) Parameters Type Name Description System.Int32 index Returns Type Description ConditionalFormatting RemoveConditionalFormatting(Int32) Declaration void RemoveConditionalFormatting(int index) Parameters Type Name Description System.Int32 index"
  },
  "api/IronXL.html": {
    "href": "api/IronXL.html",
    "title": "Namespace IronXL | C# Excel API | IronXL",
    "keywords": "Namespace IronXL Classes Cell Represents a Cell in an Excel WorkSheet. ExcelFileFormat Enum that represents the Excel file format which will be used for new workbook creation. XLS or XLSX (preferred). License Allows IronXL license keys to be applied globally across an application. Apply your licence using LicenseKey in your code, or add the key IronXL.LicenseKey to Web.Conbfig or App.Config Range A class that represents a range of cells RangeAddress Class that represents address of the range. RangeColumn A class that represents a single column of cells. RangeRow A class that represents a single row of cells. WorkBook Class that stands for a whole Excel file. This is the first object most users will construct whether they are reading or writing a workbook. It is also the top level (home-base) object for creating new sheets and most other Excel programing operations. WorkSheet Class that stands for single sheet within Excel file. WorksheetsCollection"
  },
  "api/IronXL.Layout.html": {
    "href": "api/IronXL.Layout.html",
    "title": "Namespace IronXL.Layout | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Layout Interfaces IFooter Interface for worksheet footer IHeader Interface for worksheet header IHeaderFooter Common interface for"
  },
  "api/IronXL.Layout.IFooter.html": {
    "href": "api/IronXL.Layout.IFooter.html",
    "title": "Interface IFooter | C# Excel API | IronXL",
    "keywords": "Interface IFooter Interface for worksheet footer Inherited Members IHeaderFooter.Left IHeaderFooter.Center IHeaderFooter.Right Namespace : IronXL.Layout Assembly : IronXL.dll Syntax public interface IFooter : IHeaderFooter Inherited members Left Center Right See Also IHeaderFooter"
  },
  "api/IronXL.Layout.IHeader.html": {
    "href": "api/IronXL.Layout.IHeader.html",
    "title": "Interface IHeader | C# Excel API | IronXL",
    "keywords": "Interface IHeader Interface for worksheet header Inherited Members IHeaderFooter.Left IHeaderFooter.Center IHeaderFooter.Right Namespace : IronXL.Layout Assembly : IronXL.dll Syntax public interface IHeader : IHeaderFooter Inherited members Left Center Right See Also IHeaderFooter"
  },
  "api/IronXL.Layout.IHeaderFooter.html": {
    "href": "api/IronXL.Layout.IHeaderFooter.html",
    "title": "Interface IHeaderFooter | C# Excel API | IronXL",
    "keywords": "Interface IHeaderFooter Common interface for Namespace : IronXL.Layout Assembly : IronXL.dll Syntax public interface IHeaderFooter Properties Center Gets or sets the center of the header or footer. Declaration string Center { get; set; } Property Value Type Description System.String The string representing the center. Left Gets or sets the left side of the header or footer. Declaration string Left { get; set; } Property Value Type Description System.String The string representing the left side. Right Gets or sets the right side of the header or footer. Declaration string Right { get; set; } Property Value Type Description System.String The string representing the right side."
  },
  "api/IronXL.License.html": {
    "href": "api/IronXL.License.html",
    "title": "Class License | C# Excel API | IronXL",
    "keywords": "Class License Allows IronXL license keys to be applied globally across an application. Apply your licence using LicenseKey in your code, or add the key IronXL.LicenseKey to Web.Conbfig or App.Config Inheritance System.Object License Namespace : IronXL Assembly : IronXL.dll Syntax public static class License : Object Fields LicenseKey License IronXL for deployment. Get Licensed at http://ironsoftware.com/csharp/excel/licensing/ A License key can also be added to Web.Config or App.Config as IronXL.LicenseKey Declaration public static string LicenseKey Field Value Type Description System.String Methods IsValidLicense(String) Determines whether a license key is valid. Declaration public static bool IsValidLicense(string LicenseKey) Parameters Type Name Description System.String LicenseKey IronXL license key as a string Returns Type Description System.Boolean true if the specified license key is valid; otherwise, false ."
  },
  "api/IronXL.Metadata.html": {
    "href": "api/IronXL.Metadata.html",
    "title": "Namespace IronXL.Metadata | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Metadata Interfaces ICustomProperties Interface that represents set of custom metadata properties IMetadata Interface that represents meta-data for the Excel file such as \"Author\", \"Title\"..."
  },
  "api/IronXL.Metadata.ICustomProperties.html": {
    "href": "api/IronXL.Metadata.ICustomProperties.html",
    "title": "Interface ICustomProperties | C# Excel API | IronXL",
    "keywords": "Interface ICustomProperties Interface that represents set of custom metadata properties Namespace : IronXL.Metadata Assembly : IronXL.dll Syntax public interface ICustomProperties Methods AddProperty(String, Object) Method for adding property with the specified name and value. Available value types are: System.Int32 , System.Double , System.String , System.Boolean . Declaration void AddProperty(string name, object value) Parameters Type Name Description System.String name Name of the property. System.Object value Value of the property. Contains(String) Method to check whether set of properties contains property with the specified name. Declaration bool Contains(string name) Parameters Type Name Description System.String name Name of the property. Returns Type Description System.Boolean true if property with the specified name exists, otherwise false . GetValue(String) Method for getting custom property value by its name. See AddProperty(String, Object) for list of possible types. Declaration object GetValue(string name) Parameters Type Name Description System.String name The name of the property. Returns Type Description System.Object The value of the property. GetValue<T>(String) Unsafe method for getting strongly-typed custom property value by its name. See AddProperty(String, Object) for list of possible types. Declaration T GetValue<T>(string name) Parameters Type Name Description System.String name Name of the property. Returns Type Description T Returns default(T) is such property wasn't found Type Parameters Name Description T Remove(String) Method for removing property by its name. Declaration bool Remove(string name) Parameters Type Name Description System.String name The name of the property. Returns Type Description System.Boolean true if property was removed, otherwise false . TryGetValue<T>(String, out T) Safe method for getting strongly-typed custom property value by its name. See AddProperty(String, Object) for list of possible types. Declaration bool TryGetValue<T>(string name, out T value) Parameters Type Name Description System.String name The name of the property. T value The value of the property.. Returns Type Description System.Boolean true if value was returned successfully, otherwise false . Type Parameters Name Description T Type of the return value."
  },
  "api/IronXL.Metadata.IMetadata.html": {
    "href": "api/IronXL.Metadata.IMetadata.html",
    "title": "Interface IMetadata | C# Excel API | IronXL",
    "keywords": "Interface IMetadata Interface that represents meta-data for the Excel file such as \"Author\", \"Title\"... Namespace : IronXL.Metadata Assembly : IronXL.dll Syntax public interface IMetadata Properties ApplicationName Gets the name of the application with which the file was created. Declaration string ApplicationName { get; } Property Value Type Description System.String Author Gets or sets the author of the file. Declaration string Author { get; set; } Property Value Type Description System.String Category Gets or sets the category of the file. Declaration string Category { get; set; } Property Value Type Description System.String Comments Gets or sets the comments field value. Declaration string Comments { get; set; } Property Value Type Description System.String Company Gets the company field value. Declaration string Company { get; } Property Value Type Description System.String Created Gets or sets the creation time. Declaration Nullable<DateTime> Created { get; set; } Property Value Type Description System.Nullable < System.DateTime > CustomProperties Gets the custom properties of the workbook. Declaration ICustomProperties CustomProperties { get; } Property Value Type Description ICustomProperties Keywords Gets or sets the keywords field value. Declaration string Keywords { get; set; } Property Value Type Description System.String LastPrinted Gets or sets the last printed time. Declaration Nullable<DateTime> LastPrinted { get; set; } Property Value Type Description System.Nullable < System.DateTime > Manager Gets the manager field value. Declaration string Manager { get; } Property Value Type Description System.String Modified Gets or sets the last modification time. Declaration Nullable<DateTime> Modified { get; set; } Property Value Type Description System.Nullable < System.DateTime > Subject Gets or sets the subject of the file. Declaration string Subject { get; set; } Property Value Type Description System.String Template Gets the template field value. Declaration string Template { get; } Property Value Type Description System.String Title Gets or sets the title of the file. Declaration string Title { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Options.CreatingOptions.html": {
    "href": "api/IronXL.Options.CreatingOptions.html",
    "title": "Class CreatingOptions | C# Excel API | IronXL",
    "keywords": "Class CreatingOptions Options for creating new WorkBook object. Inheritance System.Object CreatingOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class CreatingOptions : Object Constructors CreatingOptions() Declaration public CreatingOptions() Properties DefaultFileFormat Property that indicates whether to use XLS or XLSX as new workbook format. XLSX is the default value for new workbook Declaration public ExcelFileFormat DefaultFileFormat { get; set; } Property Value Type Description ExcelFileFormat The default spreadsheet file format."
  },
  "api/IronXL.Options.HiddenState.html": {
    "href": "api/IronXL.Options.HiddenState.html",
    "title": "Class HiddenState | C# Excel API | IronXL",
    "keywords": "Class HiddenState Enum that represents visibility of the worksheet. Inheritance System.Object HiddenState Namespace : IronXL.Options Assembly : IronXL.dll Syntax public sealed class HiddenState : Enum Fields Hidden Worksheet is hidden. Declaration public const HiddenState Hidden Field Value Type Description HiddenState value__ Declaration public int value__ Field Value Type Description System.Int32 VeryHidden Worksheet is very hidden. Declaration public const HiddenState VeryHidden Field Value Type Description HiddenState Visible Worksheet is visible. Declaration public const HiddenState Visible Field Value Type Description HiddenState"
  },
  "api/IronXL.Options.html": {
    "href": "api/IronXL.Options.html",
    "title": "Namespace IronXL.Options | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Options Classes CreatingOptions Options for creating new WorkBook object. HiddenState Enum that represents visibility of the worksheet. HtmlExportOptions Options for exporting workbook to HTML format. LoadingOptions Options for loading WorkBook object from file. PanePosition Define the position of active the pane. One of lower/right, upper/right, lower/left and upper/left. SavingOptions Options for saving WorkBook object to file."
  },
  "api/IronXL.Options.HtmlExportOptions.html": {
    "href": "api/IronXL.Options.HtmlExportOptions.html",
    "title": "Class HtmlExportOptions | C# Excel API | IronXL",
    "keywords": "Class HtmlExportOptions Options for exporting workbook to HTML format. Inheritance System.Object HtmlExportOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class HtmlExportOptions : Object Constructors HtmlExportOptions() Declaration public HtmlExportOptions() Properties OutputColumnHeaders Property that indicates whether to show column header in result file. Declaration public bool OutputColumnHeaders { get; set; } Property Value Type Description System.Boolean OutputHiddenColumns Property that indicates whether to show hidden columns in result file. Declaration public bool OutputHiddenColumns { get; set; } Property Value Type Description System.Boolean OutputHiddenRows Property that indicates whether to show hidden rows in result file. Declaration public bool OutputHiddenRows { get; set; } Property Value Type Description System.Boolean OutputLeadingSpacesAsNonBreaking Property that indicates whether to show leading spaces as non-breaking in result file. Declaration public bool OutputLeadingSpacesAsNonBreaking { get; set; } Property Value Type Description System.Boolean OutputRowNumbers Property that indicates whether to show row numbers in result file. Declaration public bool OutputRowNumbers { get; set; } Property Value Type Description System.Boolean"
  },
  "api/IronXL.Options.LoadingOptions.html": {
    "href": "api/IronXL.Options.LoadingOptions.html",
    "title": "Class LoadingOptions | C# Excel API | IronXL",
    "keywords": "Class LoadingOptions Options for loading WorkBook object from file. Inheritance System.Object LoadingOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class LoadingOptions : Object Constructors LoadingOptions() Declaration public LoadingOptions() Properties CsvListDelimiter Property that indicates CSV file list delimiter. Default value depends on current region. Take a look at System.Globalization.CultureInfo Declaration public string CsvListDelimiter { get; set; } Property Value Type Description System.String DefaultFileFormat Property that indicates whether to use XLS or XLSX as new workbook format when loading CSV/TSV files. XLSX is the default value for new workbook Declaration public ExcelFileFormat DefaultFileFormat { get; set; } Property Value Type Description ExcelFileFormat"
  },
  "api/IronXL.Options.PanePosition.html": {
    "href": "api/IronXL.Options.PanePosition.html",
    "title": "Class PanePosition | C# Excel API | IronXL",
    "keywords": "Class PanePosition Define the position of active the pane. One of lower/right, upper/right, lower/left and upper/left. Inheritance System.Object PanePosition Namespace : IronXL.Options Assembly : IronXL.dll Syntax public sealed class PanePosition : Enum Fields LowerLeft Refers to the lower/left corner Declaration public const PanePosition LowerLeft Field Value Type Description PanePosition LowerRight Refers to the lower/right corner Declaration public const PanePosition LowerRight Field Value Type Description PanePosition UpperLeft Refers to the upper/left corner Declaration public const PanePosition UpperLeft Field Value Type Description PanePosition UpperRight Refers to the upper/right corner Declaration public const PanePosition UpperRight Field Value Type Description PanePosition value__ Declaration public byte value__ Field Value Type Description System.Byte"
  },
  "api/IronXL.Options.SavingOptions.html": {
    "href": "api/IronXL.Options.SavingOptions.html",
    "title": "Class SavingOptions | C# Excel API | IronXL",
    "keywords": "Class SavingOptions Options for saving WorkBook object to file. Inheritance System.Object SavingOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class SavingOptions : Object Constructors SavingOptions() Declaration public SavingOptions() Properties ListDelimiter Property that indicates CSV file list delimiter. Default value depends on current region. Take a look at System.Globalization.CultureInfo Declaration public string ListDelimiter { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Printing.html": {
    "href": "api/IronXL.Printing.html",
    "title": "Namespace IronXL.Printing | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Printing Classes PaperSize An Enum that represents different sizes of paper for Excel document printing and page setup. See https://docs.microsoft.com/en-us/windows/desktop/intl/paper-sizes for more information on windows and Excel paper sizes. PrintOrientation Enum that represents different print orientations Interfaces IPrintSetup Interface that represents list of settings for printing a Excel file."
  },
  "api/IronXL.Printing.IPrintSetup.html": {
    "href": "api/IronXL.Printing.IPrintSetup.html",
    "title": "Interface IPrintSetup | C# Excel API | IronXL",
    "keywords": "Interface IPrintSetup Interface that represents list of settings for printing a Excel file. Namespace : IronXL.Printing Assembly : IronXL.dll Syntax public interface IPrintSetup Properties Copies Returns the number of copies to print. Declaration short Copies { get; set; } Property Value Type Description System.Int16 Draft Returns the draft mode. Declaration bool Draft { get; set; } Property Value Type Description System.Boolean FitHeight Returns the number of pages high to fit the sheet in to. Declaration short FitHeight { get; set; } Property Value Type Description System.Int16 FitWidth Returns the number of pages wide to fit sheet in to. Declaration short FitWidth { get; set; } Property Value Type Description System.Int16 FooterMargin Returns the footer margin. Declaration double FooterMargin { get; set; } Property Value Type Description System.Double HeaderMargin Returns the header margin. Declaration double HeaderMargin { get; set; } Property Value Type Description System.Double HResolution Returns the horizontal resolution. Declaration short HResolution { get; set; } Property Value Type Description System.Int16 LeftToRight Returns the left to right print order. Declaration bool LeftToRight { get; set; } Property Value Type Description System.Boolean NoColor Returns the black and white Setting. Declaration bool NoColor { get; set; } Property Value Type Description System.Boolean Notes Returns the print notes. Declaration bool Notes { get; set; } Property Value Type Description System.Boolean PageStart Returns the page start. Declaration short PageStart { get; set; } Property Value Type Description System.Int16 PaperSize Gets or sets the size of the paper. Declaration PaperSize PaperSize { get; set; } Property Value Type Description PaperSize PrintOrientation Returns the print orientation. Declaration PrintOrientation PrintOrientation { get; set; } Property Value Type Description PrintOrientation Scale Returns the scale. Declaration short Scale { get; set; } Property Value Type Description System.Int16 UsePage Returns the use page numbers. Declaration bool UsePage { get; set; } Property Value Type Description System.Boolean VResolution Returns the vertical resolution. Declaration short VResolution { get; set; } Property Value Type Description System.Int16"
  },
  "api/IronXL.Printing.PaperSize.html": {
    "href": "api/IronXL.Printing.PaperSize.html",
    "title": "Class PaperSize | C# Excel API | IronXL",
    "keywords": "Class PaperSize An Enum that represents different sizes of paper for Excel document printing and page setup. See https://docs.microsoft.com/en-us/windows/desktop/intl/paper-sizes for more information on windows and Excel paper sizes. Inheritance System.Object PaperSize Namespace : IronXL.Printing Assembly : IronXL.dll Syntax public sealed class PaperSize : Enum Fields A3 A3 297 x 420 mm Declaration public const PaperSize A3 Field Value Type Description PaperSize A4 A4 210 x 297 mm Declaration public const PaperSize A4 Field Value Type Description PaperSize A4EExtra A4 Extra 9.27 x 12.69 in Declaration public const PaperSize A4EExtra Field Value Type Description PaperSize A4Plus A4 Plus - 210x330 mm Declaration public const PaperSize A4Plus Field Value Type Description PaperSize A4Rotated A4 Rotated - 297x210 mm Declaration public const PaperSize A4Rotated Field Value Type Description PaperSize A4Small A4 Small 210 x 297 mm Declaration public const PaperSize A4Small Field Value Type Description PaperSize A4Transverse A4 Transverse - 210x297 mm Declaration public const PaperSize A4Transverse Field Value Type Description PaperSize A5 A5 148 x 210 mm Declaration public const PaperSize A5 Field Value Type Description PaperSize B4 B4 (JIS) 257 x 364 mm Declaration public const PaperSize B4 Field Value Type Description PaperSize B5 B5 (JIS) 182 x 257 mm Declaration public const PaperSize B5 Field Value Type Description PaperSize CSizeSheet C size sheet Declaration public const PaperSize CSizeSheet Field Value Type Description PaperSize DSizeSheet D size sheet Declaration public const PaperSize DSizeSheet Field Value Type Description PaperSize ElevenBySeven 11 x 17 in Declaration public const PaperSize ElevenBySeven Field Value Type Description PaperSize Envelope10 US Envelope #10 4 1/8 x 9 1/2 Declaration public const PaperSize Envelope10 Field Value Type Description PaperSize Envelope11 US Envelope #11 4 1/2 x 10 3/8 Declaration public const PaperSize Envelope11 Field Value Type Description PaperSize Envelope12 US Envelope #12 4 3/4 x 11 in Declaration public const PaperSize Envelope12 Field Value Type Description PaperSize Envelope14 US Envelope #14 5 x 11 1/2 Declaration public const PaperSize Envelope14 Field Value Type Description PaperSize Envelope9 US Envelope #9 3 7/8 x 8 7/8 Declaration public const PaperSize Envelope9 Field Value Type Description PaperSize EnvelopeC3 Envelope C3 324 x 458 mm Declaration public const PaperSize EnvelopeC3 Field Value Type Description PaperSize EnvelopeC4 Envelope C4 229 x 324 mm Declaration public const PaperSize EnvelopeC4 Field Value Type Description PaperSize EnvelopeC5 Envelope C5 162 x 229 mm Declaration public const PaperSize EnvelopeC5 Field Value Type Description PaperSize EnvelopeC6 Envelope C6 114 x 162 mm Declaration public const PaperSize EnvelopeC6 Field Value Type Description PaperSize EnvelopeDL Envelope DL 110 x 220mm Declaration public const PaperSize EnvelopeDL Field Value Type Description PaperSize EnvelopeMonarch US Envelope Monarch 3.875 x 7.5 in Declaration public const PaperSize EnvelopeMonarch Field Value Type Description PaperSize ESizeSheet Declaration public const PaperSize ESizeSheet Field Value Type Description PaperSize Executive US Executive 7 1/4 x 10 1/2 in Declaration public const PaperSize Executive Field Value Type Description PaperSize Folio Folio 8 1/2 x 13 in Declaration public const PaperSize Folio Field Value Type Description PaperSize Ledger US Ledger 17 x 11 in Declaration public const PaperSize Ledger Field Value Type Description PaperSize Legal US Legal 8 1/2 x 14 in Declaration public const PaperSize Legal Field Value Type Description PaperSize Letter US Letter Small 8 1/2 x 11 in Declaration public const PaperSize Letter Field Value Type Description PaperSize LetterRotated US Letter Rotated 11 x 8 1/2 in Declaration public const PaperSize LetterRotated Field Value Type Description PaperSize Note US Note 8 1/2 x 11 in Declaration public const PaperSize Note Field Value Type Description PaperSize PrinterDefault Default paper size. Works with each printer's default paper setting. Declaration public const PaperSize PrinterDefault Field Value Type Description PaperSize Quarto Quarto 215 x 275 mm Declaration public const PaperSize Quarto Field Value Type Description PaperSize Statement US Statement 5 1/2 x 8 1/2 in Declaration public const PaperSize Statement Field Value Type Description PaperSize Tabloid US Tabloid 11 x 17 in Declaration public const PaperSize Tabloid Field Value Type Description PaperSize TenByFourteen 10 x 14 in Declaration public const PaperSize TenByFourteen Field Value Type Description PaperSize value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Printing.PrintOrientation.html": {
    "href": "api/IronXL.Printing.PrintOrientation.html",
    "title": "Class PrintOrientation | C# Excel API | IronXL",
    "keywords": "Class PrintOrientation Enum that represents different print orientations Inheritance System.Object PrintOrientation Namespace : IronXL.Printing Assembly : IronXL.dll Syntax public sealed class PrintOrientation : Enum Fields Default The default print orientation Declaration public const PrintOrientation Default Field Value Type Description PrintOrientation Landscape The landscape print orientation Declaration public const PrintOrientation Landscape Field Value Type Description PrintOrientation Portrait The portrait print orientation Declaration public const PrintOrientation Portrait Field Value Type Description PrintOrientation value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Range.html": {
    "href": "api/IronXL.Range.html",
    "title": "Class Range | C# Excel API | IronXL",
    "keywords": "Class Range A class that represents a range of cells Inheritance System.Object Range RangeColumn RangeRow WorkSheet Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Namespace : IronXL Assembly : IronXL.dll Syntax public class Range : Object Properties BoolValue Gets or sets the System.Boolean value of this Range of cells. Getting the BoolValue will return true only if ALL cells in the range are true. Numeric cells greater than zero are treated as TRUE. [Logical AND Operator Applied] Setting the BoolValue will set all cells in with the same System.Boolean value. Declaration public virtual bool BoolValue { get; set; } Property Value Type Description System.Boolean The boolean AND aggregate value of the cells. Error end NAN cells will return as a false . Columns List of Excel columns within the current range. The Columns contains Cell objects. Declaration public List<RangeColumn> Columns { get; } Property Value Type Description System.Collections.Generic.List < RangeColumn > DateTimeValue Gets or sets the nullable System.DateTime value of this Range of cells. Getting the DateTimeValue will return highest (MAX) DateTime in the Range, or null if no System.DateTime is found. Setting the DateTimeValue will set all cells in with the same System.DateTime value. Declaration public Nullable<DateTime> DateTimeValue { get; set; } Property Value Type Description System.Nullable < System.DateTime > The MAX System.DateTime of all of the cells. DecimalValue Gets or sets the System.Decimal value of this Range of cells. Getting the DecimalValue will return the SUM of all numeric cells in the Range. Setting the DecimalValue will set all cells in with the same System.Decimal value. Declaration public virtual Decimal DecimalValue { get; set; } Property Value Type Description System.Decimal The System.Decimal SUM of all of the cells. Error end NAN cells will count as 0 DoubleValue Gets or sets the double value of all Cells in this Rance. Declaration public virtual double DoubleValue { get; set; } Property Value Type Description System.Double The double value. FloatValue Gets or sets the System.Single value of this Range of cells. Getting the FloatValue will return the SUM of all numeric cells in the Range. Setting the FloatValue will set all cells in with the same System.Single value. Declaration public virtual float FloatValue { get; set; } Property Value Type Description System.Single The System.Single SUM of all of the cells. Error end NAN cells will count as 0 Int32Value Synonym of IntValue Gets or sets the System.Int32 (Int32) value of this Range of cells. Getting the LongValue will return the SUM of all numeric cells in the Range. Setting the LongValue will set all cells in with the same System.Int32 value. Declaration public virtual int Int32Value { get; set; } Property Value Type Description System.Int32 The System.Int32 SUM of all of the cells. Error end NAN cells will count as 0 Int64Value Synonym of LongValue Gets or sets the System.Int64 (Int64) value of this Range of cells. Getting the LongValue will return the SUM of all numeric cells in the Range. Setting the LongValue will set all cells in with the same System.Int64 value. Declaration public virtual long Int64Value { get; set; } Property Value Type Description System.Int64 The System.Int64 SUM of all of the cells. Error end NAN cells will count as 0 IntValue Gets or sets the System.Int32 value of this Range of cells. Getting the IntValue will return the SUM of all numeric cells in the Range. Setting the IntValue will set all cells in with the same System.Int32 value. Declaration public virtual int IntValue { get; set; } Property Value Type Description System.Int32 The System.Int32 SUM of all of the cells. Error end NAN cells will count as 0 IsEmpty Property that indicates if range is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean LongValue Gets or sets the System.Int64 (Int64) value of this Range of cells. Getting the LongValue will return the SUM of all numeric cells in the Range. Setting the LongValue will set all cells in with the same System.Int64 value. Declaration public virtual long LongValue { get; set; } Property Value Type Description System.Int64 The System.Int64 SUM of all of the cells. Error end NAN cells will count as 0 RangeAddressAsString Gets a string representation of this range address. E.g. \"A1:B25\" Declaration public virtual string RangeAddressAsString { get; } Property Value Type Description System.String The range address as string. Rows List of Excel rows within the current range. The Rows contains Cell objects. Declaration public List<RangeRow> Rows { get; } Property Value Type Description System.Collections.Generic.List < RangeRow > StringValue Gets or sets the System.String value of this Range of cells. Getting the StringValue will return formated System.String values. Columns will be delimited by TABS. Rows delimited by NEWLINE Setting the StringValue will set all cells in with the same System.String value. Declaration public virtual string StringValue { get; set; } Property Value Type Description System.String The string value of all of the cells. Numbers and dates will be rendered into readable strings; as displayed in Excel. Formulas will be calculated. Error end NAN cells will return as a null string. Style Style of all cells within range. Declaration public IStyle Style { get; } Property Value Type Description IStyle Value Property to get or set range value. If range contains one cell: {get} returns the cell value, {set} changes the cell value If range contains more than one cell: {get} returns the sum of all numeric cells within range, {set} changes the value of every cell within the range. Declaration public object Value { get; set; } Property Value Type Description System.Object WorkBook The workbook this range belongs to. Declaration public WorkBook WorkBook { get; } Property Value Type Description WorkBook Methods AddRange(Range) Add another range to this current range. Basically, the result is union of two ranges. Declaration public virtual Range AddRange(Range range) Parameters Type Name Description Range range The range to add to the current working range. Returns Type Description Range This Range allowing a fluent coding style. Avg() Returns average value of all numeric cells Declaration public Decimal Avg() Returns Type Description System.Decimal The average value as a decimal. Column(Int32) Get a column by index Declaration protected RangeColumn Column(int index) Parameters Type Name Description System.Int32 index Returns Type Description RangeColumn Copy(WorkSheet, String) Copies the specified range to the sheet and inserts it at the specified point. E.g. Pastes this range to a WorkSheet at a specified cell location Declaration public void Copy(WorkSheet sheet, string pointToInsert) Parameters Type Name Description WorkSheet sheet The worksheet to paste this Range into. System.String pointToInsert The cell at which to paste the range. E.g. \"A11\" GetAllColumns() Get a list of columns Declaration protected List<RangeColumn> GetAllColumns() Returns Type Description System.Collections.Generic.List < RangeColumn > GetAllRows() Get a list of rows Declaration protected List<RangeRow> GetAllRows() Returns Type Description System.Collections.Generic.List < RangeRow > GetEnumerator() IEnumerable implementation. Declaration public IEnumerator<Cell> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Cell > An IEnumerator allowing for-each logical iteration of cells with Ranges. GetValue<TType>() Method for getting a range's value. If range contains one cell then method calls GetValue<TType>() of this cell If range contains more than one cell then method tries to cast Sum() of all numeric cells within range to TType Use Try/Catch to avoid possible exceptions from this method if cell content types are inconsistent or contain formula errors. Declaration public TType GetValue<TType>() Returns Type Description TType The value of the cell, cast as TType Type Parameters Name Description TType The .net type to which the cell's value will be cast. Exceptions Type Condition System.ArgumentException Range value cannot be casted to {type.Name} Max() Returns maximum value of all numeric cells Declaration public Decimal Max() Returns Type Description System.Decimal The max value as a decimal. Min() Returns minimum value of all numeric cells within this range. Declaration public Decimal Min() Returns Type Description System.Decimal The min value as a decimal. Replace(String, String) Textual and numeric Find and Replace. Replaces all found occurrences of \"oldValue\" with the \"newValue\". Works with all string and numeric values. Declaration public void Replace(string oldValue, string newValue) Parameters Type Name Description System.String oldValue The string to find. System.String newValue The string to replace oldValue with. Row(Int32) Get a row by index Declaration protected RangeRow Row(int index) Parameters Type Name Description System.Int32 index The zero based row index. Returns Type Description RangeRow SetCellValue(Int32, Int32, Object) Set a single cell value using its row and column indexes. Declaration public void SetCellValue(int row, int column, object value) Parameters Type Name Description System.Int32 row Row number within this Range . The first Column is numbered 0. System.Int32 column Column number within this Range . The first row is numbered 0. System.Object value Value for the cell. SortAscending() Sort current range in ascending order. This updates the cell positions within your WorkSheets. Declaration public Range SortAscending() Returns Type Description Range This Range, allowing for a fluent code style. SortDescending() Sort current range in descending order. This updates the cell positions within your WorkSheets. Declaration public Range SortDescending() Returns Type Description Range This Range, allowing for a fluent code style. SubtractRange(Range) Subtracts a range from the current. Result is first range without intersection of two ranges. Declaration public virtual Range SubtractRange(Range range) Parameters Type Name Description Range range The range to remove from the current working range. Returns Type Description Range This Range allowing a fluent coding style. Sum() Returns sum of all numeric cells . Declaration public Decimal Sum() Returns Type Description System.Decimal The sum value as a decimal. ToDataTable(Boolean) Get System.Data.DataTable representation of current range. Useful when working with DataGrids, System.Data, SQL or Entity Framework Declaration public DataTable ToDataTable(bool useFirstRowAsColumnNames = false) Parameters Type Name Description System.Boolean useFirstRowAsColumnNames Indicates whether to use first row as column names or not Returns Type Description System.Data.DataTable A System.Data.DataTable representation of current range. ToString() Returns the StringValue of this Range. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Trim() Removes all empty rows and columns on the range borders. Declaration public Range Trim() Returns Type Description Range This Range, allowing for a fluent code style. TryGetValue<TType>(out TType) Method for safely getting a range's total value. If range contains one cell then method calls GetValue<TType>() of this cell If range contains more than one cell then method tries to cast Sum() of all numeric cells within range to TType Use Try/Catch to avoid possible exceptions from this method if cell content types are inconsistent or contain formula errors. Declaration public bool TryGetValue<TType>(out TType value) Parameters Type Name Description TType value The sum value of the range, expressed as TType. Returns Type Description System.Boolean true if the range's content could be cast to TType. Type Parameters Name Description TType The .net type to which the cell's value will be cast. Exceptions Type Condition System.ArgumentException Range value cannot be casted to {type.Name} Operators Addition(Range, Range) Overloaded + operator, see also AddRange(Range) Declaration public static Range operator +(Range a, Range b) Parameters Type Name Description Range a This Range. Range b Another Range. Both Ranges will be joined in the result. Returns Type Description Range The combination of both ranges' areas. Subtraction(Range, Range) Overloaded - operator, see also SubtractRange(Range) Declaration public static Range operator -(Range a, Range b) Parameters Type Name Description Range a This Range. Range b Another Range which will be subtracted from the first range. Returns Type Description Range All cells in your Range, with any cells in the second Range removed. Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronXL.RangeAddress.html": {
    "href": "api/IronXL.RangeAddress.html",
    "title": "Class RangeAddress | C# Excel API | IronXL",
    "keywords": "Class RangeAddress Class that represents address of the range. Inheritance System.Object RangeAddress Namespace : IronXL Assembly : IronXL.dll Syntax public class RangeAddress : Object Properties ColumnsCount Amount of columns within this address. Declaration public int ColumnsCount { get; } Property Value Type Description System.Int32 FirstColumn Index of the first column within this address. Declaration public int FirstColumn { get; } Property Value Type Description System.Int32 FirstRow Index of the first row within this address. Declaration public int FirstRow { get; } Property Value Type Description System.Int32 LastColumn Index of the last column within this address. Declaration public int LastColumn { get; } Property Value Type Description System.Int32 LastRow Index of the last row within this address. Declaration public int LastRow { get; } Property Value Type Description System.Int32 Location Gets the Range / Cells location in Excel Address selector notation. E.G. \"A1:B16\" Declaration public string Location { get; } Property Value Type Description System.String The Range's location expressed as an Excel Address selector string. RowsCount Amount of rows within this address. Declaration public int RowsCount { get; } Property Value Type Description System.Int32 Methods Extend(RangeAddress) Declaration public RangeAddress Extend(RangeAddress rangeAddress) Parameters Type Name Description RangeAddress rangeAddress Returns Type Description RangeAddress Includes(Int32, Int32) Check whether this range address contains target cell. Declaration public bool Includes(int row, int col) Parameters Type Name Description System.Int32 row The row of the cell. zero based. System.Int32 col The column of the cell. zero based. E.g. column A is 0 Returns Type Description System.Boolean true if that specified cell falls within this RangeAddress IsEqual(RangeAddress) Determines whether the specified ranges are equal. Declaration public bool IsEqual(RangeAddress range) Parameters Type Name Description RangeAddress range The range. Returns Type Description System.Boolean true if the specified range is equal; otherwise, false . ToString() Converts to string of the location of the range in Excel Address selector notation. E.G. \"A4:D87\" Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance."
  },
  "api/IronXL.RangeColumn.html": {
    "href": "api/IronXL.RangeColumn.html",
    "title": "Class RangeColumn | C# Excel API | IronXL",
    "keywords": "Class RangeColumn A class that represents a single column of cells. Inheritance System.Object Range RangeColumn Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Inherited Members Range.GetEnumerator() Range.Sum() Range.Max() Range.Min() Range.Avg() Range.SortAscending() Range.SortDescending() Range.Trim() Range.ToDataTable(Boolean) Range.SetCellValue(Int32, Int32, Object) Range.GetValue<TType>() Range.TryGetValue<TType>(TType) Range.ToString() Range.Copy(WorkSheet, String) Range.Replace(String, String) Range.GetAllRows() Range.GetAllColumns() Range.Row(Int32) Range.Column(Int32) Range.RangeAddressAsString Range.IsEmpty Range.Value Range.Rows Range.Columns Range.Style Range.WorkBook Range.DateTimeValue Range.StringValue Range.BoolValue Range.IntValue Range.DoubleValue Range.DecimalValue Range.FloatValue Range.Int64Value Range.LongValue Range.Int32Value Namespace : IronXL Assembly : IronXL.dll Syntax public class RangeColumn : Range Properties Hidden Gets or sets a value indicating whether this column is hidden. Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean RangeAddress Address of the column. Declaration public RangeAddress RangeAddress { get; } Property Value Type Description RangeAddress Width Gets or sets the width of the column. Declaration public int Width { get; set; } Property Value Type Description System.Int32 Methods AddRange(Range) Add range to the current column if they can be combined. Declaration public override Range AddRange(Range range) Parameters Type Name Description Range range The range to add to the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.AddRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be added to the current column because they are not on the same line or cannot be combined in one column SubtractRange(Range) Subtract range from the current column if it can be subtracted. Declaration public override Range SubtractRange(Range range) Parameters Type Name Description Range range The range to remove from the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.SubtractRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be subtracted from the current column because result column isn't continuous Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable Inherited members GetEnumerator() Sum() Max() Min() Avg() SortAscending() SortDescending() Trim() ToDataTable(Boolean) SetCellValue(Int32, Int32, Object) GetValue<TType>() TryGetValue<TType>(TType) ToString() Copy(WorkSheet, String) Replace(String, String) GetAllRows() GetAllColumns() Row(Int32) Column(Int32) RangeAddressAsString IsEmpty Value Rows Columns Style WorkBook DateTimeValue StringValue BoolValue IntValue DoubleValue DecimalValue FloatValue Int64Value LongValue Int32Value"
  },
  "api/IronXL.RangeRow.html": {
    "href": "api/IronXL.RangeRow.html",
    "title": "Class RangeRow | C# Excel API | IronXL",
    "keywords": "Class RangeRow A class that represents a single row of cells. Inheritance System.Object Range RangeRow Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Inherited Members Range.GetEnumerator() Range.Sum() Range.Max() Range.Min() Range.Avg() Range.SortAscending() Range.SortDescending() Range.Trim() Range.ToDataTable(Boolean) Range.SetCellValue(Int32, Int32, Object) Range.GetValue<TType>() Range.TryGetValue<TType>(TType) Range.ToString() Range.Copy(WorkSheet, String) Range.Replace(String, String) Range.GetAllRows() Range.GetAllColumns() Range.Row(Int32) Range.Column(Int32) Range.RangeAddressAsString Range.IsEmpty Range.Value Range.Rows Range.Columns Range.Style Range.WorkBook Range.DateTimeValue Range.StringValue Range.BoolValue Range.IntValue Range.DoubleValue Range.DecimalValue Range.FloatValue Range.Int64Value Range.LongValue Range.Int32Value Namespace : IronXL Assembly : IronXL.dll Syntax public class RangeRow : Range Properties Height Gets or sets the height of the row. Declaration public int Height { get; set; } Property Value Type Description System.Int32 Hidden Gets or sets a value indicating whether this row is hidden. Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean RangeAddress Address of the row. Declaration public RangeAddress RangeAddress { get; } Property Value Type Description RangeAddress Methods AddRange(Range) Add range to the current row if they can be combined. Declaration public override Range AddRange(Range range) Parameters Type Name Description Range range The range to add to the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.AddRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be added to the current row because they are not on the same line or cannot be combined in one row SubtractRange(Range) Subtract range from the current row if it can be subtracted Declaration public override Range SubtractRange(Range range) Parameters Type Name Description Range range The range to remove from the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.SubtractRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be subtracted from the current row because result row isn't continuous Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable Inherited members GetEnumerator() Sum() Max() Min() Avg() SortAscending() SortDescending() Trim() ToDataTable(Boolean) SetCellValue(Int32, Int32, Object) GetValue<TType>() TryGetValue<TType>(TType) ToString() Copy(WorkSheet, String) Replace(String, String) GetAllRows() GetAllColumns() Row(Int32) Column(Int32) RangeAddressAsString IsEmpty Value Rows Columns Style WorkBook DateTimeValue StringValue BoolValue IntValue DoubleValue DecimalValue FloatValue Int64Value LongValue Int32Value"
  },
  "api/IronXL.Styles.BorderType.html": {
    "href": "api/IronXL.Styles.BorderType.html",
    "title": "Class BorderType | C# Excel API | IronXL",
    "keywords": "Class BorderType The enumeration value indicating the line style of a border in a cell Inheritance System.Object BorderType Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class BorderType : Enum Fields DashDot dash-dot border Declaration public const BorderType DashDot Field Value Type Description BorderType DashDotDot dash-dot-dot border Declaration public const BorderType DashDotDot Field Value Type Description BorderType Dashed dash border Declaration public const BorderType Dashed Field Value Type Description BorderType Dotted dot border Declaration public const BorderType Dotted Field Value Type Description BorderType Double double-line border Declaration public const BorderType Double Field Value Type Description BorderType Hair hair-line border Declaration public const BorderType Hair Field Value Type Description BorderType Medium Medium border Declaration public const BorderType Medium Field Value Type Description BorderType MediumDashDot medium dash-dot border Declaration public const BorderType MediumDashDot Field Value Type Description BorderType MediumDashDotDot medium dash-dot-dot border Declaration public const BorderType MediumDashDotDot Field Value Type Description BorderType MediumDashed Medium dashed border Declaration public const BorderType MediumDashed Field Value Type Description BorderType None No border Declaration public const BorderType None Field Value Type Description BorderType SlantedDashDot slanted dash-dot border Declaration public const BorderType SlantedDashDot Field Value Type Description BorderType Thick Thick border Declaration public const BorderType Thick Field Value Type Description BorderType Thin Thin border Declaration public const BorderType Thin Field Value Type Description BorderType value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.DiagonalBorderDirection.html": {
    "href": "api/IronXL.Styles.DiagonalBorderDirection.html",
    "title": "Class DiagonalBorderDirection | C# Excel API | IronXL",
    "keywords": "Class DiagonalBorderDirection Enum that stands for direction of diagonal border inside cell Inheritance System.Object DiagonalBorderDirection Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class DiagonalBorderDirection : Enum Fields Backward Backward diagonal border, from left-top to right-bottom Declaration public const DiagonalBorderDirection Backward Field Value Type Description DiagonalBorderDirection Both Both forward and backward diagonal border Declaration public const DiagonalBorderDirection Both Field Value Type Description DiagonalBorderDirection Forward Forward diagonal border, from right-top to left-bottom Declaration public const DiagonalBorderDirection Forward Field Value Type Description DiagonalBorderDirection None No diagonal border Declaration public const DiagonalBorderDirection None Field Value Type Description DiagonalBorderDirection value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.FillPattern.html": {
    "href": "api/IronXL.Styles.FillPattern.html",
    "title": "Class FillPattern | C# Excel API | IronXL",
    "keywords": "Class FillPattern The enumeration value indicating the style of fill pattern being used for a cell format. Inheritance System.Object FillPattern Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class FillPattern : Enum Fields AltBars Wide dots Declaration public const FillPattern AltBars Field Value Type Description FillPattern BigSpots Large spots Declaration public const FillPattern BigSpots Field Value Type Description FillPattern Bricks Brick-like layout Declaration public const FillPattern Bricks Field Value Type Description FillPattern Diamonds Diamonds Declaration public const FillPattern Diamonds Field Value Type Description FillPattern FineDots Small fine dots Declaration public const FillPattern FineDots Field Value Type Description FillPattern LeastDots Least Dots Declaration public const FillPattern LeastDots Field Value Type Description FillPattern LessDots Less Dots Declaration public const FillPattern LessDots Field Value Type Description FillPattern NoFill No background Declaration public const FillPattern NoFill Field Value Type Description FillPattern SolidForeground Solidly Filled Declaration public const FillPattern SolidForeground Field Value Type Description FillPattern SparseDots Sparse dots Declaration public const FillPattern SparseDots Field Value Type Description FillPattern Squares Squares Declaration public const FillPattern Squares Field Value Type Description FillPattern ThickBackwardDiagonals Thick backward facing diagonals Declaration public const FillPattern ThickBackwardDiagonals Field Value Type Description FillPattern ThickForwardDiagonals Thick forward facing diagonals Declaration public const FillPattern ThickForwardDiagonals Field Value Type Description FillPattern ThickHorizontalBands Thick horizontal bands Declaration public const FillPattern ThickHorizontalBands Field Value Type Description FillPattern ThickVerticalBands Thick vertical bands Declaration public const FillPattern ThickVerticalBands Field Value Type Description FillPattern ThinBackwardDiagonals Thin backward diagonal Declaration public const FillPattern ThinBackwardDiagonals Field Value Type Description FillPattern ThinForwardDiagonals Thin forward diagonal Declaration public const FillPattern ThinForwardDiagonals Field Value Type Description FillPattern ThinHorizontalBands Thin horizontal bands Declaration public const FillPattern ThinHorizontalBands Field Value Type Description FillPattern ThinVerticalBands Thin vertical bands Declaration public const FillPattern ThinVerticalBands Field Value Type Description FillPattern value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.FontScript.html": {
    "href": "api/IronXL.Styles.FontScript.html",
    "title": "Class FontScript | C# Excel API | IronXL",
    "keywords": "Class FontScript Enum that stands for position of the symbol Inheritance System.Object FontScript Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class FontScript : Enum Fields None Default symbol position Declaration public const FontScript None Field Value Type Description FontScript Sub Stands for position when symbol is at the bottom of the line Declaration public const FontScript Sub Field Value Type Description FontScript Super Stands for position when symbol is on the top of the line Declaration public const FontScript Super Field Value Type Description FontScript value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Styles.FontUnderlineType.html": {
    "href": "api/IronXL.Styles.FontUnderlineType.html",
    "title": "Class FontUnderlineType | C# Excel API | IronXL",
    "keywords": "Class FontUnderlineType Enum that stands for different types of font underline Inheritance System.Object FontUnderlineType Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class FontUnderlineType : Enum Fields Double A double underline Declaration public const FontUnderlineType Double Field Value Type Description FontUnderlineType DoubleAccounting An accounting style double underline Declaration public const FontUnderlineType DoubleAccounting Field Value Type Description FontUnderlineType None Not underlined Declaration public const FontUnderlineType None Field Value Type Description FontUnderlineType Single A single (normal) underline as used in word processing Declaration public const FontUnderlineType Single Field Value Type Description FontUnderlineType SingleAccounting An accounting style single underline Declaration public const FontUnderlineType SingleAccounting Field Value Type Description FontUnderlineType value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.HorizontalAlignment.html": {
    "href": "api/IronXL.Styles.HorizontalAlignment.html",
    "title": "Class HorizontalAlignment | C# Excel API | IronXL",
    "keywords": "Class HorizontalAlignment The enumeration value indicating horizontal alignment of a cell, I.e., whether it is aligned general, left, right, horizontally centered, Filled (replicated), justified, centered across multiple cells, or distributed. Inheritance System.Object HorizontalAlignment Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class HorizontalAlignment : Enum Fields Center The horizontal alignment is centered, meaning the text is centered across the cell. Declaration public const HorizontalAlignment Center Field Value Type Description HorizontalAlignment CenterSelection The horizontal alignment is centered across multiple cells. The information about how many cells to span is expressed in the Sheet Part, in the row of the cell in question. For each cell that is spanned in the alignment, a cell element needs to be written out, with the same style Id which references the centerContinuous alignment. Declaration public const HorizontalAlignment CenterSelection Field Value Type Description HorizontalAlignment Distributed Indicates that each 'word' in each line of text inside the cell is evenly distributed across the width of the cell, with flush right and left margins. When there is also an indent value to apply, both the left and right side of the cell are pAdded by the indent value. A 'word' is a set of characters with no space character in them. Two lines inside a cell are Separated by a carriage return. Declaration public const HorizontalAlignment Distributed Field Value Type Description HorizontalAlignment Fill Indicates that the value of the cell should be Filled across the entire width of the cell. If blank cells to the right also have the fill alignment, they are also Filled with the value, using a convention similar to centerContinuous. Additional rules: Only whole values can be Appended, not partial values. The column will not be widened to 'best fit' the Filled value If Appending an Additional occurrence of the value exceeds the boundary of the cell left/right edge, don't append the Additional occurrence of the value. The display value of the cell is Filled, not the underlying raw number. Declaration public const HorizontalAlignment Fill Field Value Type Description HorizontalAlignment General The horizontal alignment is general-aligned. Text data is left-aligned. Numbers, dates, and times are right aligned. Boolean types are centered. Changing the alignment does not change the type of data. Declaration public const HorizontalAlignment General Field Value Type Description HorizontalAlignment Justify The horizontal alignment is justified (flush left and right). For each line of text, aligns each line of the wrapped text in a cell to the right and left (except the last line). If no single line of text wraps in the cell, then the text is not justified. Declaration public const HorizontalAlignment Justify Field Value Type Description HorizontalAlignment Left The horizontal alignment is left-aligned, even in Right-to-Left mode. Aligns contents at the left edge of the cell. If an indent amount is specified, the contents of the cell is indented from the left by the specified number of character spaces. The character spaces are based on the default font and font size for the workbook. Declaration public const HorizontalAlignment Left Field Value Type Description HorizontalAlignment Right The horizontal alignment is right-aligned, meaning that cell contents are aligned at the right edge of the cell, even in Right-to-Left mode. Declaration public const HorizontalAlignment Right Field Value Type Description HorizontalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Styles.html": {
    "href": "api/IronXL.Styles.html",
    "title": "Namespace IronXL.Styles | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Styles Classes BorderType The enumeration value indicating the line style of a border in a cell DiagonalBorderDirection Enum that stands for direction of diagonal border inside cell FillPattern The enumeration value indicating the style of fill pattern being used for a cell format. FontScript Enum that stands for position of the symbol FontUnderlineType Enum that stands for different types of font underline HorizontalAlignment The enumeration value indicating horizontal alignment of a cell, I.e., whether it is aligned general, left, right, horizontally centered, Filled (replicated), justified, centered across multiple cells, or distributed. VerticalAlignment This enumeration value indicates the type of vertical alignment for a cell, i.e., whether it is aligned top, bottom, vertically centered, justified or distributed. Interfaces IBorder Interface for cell border value IFont Interface for cell font value IStylable Interface for indicating that certain Excel unit has it's own style IStyle Interface for cell style"
  },
  "api/IronXL.Styles.IBorder.html": {
    "href": "api/IronXL.Styles.IBorder.html",
    "title": "Interface IBorder | C# Excel API | IronXL",
    "keywords": "Interface IBorder Interface for cell border value Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IBorder Properties Color Property that returns border color in rgb format. Declaration string Color { get; } Property Value Type Description System.String Type Gets or sets the type of the border line. See BorderType Declaration BorderType Type { get; set; } Property Value Type Description BorderType Methods SetColor(Color) Method for setting border color with System.Drawing.Color value Declaration void SetColor(Color color) Parameters Type Name Description System.Drawing.Color color Color value SetColor(String) Method for setting border color with the rgb string. Declaration void SetColor(string rgb) Parameters Type Name Description System.String rgb Color rgb value"
  },
  "api/IronXL.Styles.IFont.html": {
    "href": "api/IronXL.Styles.IFont.html",
    "title": "Interface IFont | C# Excel API | IronXL",
    "keywords": "Interface IFont Interface for cell font value Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IFont Properties Bold Property that indicates if cell font is bold Declaration bool Bold { get; set; } Property Value Type Description System.Boolean Color Property that returns font color in rgb format. Declaration string Color { get; } Property Value Type Description System.String FontScript Gets or sets script property of font. Also take a look at FontScript to get list of available options Declaration FontScript FontScript { get; set; } Property Value Type Description FontScript Height Gets or sets font size in px Declaration short Height { get; set; } Property Value Type Description System.Int16 Italic Property that indicates if cell font is italic Declaration bool Italic { get; set; } Property Value Type Description System.Boolean Name Gets or sets font name Declaration string Name { get; set; } Property Value Type Description System.String Strikeout Get whether to use a strikeout horizontal line through the text or not Declaration bool Strikeout { get; set; } Property Value Type Description System.Boolean Underline Gets or sets underline property of font. Also take a look at FontUnderlineType to get list of available options Declaration FontUnderlineType Underline { get; set; } Property Value Type Description FontUnderlineType Methods SetColor(Color) Method for setting font color with System.Drawing.Color value Declaration void SetColor(Color color) Parameters Type Name Description System.Drawing.Color color Color value SetColor(String) Method for setting font color with the rgb string. Declaration void SetColor(string rgb) Parameters Type Name Description System.String rgb Color rgb value"
  },
  "api/IronXL.Styles.IStylable.html": {
    "href": "api/IronXL.Styles.IStylable.html",
    "title": "Interface IStylable | C# Excel API | IronXL",
    "keywords": "Interface IStylable Interface for indicating that certain Excel unit has it's own style Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IStylable Properties Style Cell style Declaration IStyle Style { get; } Property Value Type Description IStyle"
  },
  "api/IronXL.Styles.IStyle.html": {
    "href": "api/IronXL.Styles.IStyle.html",
    "title": "Interface IStyle | C# Excel API | IronXL",
    "keywords": "Interface IStyle Interface for cell style Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IStyle Properties BackgroundColor Gets the color of the background in rgb format. E.g. #ffffff Declaration string BackgroundColor { get; } Property Value Type Description System.String BottomBorder Property that represents cell bottom border Declaration IBorder BottomBorder { get; } Property Value Type Description IBorder DiagonalBorder Property that represents cell diagonal border Declaration IBorder DiagonalBorder { get; } Property Value Type Description IBorder DiagonalBorderDirection Gets or sets the diagonal border direction value. Declaration DiagonalBorderDirection DiagonalBorderDirection { get; set; } Property Value Type Description DiagonalBorderDirection FillPattern Gets or sets fill pattern of the cell. Declaration FillPattern FillPattern { get; set; } Property Value Type Description FillPattern Font Property that represents cell font value Declaration IFont Font { get; } Property Value Type Description IFont HorizontalAlignment Gets or sets the horizontal alignment of the cell. Declaration HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment Indention Get the number of spaces to indent the text in the cell Declaration short Indention { get; set; } Property Value Type Description System.Int16 LeftBorder Property that represents cell left border Declaration IBorder LeftBorder { get; } Property Value Type Description IBorder RightBorder Property that represents cell right border Declaration IBorder RightBorder { get; } Property Value Type Description IBorder Rotation Get the degree of rotation (between -90 and 90 degrees) for the text in the cell Declaration short Rotation { get; set; } Property Value Type Description System.Int16 ShrinkToFit Gets or sets a value indicating whether the cell should be auto-sized to shrink to fit if the text is too long Declaration bool ShrinkToFit { get; set; } Property Value Type Description System.Boolean TopBorder Property that represents cell top border Declaration IBorder TopBorder { get; } Property Value Type Description IBorder VerticalAlignment Gets or sets the vertical alignment of the cell. Declaration VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment WrapText Bool property that indicates if text is wrapped Declaration bool WrapText { get; set; } Property Value Type Description System.Boolean Methods SetBackgroundColor(Color) Method for setting cell background color with System.Drawing.Color value Declaration void SetBackgroundColor(Color color) Parameters Type Name Description System.Drawing.Color color Color value SetBackgroundColor(String) Method for setting cell background color with an rgb string. Declaration void SetBackgroundColor(string rgb) Parameters Type Name Description System.String rgb Color RGB value"
  },
  "api/IronXL.Styles.VerticalAlignment.html": {
    "href": "api/IronXL.Styles.VerticalAlignment.html",
    "title": "Class VerticalAlignment | C# Excel API | IronXL",
    "keywords": "Class VerticalAlignment This enumeration value indicates the type of vertical alignment for a cell, i.e., whether it is aligned top, bottom, vertically centered, justified or distributed. Inheritance System.Object VerticalAlignment Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class VerticalAlignment : Enum Fields Bottom The vertical alignment is aligned-to-bottom. Declaration public const VerticalAlignment Bottom Field Value Type Description VerticalAlignment Center The vertical alignment is centered across the height of the cell. Declaration public const VerticalAlignment Center Field Value Type Description VerticalAlignment Distributed When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top When text direction is vertical: behaves exactly as distributed horizontal alignment. The first words in a line of text (appearing at the top of the cell) are flush with the top edge of the cell, and the last words of a line of text are flush with the bottom edge of the cell, and the line of text is distributed evenly from top to bottom. Declaration public const VerticalAlignment Distributed Field Value Type Description VerticalAlignment Justify When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top and bottom margins. When text direction is vertical: similar behavior as horizontal justification. The alignment is justified (flush top and bottom in this case). For each line of text, each line of the wrapped text in a cell is aligned to the top and bottom (except the last line). If no single line of text wraps in the cell, then the text is not justified. Declaration public const VerticalAlignment Justify Field Value Type Description VerticalAlignment None The alignment is default Declaration public const VerticalAlignment None Field Value Type Description VerticalAlignment Top The vertical alignment is aligned-to-top. Declaration public const VerticalAlignment Top Field Value Type Description VerticalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.WorkBook.html": {
    "href": "api/IronXL.WorkBook.html",
    "title": "Class WorkBook | C# Excel API | IronXL",
    "keywords": "Class WorkBook Class that stands for a whole Excel file. This is the first object most users will construct whether they are reading or writing a workbook. It is also the top level (home-base) object for creating new sheets and most other Excel programing operations. Inheritance System.Object WorkBook Namespace : IronXL Assembly : IronXL.dll Syntax public class WorkBook : Object Constructors WorkBook(ExcelFileFormat) Initializes a new instance of the WorkBook class as a new empty spreadsheet in XLS or XLSX format. /// Declaration public WorkBook(ExcelFileFormat fileFormat) Parameters Type Name Description ExcelFileFormat fileFormat The excel file format. XLS (legacy) or XLSX (preferred). See Also Create() WorkBook(String) Loads a new instance of the WorkBook by loading a CSV, TSV, XLS or XLSX file. Declaration public WorkBook(string spreadSheetFilePath) Parameters Type Name Description System.String spreadSheetFilePath The spread sheet file path to load into IronXL. Properties DefaultWorkSheet Gets the default (first) work sheet in the workbook. Declaration public WorkSheet DefaultWorkSheet { get; } Property Value Type Description WorkSheet The default work sheet or null . Metadata Gets the metadata of the document. Declaration public IMetadata Metadata { get; } Property Value Type Description IMetadata WorkSheets List of worksheets within current workbook Declaration public WorksheetsCollection WorkSheets { get; } Property Value Type Description WorksheetsCollection The work sheets as a list. Can be accessed as WorkBook.WorkSheets[0]. Methods Close() Closes the workbook object. Once this has been called, no further operations, updates or reads should be performed on the Workbook. Declaration public void Close() Create() Create new XLSX Excel WorkBook . Declaration public static WorkBook Create() Returns Type Description WorkBook A new WorkBook Create(ExcelFileFormat) Create new workbook with the specified format. Declaration public static WorkBook Create(ExcelFileFormat fileFormat) Parameters Type Name Description ExcelFileFormat fileFormat The excel file format. XLSX or XLS Returns Type Description WorkBook A new WorkBook Create(CreatingOptions) Create new workbook with the specified options. Declaration public static WorkBook Create(CreatingOptions options) Parameters Type Name Description CreatingOptions options Advanced workbook creation options object. Returns Type Description WorkBook A new WorkBook Exceptions Type Condition System.Exception CreateWorkSheet(String) Create new worksheet with the specified name Declaration public WorkSheet CreateWorkSheet(string name) Parameters Type Name Description System.String name The name of the new worksheet. Returns Type Description WorkSheet A new WorkSheet within this WorkBook . ExportToHtml(String) Declaration public WorkBook ExportToHtml(string filename) Parameters Type Name Description System.String filename Returns Type Description WorkBook ExportToHtml(String, HtmlExportOptions) Export workbook to the HTML file with the specified name. Declaration public WorkBook ExportToHtml(string filename, HtmlExportOptions options) Parameters Type Name Description System.String filename Filename to save with HtmlExportOptions options Options to customize result file view. Returns Type Description WorkBook ExportToHtml(String, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public WorkBook ExportToHtml(string filename, bool outputColumnHeaders = true, bool outputHiddenColumns = false, bool outputHiddenRows = true, bool outputLeadingSpacesAsNonBreaking = true, bool outputRowNumbers = true) Parameters Type Name Description System.String filename System.Boolean outputColumnHeaders System.Boolean outputHiddenColumns System.Boolean outputHiddenRows System.Boolean outputLeadingSpacesAsNonBreaking System.Boolean outputRowNumbers Returns Type Description WorkBook GetWorkSheet(String) Returns a WorkSheet within this WorkBook ; identified by its name. Returns null if the named worksheet would not be found. Declaration public WorkSheet GetWorkSheet(string workSheetName) Parameters Type Name Description System.String workSheetName Name of the work sheet to select. Returns Type Description WorkSheet The specified WorkSheet . Returns null if the named worksheet would not be found. Import(String, ExcelFileFormat) Imports and creates a new workbook from specified CSV, TSV, JSON or XML file. Declaration public static WorkBook Import(string filename, ExcelFileFormat fileFormat) Parameters Type Name Description System.String filename The path of the file to import. ExcelFileFormat fileFormat The excel file format to generate with the imported data. XLS or XLSX. XLSX is preferred and default. Returns Type Description WorkBook The loaded spreadsheet as a WorkBook . Load(DataSet, CreatingOptions) Load workbook from specified System.Data.DataSet Declaration public static WorkBook Load(DataSet dataset, CreatingOptions options = null) Parameters Type Name Description System.Data.DataSet dataset CreatingOptions options Returns Type Description WorkBook Load(String) Load workbook from specified file. Shortcut synonym for LoadExcel(String) Declaration public static WorkBook Load(string filename) Parameters Type Name Description System.String filename The pat of the file to load. Returns Type Description WorkBook A new WorkBook Load(String, LoadingOptions) Load workbook from a specified file. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML. Declaration public static WorkBook Load(string filename, LoadingOptions options) Parameters Type Name Description System.String filename The path of the file to load. LoadingOptions options Advanced options when importing non Excel formats. Returns Type Description WorkBook An Excel WorkBook object. Exceptions Type Condition System.Exception A general exception with a detailed developer message. System.FormatException Unsupported file extension. Supported formats are: XLS, XLSX, CSV, TSV. Load(String, String, ExcelFileFormat) Declaration public static WorkBook Load(string filename, string listDelimiter = null, ExcelFileFormat fileFormat) Parameters Type Name Description System.String filename System.String listDelimiter ExcelFileFormat fileFormat Returns Type Description WorkBook LoadCSV(String, ExcelFileFormat, String) Imports and creates a new workbook from specified CSV or TSV file. Declaration public static WorkBook LoadCSV(string filename, ExcelFileFormat fileFormat, string ListDelimiter = null) Parameters Type Name Description System.String filename The path of the file to import. ExcelFileFormat fileFormat The excel file format to generate with the imported data. XLS or XLSX. XLSX is preferred and default. System.String ListDelimiter The column list delimiter. Default (null) will refer to the system default settings. Returns Type Description WorkBook The imported spreadsheet as a WorkBook object LoadExcel(String) Load workbook from specified file. Declaration public static WorkBook LoadExcel(string filename) Parameters Type Name Description System.String filename The pat of the file to load. Returns Type Description WorkBook A new WorkBook LoadWorkSheet(DataTable) Export workbook to a native System.Data System.Data.DataSet . Each worksheet represents a System.Data.DataTable within the System.Data.DataSet . Useful when moving data between Excel and SQL. Declaration public WorkSheet LoadWorkSheet(DataTable table) Parameters Type Name Description System.Data.DataTable table Returns Type Description WorkSheet RemoveWorkSheet(Int32) Remove worksheet with the specified position within workbook. Declaration public void RemoveWorkSheet(int index) Parameters Type Name Description System.Int32 index RemoveWorkSheet(String) Remove worksheet with the specified name. Declaration public void RemoveWorkSheet(string name) Parameters Type Name Description System.String name SaveAs(String) Save workbook with the specified filename. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML Declaration public WorkBook SaveAs(string fileName) Parameters Type Name Description System.String fileName A file path to save the spreadsheet to. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. SaveAs(String, SavingOptions) Save workbook with the specified filename. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML Declaration public WorkBook SaveAs(string fileName, SavingOptions options) Parameters Type Name Description System.String fileName A file path to save the spreadsheet to. SavingOptions options Advanced file saving options. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. Exceptions Type Condition System.FormatException Unsupported file extension. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML SaveAs(String, String) Declaration public WorkBook SaveAs(string fileName, string listDelimiter = null) Parameters Type Name Description System.String fileName System.String listDelimiter Returns Type Description WorkBook SaveAsCsv(String, String) Exports the Excel file as CSV. Declaration public void SaveAsCsv(string filename, string delimiter = null) Parameters Type Name Description System.String filename The CSV file path. System.String delimiter The CSV column delimiter. Leave this null to use the system default. SaveAsJson(String) Exports the Excel file as JSON. Declaration public void SaveAsJson(string filename) Parameters Type Name Description System.String filename The JSON file path. SaveAsXml(String) Exports the Excel file as XML. Declaration public void SaveAsXml(string filename) Parameters Type Name Description System.String filename The XML file path. SetActiveTab(Int32) Set index (zero-based) of the active tab Declaration public void SetActiveTab(int index) Parameters Type Name Description System.Int32 index SetSheetPosition(String, Int32) Set new tab zero-indexed position within workbook for the specified worksheet. Declaration public void SetSheetPosition(string sheetName, int index) Parameters Type Name Description System.String sheetName System.Int32 index ToBinary() Converts workbook to a binary representation. Declaration public byte[] ToBinary() Returns Type Description System.Byte [] A byte array of the excel file contents ToDataSet(Boolean) Convert workbook to System.Data.DataSet where each worksheet represents System.Data.DataTable Declaration public DataSet ToDataSet(bool useFirstRowAsColumnNames = false) Parameters Type Name Description System.Boolean useFirstRowAsColumnNames if set to true [use first row as column names]. Returns Type Description System.Data.DataSet A System.Data.DataSet containing the entire WorkBook. ToStream() Converts workbook to a memory stream. Declaration public MemoryStream ToStream() Returns Type Description System.IO.MemoryStream A System.IO.MemoryStream of the excel file contents"
  },
  "api/IronXL.WorkSheet.html": {
    "href": "api/IronXL.WorkSheet.html",
    "title": "Class WorkSheet | C# Excel API | IronXL",
    "keywords": "Class WorkSheet Class that stands for single sheet within Excel file. Inheritance System.Object Range WorkSheet Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Inherited Members Range.GetEnumerator() Range.Sum() Range.Max() Range.Min() Range.Avg() Range.AddRange(Range) Range.SubtractRange(Range) Range.SortAscending() Range.SortDescending() Range.Trim() Range.ToDataTable(Boolean) Range.SetCellValue(Int32, Int32, Object) Range.GetValue<TType>() Range.TryGetValue<TType>(TType) Range.ToString() Range.Copy(WorkSheet, String) Range.Replace(String, String) Range.GetAllRows() Range.GetAllColumns() Range.Row(Int32) Range.Column(Int32) Range.RangeAddressAsString Range.IsEmpty Range.Value Range.Rows Range.Columns Range.Style Range.WorkBook Range.DateTimeValue Range.StringValue Range.BoolValue Range.IntValue Range.DoubleValue Range.DecimalValue Range.FloatValue Range.Int64Value Range.LongValue Range.Int32Value Namespace : IronXL Assembly : IronXL.dll Syntax public class WorkSheet : Range Properties Charts Declaration public List<IChart> Charts { get; } Property Value Type Description System.Collections.Generic.List < IChart > ConditionalFormatting Declaration public ISheetConditionalFormatting ConditionalFormatting { get; } Property Value Type Description ISheetConditionalFormatting DisplayGridlines Gets or sets a value indicating whether to display grid-lines. Declaration public bool DisplayGridlines { get; set; } Property Value Type Description System.Boolean true if the sheet displays grid-lines; otherwise, false . FitToPage Flag indicating whether the Fit to Page print option is enabled. Declaration public bool FitToPage { get; set; } Property Value Type Description System.Boolean Footer Gets the print footer of the worksheet. Declaration public IFooter Footer { get; } Property Value Type Description IFooter The Footer . Header Gets the print header of the worksheet. Declaration public IHeader Header { get; } Property Value Type Description IHeader The Header . Hidden Indicates whether this worksheet visible, hidden or very hidden. Declaration public HiddenState Hidden { get; set; } Property Value Type Description HiddenState HorizontallyCenter Determine whether printed output for this sheet will be horizontally centered. Declaration public bool HorizontallyCenter { get; set; } Property Value Type Description System.Boolean Images A list of images contained within the sheet. Declaration public List<IImage> Images { get; } Property Value Type Description System.Collections.Generic.List < IImage > Index Gets the index of the worksheet within workbook. Declaration public int Index { get; } Property Value Type Description System.Int32 IsPrintGridlines Gets or sets a value indicating whether to display grid-lines when printing. Declaration public bool IsPrintGridlines { get; set; } Property Value Type Description System.Boolean true if this sheet displays print grid-lines; otherwise, false . Item[String] Indexer for getting range with specified range address. Range MyRange = workSheet[\"A12:B18\"] Declaration public Range this[string rangeAddress] { get; } Parameters Type Name Description System.String rangeAddress E.g. A12:B18 Property Value Type Description Range The Range . Name Worksheet name Declaration public string Name { get; set; } Property Value Type Description System.String PrintSetup Gets the print setup object. Declaration public IPrintSetup PrintSetup { get; } Property Value Type Description IPrintSetup The PrintSetup for this WorkSheet. VerticallyCenter Determine whether printed output for this sheet will be vertically centered. Declaration public bool VerticallyCenter { get; set; } Property Value Type Description System.Boolean true if the sheet is vertically centered; otherwise, false . Methods CopySheet(String) Duplicates this WorkSheet within the same excel WorkBook . Declaration public WorkSheet CopySheet(string name) Parameters Type Name Description System.String name The name of the new WorkSheet Returns Type Description WorkSheet This WorkSheet allowing for a fluent, in-line coding style. Exceptions Type Condition System.ArgumentException Duplicate sheet names are not allowed. CopyTo(WorkBook, String) Copies worksheet to another workbook with the specified name. Declaration public void CopyTo(WorkBook workBook, string name) Parameters Type Name Description WorkBook workBook The WorkBook where this worksheet will be copied to. System.String name The new name of the copied worksheet. Exceptions Type Condition System.ArgumentException Duplicate sheet names are not allowed. CreateChart(ChartType, Int32, Int32, Int32, Int32) Declaration public IChart CreateChart(ChartType type, int row1, int col1, int row2, int col2) Parameters Type Name Description ChartType type System.Int32 row1 System.Int32 col1 System.Int32 row2 System.Int32 col2 Returns Type Description IChart CreateChart(ChartType, Int32, String, Int32, String) Declaration public IChart CreateChart(ChartType type, int row1, string col1, int row2, string col2) Parameters Type Name Description ChartType type System.Int32 row1 System.String col1 System.Int32 row2 System.String col2 Returns Type Description IChart CreateFreezePane(Int32, Int32) Creates a freeze pane. Any existing freeze pane or split pane is overwritten. Declaration public void CreateFreezePane(int colSplit, int rowSplit) Parameters Type Name Description System.Int32 colSplit Horizontal position of split. System.Int32 rowSplit Vertical position of split. CreateFreezePane(Int32, Int32, Int32, Int32) Creates a freeze pane. Any existing freeze pane or split pane is overwritten. Declaration public void CreateFreezePane(int colSplit, int rowSplit, int leftmostColumn, int topRow) Parameters Type Name Description System.Int32 colSplit Horizontal position of split. System.Int32 rowSplit Vertical position of split. System.Int32 leftmostColumn Top row visible in bottom pane System.Int32 topRow Left column visible in right pane. CreateSplitPane(Int32, Int32, Int32, Int32, PanePosition) Creates a split pane. Any existing freeze pane or split pane is overwritten. Declaration public void CreateSplitPane(int xSplitPos, int ySplitPos, int leftmostColumn, int topRow, PanePosition activePane) Parameters Type Name Description System.Int32 xSplitPos Horizontal position of split in px. System.Int32 ySplitPos Vertical position of split in px. System.Int32 leftmostColumn Left column visible in right pane. System.Int32 topRow Top row visible in bottom pane. PanePosition activePane Active pane. GetRange(String) Get range with specified range address E.g. Range myRange = mySheet.GetRange(\"A1:C62\") Declaration public Range GetRange(string range) Parameters Type Name Description System.String range The range address within the sheet. E.g. \"B12:B29\" Returns Type Description Range The specified Range GroupColumns(Int32, Int32) Group multiple columns within the specified range together. Grouping and ungrouping is layered and calling GroupColumns(Int32, Int32) twice requires two calls of UngroupColumns(Int32, Int32) with appropriate ranges to remove all groupings. Declaration public void GroupColumns(int startColumn, int endColumn) Parameters Type Name Description System.Int32 startColumn The start column index. System.Int32 endColumn The end column index. GroupColumns(String, String) Declaration public void GroupColumns(string startColumn, string endColumn) Parameters Type Name Description System.String startColumn System.String endColumn GroupRows(Int32, Int32) Group multiple rows within the specified range together. Grouping and ungrouping is layered and calling GroupRows(Int32, Int32) twice requires two calls of UngroupRows(Int32, Int32) with appropriate ranges to remove all groupings. Declaration public void GroupRows(int startRow, int endRow) Parameters Type Name Description System.Int32 startRow The start row index. System.Int32 endRow The end row index. InsertImage(String, Int32, Int32, Int32, Int32) Inserts image from the specified path to the worksheet. The size of the picture is defined by col/row coordinates. Declaration public IImage InsertImage(string path, int col1, int row1, int col2, int row2) Parameters Type Name Description System.String path The path to the image file. System.Int32 col1 The left column to place the image. System.Int32 row1 The top row to place the image. System.Int32 col2 The right column to place the image. System.Int32 row2 The bottom row to place the image. Returns Type Description IImage The inserted IronXL.Drawing.Images.Image object. Exceptions Type Condition System.ArgumentException Unsupported image format. Supported formats are: JPG/JPEG, BMP, PNG, GIF, TIFF InsertImage(String, String, Int32, String, Int32) Declaration public IImage InsertImage(string path, string col1, int row1, string col2, int row2) Parameters Type Name Description System.String path System.String col1 System.Int32 row1 System.String col2 System.Int32 row2 Returns Type Description IImage Merge(String) Merges the specified range into a single cell. Declaration public int Merge(string range) Parameters Type Name Description System.String range The Excel range selector as a string. E.g. \"B1:C1\" Returns Type Description System.Int32 Index of the created merged region. See Unmerge(Int32) . ProtectSheet(String) Protects the sheet. Declaration public void ProtectSheet(string password) Parameters Type Name Description System.String password The password. RemoveChart(IChart) Declaration public void RemoveChart(IChart chart) Parameters Type Name Description IChart chart RemoveColumnBreak(Int32) Declaration public void RemoveColumnBreak(int column) Parameters Type Name Description System.Int32 column RemoveImage(Int32) Removes the image by its id. Id can be retrieved from the IImage object Declaration public void RemoveImage(int id) Parameters Type Name Description System.Int32 id The image id [identifier]. RemovePane() Removes the freeze or the split pane. Declaration public void RemovePane() RemoveRepeatingColumns() Reset repeating columns for the print title of the worksheet. Declaration public void RemoveRepeatingColumns() RemoveRepeatingRows() Reset repeating rows for the print title of the worksheet. Declaration public void RemoveRepeatingRows() RemoveRowBreak(Int32) Declaration public void RemoveRowBreak(int row) Parameters Type Name Description System.Int32 row SaveAs(String) Exports the worksheet with as a new worksheet to: CSV, TSV, JSON, Excel or XML Declaration public WorkSheet SaveAs(string filename) Parameters Type Name Description System.String filename The new filename. Export format will be detected by the file extension specified. Returns Type Description WorkSheet This WorkSheet, allowing for an in-line fluent coding style. Exceptions Type Condition System.FormatException Unsupported extension. Supported formats for worksheet are: CSV, TSV, JSON, XML SaveAsCsv(String, String) Saves the worksheet into a new CSV file. Declaration public void SaveAsCsv(string filename, string delimiter = null) Parameters Type Name Description System.String filename The new CSV filename. System.String delimiter The CSV column delimiter. leave this null for default system behavior. SaveAsJson(String) Saves the worksheet into a new JSON file. Declaration public void SaveAsJson(string filename) Parameters Type Name Description System.String filename The new JSON filename. SaveAsNewExcelFile(String, ExcelFileFormat) Saves the worksheet into a new excel file on disk. Declaration public void SaveAsNewExcelFile(string filename, ExcelFileFormat excelFormat) Parameters Type Name Description System.String filename The new Excel filename. ExcelFileFormat excelFormat The Excel format. XLSX is preferred and default. SaveAsXml(String) Saves the worksheet into a new XML file. Declaration public void SaveAsXml(string filename) Parameters Type Name Description System.String filename The new XML filename. SetActiveCell(Int32, Int32) Method for setting cell with specified row and column indexes to be active. Declaration public void SetActiveCell(int row, int col) Parameters Type Name Description System.Int32 row System.Int32 col SetAutoFilter(Int32, Int32, Int32, Int32) Enable filtering for a range of cells. Declaration public void SetAutoFilter(int firstRow, int lastRow, int firstColumn, int lastColumn) Parameters Type Name Description System.Int32 firstRow First row of the range to filter. System.Int32 lastRow Last of the range to filter. System.Int32 firstColumn First column of the range to filter. System.Int32 lastColumn Last column of the range to filter. SetAutoFilter(String) Enable filtering for a range of cells. Declaration public void SetAutoFilter(string range) Parameters Type Name Description System.String range The range of cells to filter. SetColumnBreak(Int32) Declaration public void SetColumnBreak(int column) Parameters Type Name Description System.Int32 column SetPrintArea(String) Sets the print area for this worksheet. E.g. \"A1:X82\" Declaration public void SetPrintArea(string range) Parameters Type Name Description System.String range The cell range to specify as the print area. E.g. \"A1:X82\" SetRepeatingColumns(Int32, Int32) Set repeating columns for the print title of the worksheet. Declaration public void SetRepeatingColumns(int startColumn, int endColumn) Parameters Type Name Description System.Int32 startColumn System.Int32 endColumn SetRepeatingColumns(String, String) Declaration public void SetRepeatingColumns(string startColumn, string endColumn) Parameters Type Name Description System.String startColumn System.String endColumn SetRepeatingRows(Int32, Int32) Set repeating rows for the print title of the worksheet. Declaration public void SetRepeatingRows(int startRow, int endRow) Parameters Type Name Description System.Int32 startRow System.Int32 endRow SetRowBreak(Int32) Declaration public void SetRowBreak(int row) Parameters Type Name Description System.Int32 row SetZoom(Int32) Sets the zoom scale for this worksheet. 100 is normal zoom. Declaration public void SetZoom(int scale) Parameters Type Name Description System.Int32 scale The scale percentage. 100 is normal zoom. ToArray() Converts the worksheet to flattened array of cells. Declaration public Cell[] ToArray() Returns Type Description Cell [] An array of Cell objects. ToMultiDimensionalArray() Convert worksheet to two-dimensional array of cells Declaration public Cell[][] ToMultiDimensionalArray() Returns Type Description Cell [][] An 2 dimensional array of Cell objects. UngroupColumn(String, String) Declaration public void UngroupColumn(string startColumn, string endColumn) Parameters Type Name Description System.String startColumn System.String endColumn UngroupColumns(Int32, Int32) Ungroup all columns within the specified range. Grouping and ungrouping is layered and calling GroupColumns(Int32, Int32) twice requires two calls of UngroupColumns(Int32, Int32) with appropriate ranges to remove all groupings. Declaration public void UngroupColumns(int startColumn, int endColumn) Parameters Type Name Description System.Int32 startColumn The start column index. System.Int32 endColumn The end column index. UngroupRows(Int32, Int32) Ungroup all rows within the specified range. Grouping and ungrouping is layered and calling GroupRows(Int32, Int32) twice requires two calls of UngroupRows(Int32, Int32) with appropriate ranges to remove all groupings. Declaration public void UngroupRows(int startRow, int endRow) Parameters Type Name Description System.Int32 startRow The start row index. System.Int32 endRow The end row index. Unmerge(Int32) Un-Merges the specified merge region by index. To learn about indexes, see Merge(String) . Declaration public void Unmerge(int index) Parameters Type Name Description System.Int32 index The index. To learn about indexes see Merge(String) Unmerge(String) Un-Merges a specified range of cells. Declaration public void Unmerge(string range) Parameters Type Name Description System.String range The Excel range selector for the merged region as a string. E.g. \"B1:C1\" Exceptions Type Condition System.ArgumentException Merged region was not found. UnprotectSheet() Unprotects the sheet. Declaration public void UnprotectSheet() UnsetAutoFilter() Unset filtering for a current worksheet. Declaration public void UnsetAutoFilter() Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable Inherited members GetEnumerator() Sum() Max() Min() Avg() AddRange(Range) SubtractRange(Range) SortAscending() SortDescending() Trim() ToDataTable(Boolean) SetCellValue(Int32, Int32, Object) GetValue<TType>() TryGetValue<TType>(TType) ToString() Copy(WorkSheet, String) Replace(String, String) GetAllRows() GetAllColumns() Row(Int32) Column(Int32) RangeAddressAsString IsEmpty Value Rows Columns Style WorkBook DateTimeValue StringValue BoolValue IntValue DoubleValue DecimalValue FloatValue Int64Value LongValue Int32Value"
  },
  "api/IronXL.WorksheetsCollection.html": {
    "href": "api/IronXL.WorksheetsCollection.html",
    "title": "Class WorksheetsCollection | C# Excel API | IronXL",
    "keywords": "Class WorksheetsCollection Inheritance System.Object WorksheetsCollection Implements System.Collections.Generic.IList < WorkSheet > System.Collections.Generic.ICollection < WorkSheet > System.Collections.Generic.IEnumerable < WorkSheet > System.Collections.IEnumerable Namespace : IronXL Assembly : IronXL.dll Syntax public class WorksheetsCollection : Object Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Item[Int32] Declaration public WorkSheet this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description WorkSheet Methods Add(WorkSheet) Declaration public void Add(WorkSheet item) Parameters Type Name Description WorkSheet item Clear() Declaration public void Clear() Contains(WorkSheet) Declaration public bool Contains(WorkSheet item) Parameters Type Name Description WorkSheet item Returns Type Description System.Boolean CopyTo(WorkSheet[], Int32) Declaration public void CopyTo(WorkSheet[] array, int arrayIndex) Parameters Type Name Description WorkSheet [] array System.Int32 arrayIndex Create(String) Declaration public WorkSheet Create(string name) Parameters Type Name Description System.String name Returns Type Description WorkSheet FindIndex(Predicate<WorkSheet>) Declaration public int FindIndex(Predicate<WorkSheet> predicate) Parameters Type Name Description System.Predicate < WorkSheet > predicate Returns Type Description System.Int32 GetEnumerator() Declaration public IEnumerator<WorkSheet> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < WorkSheet > IndexOf(WorkSheet) Declaration public int IndexOf(WorkSheet item) Parameters Type Name Description WorkSheet item Returns Type Description System.Int32 Insert(Int32, WorkSheet) Declaration public void Insert(int index, WorkSheet item) Parameters Type Name Description System.Int32 index WorkSheet item Remove(WorkSheet) Declaration public bool Remove(WorkSheet item) Parameters Type Name Description WorkSheet item Returns Type Description System.Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index SetSheetIndex(WorkSheet, Int32) Declaration public void SetSheetIndex(WorkSheet sheet, int index) Parameters Type Name Description WorkSheet sheet System.Int32 index Implements System.Collections.Generic.IList<> System.Collections.Generic.ICollection<> System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  }
}
{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronXL - The Excel Library for .Net | C# Excel API | IronXL",
    "keywords": "IronXL - The Excel Library for .Net IronXL is an Excel Library for C# and .Net which allows developers to Read and edit Excel data from XLS and XLSX Documents without using Microsoft.Office.Interop.Excel IronXL allows developers to Read, Generate and Edit Excel (and other Spreadsheet files) in .Net Applications & websites. A fast and natural approach to work with Excel and Other Spreadsheet files in C#. Quickstart Guide: https://ironsoftware.com/csharp/excel/ Nuget Package : https://www.nuget.org/packages/IronXL.Excel/ Key Library Features Intuitive C# & VB.NET Excel Spreadsheet API No need to install MS Office or Excel Interop Read, edit & create Excel spreadsheet files Fully supports .NET Core, Framework, and Azure Import Data from XLS/XLSX/CSV/TSV. Export Work Sheets to XLS/XLSX/CSV/TSV/JSON. Work with Spreadsheets as System.Data.DataSet and System.Data.DataTable objects. Excel Formulas recalculated every time a sheet it edited. Intuitive Ranges setting with a WorkSheet[\"A1:B10\"] syntax. Sort Ranges, Columns and Rows. Style Cells - Font, Size, Background pattern, Border, Alignment and Number formats. Compatibility IronXL works well in C#, VB.NET, MVC, ASP.NET projects for Websites, Console & Desktop APPs. Works with: .NET Core 2 , 3 & 5 .NET Standard 2 & 3 .NET Framework 4.5 and above Xamarin, SharePoint, Mono Azure, AWS, Cloud hosting Windows, Linux, Mac, Mobile Does NOT require Excel or MS office to be installed. C# Excel Code Example using IronXL; //Create new Excel WorkBook document. //The default file format is XLSX, but we can override that for legacy support WorkBook xlsWorkbook = WorkBook.Create(ExcelFileFormat.XLS); xlsWorkbook.Metadata.Author = \"IronXL\"; //Add a blank WorkSheet WorkSheet xlsSheet = xlsWorkbook.CreateWorkSheet(\"new_sheet\"); //Add data and styles to the new worksheet xlsSheet[\"A1\"].Value = \"Hello World\"; xlsSheet[\"A2\"].Style.BottomBorder.SetColor(\"#ff6600\"); xlsSheet[\"A2\"].Style.BottomBorder.Type = IronXL.Styles.BorderType.Double; //Save the excel file xlsWorkbook.SaveAs(\"NewExcelFile.xls\"); Further Documentation Code Samples : https://ironsoftware.com/csharp/excel/examples/read-excel/ Tutorials : https://ironsoftware.com/csharp/excel/tutorials/how-to-read-excel-file-csharp/ Nuget Package Manager : https://www.nuget.org/packages/IronXL.Excel/ Support : developers@ironsoftware.com"
  },
  "api/IronXL.Cell.html": {
    "href": "api/IronXL.Cell.html",
    "title": "Class Cell | C# Excel API | IronXL",
    "keywords": "Class Cell Represents a Cell in an Excel WorkSheet. Inheritance System.Object Cell Namespace : IronXL Assembly : IronXL.dll Syntax public class Cell : Object Properties Address The location of this Cell within the WorkSheet Address of the cell in a WorkSheet represented as a RangeAddress . Declaration public RangeAddress Address { get; } Property Value Type Description RangeAddress AddressString Gets the cell location in Excel Notation. E.G. \"A12\" Declaration public string AddressString { get; } Property Value Type Description System.String The cell location. BoolValue Gets or sets the boolean value of a cell. Declaration public virtual bool BoolValue { get; set; } Property Value Type Description System.Boolean true if the cell is TRUE, or contains a number greater than zero. false otherwise. ColumnIndex Zero-based column index of a column in the sheet that contains this cell. e.g. if this Cell is in Excel col \"A\": ColumnIndex will equal 0 Declaration public int ColumnIndex { get; } Property Value Type Description System.Int32 DateTimeValue Gets or sets the date time value of this Cell . Declaration public Nullable<DateTime> DateTimeValue { get; set; } Property Value Type Description System.Nullable < System.DateTime > The System.DateTime value of this Cell .. null if the cell can not be cast as dateTime; DecimalValue Gets or sets the numeric System.Decimal value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual Decimal DecimalValue { get; set; } Property Value Type Description System.Decimal The System.Decimal value of the cell. DoubleValue Gets or sets the numeric System.Double value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual double DoubleValue { get; set; } Property Value Type Description System.Double The System.Double value of the cell. FloatValue Gets or sets the numeric System.Single value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual float FloatValue { get; set; } Property Value Type Description System.Single The System.Single value of the cell. FormatString The Excel Cell format as a string . E.g. $#.00 or 0.00% or m/d/yyyy Read more about number formats at https://www.ablebits.com/office-addins-blog/2016/07/07/custom-excel-number-format/ Declaration public string FormatString { get; set; } Property Value Type Description System.String Remarks You can find the list of the built-in format strings in the class BuiltinFormats . See Also BuiltinFormats FormattedCellValue Returns the Cell value as a human readable string. FormattedCellValue applies cell formatting exactly as displayed in Excel, rather than the raw numerical values that underlie the sheet. Declaration public string FormattedCellValue { get; } Property Value Type Description System.String Formula Property to get or set cell's formula. e.g. =A2+A2+A3+A4 Declaration public string Formula { get; set; } Property Value Type Description System.String Hyperlink Property to get or set the cell's value as a hyperlink. Available link types are: A URL starting with http:// , https:// or ftp:// An Email starting with mailto: A file by specifying absolute path starting with file:/// A cell or defined name in the current spreadsheet Declaration public string Hyperlink { get; set; } Property Value Type Description System.String Int32Value Gets or sets the numeric System.Int32 value of the cell. If the cell is non-numeric - zero will be returned. Synonym of IronXL.Cells.Cell.IntValue Declaration public virtual int Int32Value { get; set; } Property Value Type Description System.Int32 The System.Int32 value of the cell. Int64Value Gets or sets the numeric System.Int64 value of the cell. If the cell is non-numeric - zero will be returned. Synonym of IronXL.Cells.Cell.LongValue Declaration public virtual long Int64Value { get; set; } Property Value Type Description System.Int64 The System.Int64 value of the cell. IntValue Gets or sets the System.Int32 value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual int IntValue { get; set; } Property Value Type Description System.Int32 The System.Int32 value of the cell. IsBoolean Gets a value indicating whether this instance is boolean. Declaration public bool IsBoolean { get; } Property Value Type Description System.Boolean true if this cell is boolean; otherwise, false . IsDateTime Boolean property that indicates if cell contains System.DateTime value. Declaration public bool IsDateTime { get; } Property Value Type Description System.Boolean true if this cell contains a DateTime; otherwise, false . IsEmpty Boolean property that indicates if cell is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean IsError Boolean property that indicates if cell has an error in its formula. Declaration public bool IsError { get; } Property Value Type Description System.Boolean IsFormula Boolean property that indicates if cell contains a formula. Declaration public bool IsFormula { get; } Property Value Type Description System.Boolean true if this cell contains a formula; otherwise, false . IsNumeric Boolean property that indicates if this Cell contains a numeric value: E.g. cell contains a number such as decimal, int, long, float, double etc. Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean true if this cell is a number; otherwise, false . IsText Boolean property that indicates if cell contains a string value. Declaration public bool IsText { get; } Property Value Type Description System.Boolean true if this cell is text; otherwise, false . Location Gets the cell location in Excel Notation. E.G. \"A12\" Synonym of AddressString . Declaration public string Location { get; } Property Value Type Description System.String The cell location. LongValue Gets or sets the numeric System.Int64 value of the cell. If the cell is non-numeric - zero will be returned. Declaration public virtual long LongValue { get; set; } Property Value Type Description System.Int64 The System.Int64 value of the cell. RowIndex Zero-based row index of the row in the sheet that contains this cell. e.g. if this Cell is in Excel row 3: RowIndex will equal 2 Declaration public int RowIndex { get; } Property Value Type Description System.Int32 StringValue Gets or sets the string value of this Cell. Declaration public virtual string StringValue { get; set; } Property Value Type Description System.String The string value of the cell. Numbers and dates will be rendered into readable strings; as displayed in Excel. Error end NAN cells will return as a null string Style The visual Style of this Cell. Declaration public IStyle Style { get; } Property Value Type Description IStyle See Also IStyle Text Gets or sets the string value of this Cell. Synonym of IronXL.Cells.ICell.StringValue . Declaration public string Text { get; set; } Property Value Type Description System.String The text as displayed in the cell. Value Property to Get or Set the cell's value. Cells may be get or set as types: System.Double , System.Decimal , System.Single , System.Int64 , System.Int32 , System.Boolean , System.DateTime or System.String . See IsFormula , IsEmpty , IsDateTime , IsNumeric , IsText and TryGetValue<TType>(out TType) for elegantly parsing sheets with unknown content. When System.DateTime values, the default Excel date display format is 'M/D/YY h:mm'. Use SetDateTimeValue(DateTime, String) to set a custom date display format Declaration public object Value { get; set; } Property Value Type Description System.Object See Also FormattedCellValue Methods Copy(WorkSheet, String) Copies the specified cell to the sheet and inserts it at the specified point. Declaration public void Copy(WorkSheet sheet, string pointToInsert) Parameters Type Name Description WorkSheet sheet The worksheet to insert. System.String pointToInsert Point to insert. e.g. \"A7\". Evaluate() Evaluates the formula, if the cell contains a formula, and saves the result of the formula. The cell remains as a formula cell. Else if the cell does not contain formula, this method leaves the cell unchanged. Declaration public Cell Evaluate() Returns Type Description Cell GetValue<TType>() An method for getting a strongly-typed cell value which may throw cast exceptions if data is not in the System.Type expected. Throws System.ArgumentException if casting to TType is impossible. Use Try/Catch or TryGetValue<TType>(out TType) to cast cell values without possible exceptions. See Value for the list of valid types. Declaration public TType GetValue<TType>() Returns Type Description TType The value of the cell, cast as TType. E.g: double, decimal, float, long, int, bool, DateTime, string or object. Type Parameters Name Description TType The type of .net object to cast the result as. E.g: double, decimal, float, long, int, bool, DateTime, string or object. Exceptions Type Condition System.ArgumentException Cannot convert cell value to {type.Name} type. Please try another TType argument.\" + $\" You can also use boolean properties IsNumeric/IsText/etc.. to get information about cell value type. SetDateTimeValue(DateTime, String) Method for setting System.DateTime value with custom format. Declaration public void SetDateTimeValue(DateTime value, string format) Parameters Type Name Description System.DateTime value DateTime value System.String format Custom date format as a string. e.g. M/d/yyyy ToString() Gets the text content of this Cell . Declaration public override string ToString() Returns Type Description System.String A System.String that represents the text content of this Cell . TryGetValue<TType>(out TType) Safe method for getting a strongly-typed cell value. See Value for the list of valid types. e.g. bool OK = Cell.TryGetValue<double>(double result); Declaration public bool TryGetValue<TType>(out TType value) Parameters Type Name Description TType value true if the value could be cast successfully as TType. Else false . Returns Type Description System.Boolean The value of the cell, cast as TType. E.g: double, decimal, float, long, int, bool, DateTime, string or object. Type Parameters Name Description TType The type of .net object to cast the result as. E.g: double, decimal, float, long, int, bool, DateTime, string or object."
  },
  "api/IronXL.Drawing.AnchorType.html": {
    "href": "api/IronXL.Drawing.AnchorType.html",
    "title": "Class AnchorType | C# Excel API | IronXL",
    "keywords": "Class AnchorType Enum that represents type of the anchor of the graphic object to the WorkSheet. Applies to charts, images, and other graphical objects attached to WorkSheets. Inheritance System.Object AnchorType Namespace : IronXL.Drawing Assembly : IronXL.dll Syntax public sealed class AnchorType : Enum Fields DontMoveAndResize Unable to move and resize Declaration public const AnchorType DontMoveAndResize Field Value Type Description AnchorType MoveAndResize Move and resize anchor Declaration public const AnchorType MoveAndResize Field Value Type Description AnchorType MoveDontResize Move but don't resize Declaration public const AnchorType MoveDontResize Field Value Type Description AnchorType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Drawing.Charts.ChartType.html": {
    "href": "api/IronXL.Drawing.Charts.ChartType.html",
    "title": "Class ChartType | C# Excel API | IronXL",
    "keywords": "Class ChartType List of available chart types Inheritance System.Object ChartType Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public sealed class ChartType : Enum Fields Area The area chart Declaration public const ChartType Area Field Value Type Description ChartType Bar The bar chart Declaration public const ChartType Bar Field Value Type Description ChartType Column The column chart Declaration public const ChartType Column Field Value Type Description ChartType Line The line chart Declaration public const ChartType Line Field Value Type Description ChartType Pie The pie chart Declaration public const ChartType Pie Field Value Type Description ChartType Scatter The scatter chart Declaration public const ChartType Scatter Field Value Type Description ChartType value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Drawing.Charts.html": {
    "href": "api/IronXL.Drawing.Charts.html",
    "title": "Namespace IronXL.Drawing.Charts | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Drawing.Charts Classes ChartType List of available chart types LegendPosition Enum that represents the position of the legend. Setting position to None removes legend. Interfaces IChart Top-level interface that represents Excel chart IChartSeries Interface that represents single series within chart."
  },
  "api/IronXL.Drawing.Charts.IChart.html": {
    "href": "api/IronXL.Drawing.Charts.IChart.html",
    "title": "Interface IChart | C# Excel API | IronXL",
    "keywords": "Interface IChart Top-level interface that represents Excel chart Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public interface IChart Properties Position Gets the position of the chart Declaration Position Position { get; } Property Value Type Description Position Methods AddSeries(String) Adds the series to the chart. Declaration IChartSeries AddSeries(string values) Parameters Type Name Description System.String values Address of the values range. Returns Type Description IChartSeries Created chart series. AddSeries(String, String) Adds the series to the chart. Declaration IChartSeries AddSeries(string xRange, string yRange) Parameters Type Name Description System.String xRange Address of the range for horizontal axis. System.String yRange Address of the range for vertical axis. Returns Type Description IChartSeries Created chart series. Plot() Plots all the data that was added to the chart before. The behavior of this method is similar to commiting all new series changes to the chart. Declaration void Plot() SetLegendPosition(LegendPosition) Sets the legend position. Setting None removes the legend. Declaration void SetLegendPosition(LegendPosition position) Parameters Type Name Description LegendPosition position SetTitle(String) Sets the title of the series. Declaration void SetTitle(string title) Parameters Type Name Description System.String title the title of the chart"
  },
  "api/IronXL.Drawing.Charts.IChartSeries.html": {
    "href": "api/IronXL.Drawing.Charts.IChartSeries.html",
    "title": "Interface IChartSeries | C# Excel API | IronXL",
    "keywords": "Interface IChartSeries Interface that represents single series within chart. Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public interface IChartSeries Properties Title Gets or sets the title of the series. Declaration string Title { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Drawing.Charts.LegendPosition.html": {
    "href": "api/IronXL.Drawing.Charts.LegendPosition.html",
    "title": "Class LegendPosition | C# Excel API | IronXL",
    "keywords": "Class LegendPosition Enum that represents the position of the legend. Setting position to None removes legend. Inheritance System.Object LegendPosition Namespace : IronXL.Drawing.Charts Assembly : IronXL.dll Syntax public sealed class LegendPosition : Enum Fields Bottom The bottom position of the legend. Declaration public const LegendPosition Bottom Field Value Type Description LegendPosition Left The left position of the legend. Declaration public const LegendPosition Left Field Value Type Description LegendPosition None Value that stands for hidden legend. This is set by default Declaration public const LegendPosition None Field Value Type Description LegendPosition Right The right position of the legend. Declaration public const LegendPosition Right Field Value Type Description LegendPosition Top The top position of the legend. Declaration public const LegendPosition Top Field Value Type Description LegendPosition TopRight The top right position of the legend. Declaration public const LegendPosition TopRight Field Value Type Description LegendPosition value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Drawing.html": {
    "href": "api/IronXL.Drawing.html",
    "title": "Namespace IronXL.Drawing | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Drawing Classes AnchorType Enum that represents type of the anchor of the graphic object to the WorkSheet. Applies to charts, images, and other graphical objects attached to WorkSheets. Position Class that represents a graphic object position within a WorkSheet"
  },
  "api/IronXL.Drawing.Images.html": {
    "href": "api/IronXL.Drawing.Images.html",
    "title": "Namespace IronXL.Drawing.Images | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Drawing.Images Classes ImageFormat Enum that represents type of the loaded image. Interfaces IImage Interface that represents a picture in a Excel document."
  },
  "api/IronXL.Drawing.Images.IImage.html": {
    "href": "api/IronXL.Drawing.Images.IImage.html",
    "title": "Interface IImage | C# Excel API | IronXL",
    "keywords": "Interface IImage Interface that represents a picture in a Excel document. Namespace : IronXL.Drawing.Images Assembly : IronXL.dll Syntax public interface IImage Properties Data Gets the byte representation of the image. Declaration byte[] Data { get; } Property Value Type Description System.Byte [] Id Gets the index of the image in workbook array. Declaration int Id { get; } Property Value Type Description System.Int32 ImageFormat Gets the format of the image. Declaration ImageFormat ImageFormat { get; } Property Value Type Description ImageFormat Position Gets the position of the image. Declaration Position Position { get; } Property Value Type Description Position Methods Resize() Reset the image to the dimension of the embedded image Declaration void Resize() Resize(Double) Resize the image proportionally. Declaration void Resize(double scale) Parameters Type Name Description System.Double scale The scale percentage. Resize(Double, Double) Resize the image. Please note, that this method works correctly only for workbooks with the default font size (Arial 10pt for .xls and Calibri 11pt for .xlsx). If the default font is changed the resized image can be stretched vertically or horizontally. Declaration void Resize(double scaleX, double scaleY) Parameters Type Name Description System.Double scaleX The scale x (horizontal). 100 is normal scale. System.Double scaleY The scale y (vertical). 100 is normal scale. ToAnyBitmap() Creates IronSoftware.Drawing.AnyBitmap object from the image data(array of bytes). Note : Don't forget to release all the resources used by this Bitmap calling Dispose() method. Declaration AnyBitmap ToAnyBitmap() Returns Type Description IronSoftware.Drawing.AnyBitmap The newly created IronSoftware.Drawing.AnyBitmap object ToImage() Creates System.Drawing.Image object from the image data(array of bytes). Note : Don't forget to release all the resources used by this Image calling Dispose() method. Declaration Image ToImage() Returns Type Description SixLabors.ImageSharp.Image The newly created SixLabors.ImageSharp.Image object"
  },
  "api/IronXL.Drawing.Images.ImageFormat.html": {
    "href": "api/IronXL.Drawing.Images.ImageFormat.html",
    "title": "Class ImageFormat | C# Excel API | IronXL",
    "keywords": "Class ImageFormat Enum that represents type of the loaded image. Inheritance System.Object ImageFormat Namespace : IronXL.Drawing.Images Assembly : IronXL.dll Syntax public sealed class ImageFormat : Enum Fields BMP Windows Bitmap (.bmp) Declaration public const ImageFormat BMP Field Value Type Description ImageFormat GIF GIF image format Declaration public const ImageFormat GIF Field Value Type Description ImageFormat JPEG JPEG format Declaration public const ImageFormat JPEG Field Value Type Description ImageFormat PNG PNG format Declaration public const ImageFormat PNG Field Value Type Description ImageFormat TIFF Tag Image File (.tiff) Declaration public const ImageFormat TIFF Field Value Type Description ImageFormat value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Drawing.Position.html": {
    "href": "api/IronXL.Drawing.Position.html",
    "title": "Class Position | C# Excel API | IronXL",
    "keywords": "Class Position Class that represents a graphic object position within a WorkSheet Inheritance System.Object Position Namespace : IronXL.Drawing Assembly : IronXL.dll Syntax public class Position : Object Properties AnchorType Gets or sets the way in which the image is anchored to the WorkSheet cells. Declaration public AnchorType AnchorType { get; set; } Property Value Type Description AnchorType See Also AnchorType BottomRowIndex Returns the 0-based index of the last row the graphic object is \"attached\" to. e.g. if BottomRowIndex equals 0, Excel row coordinate will equal 1 Declaration public int BottomRowIndex { get; set; } Property Value Type Description System.Int32 LeftColumnIndex Returns the 0-based index of the first column the graphic object is \"attached\" to. e.g. if Col1 equals 0, Excel column coordinate will equal \"A\" Declaration public int LeftColumnIndex { get; set; } Property Value Type Description System.Int32 LeftColumnLetter Gets or sets the left column letter, e.g. \"A\" This property is an alternative way to set column coordinates. Also take a look at LeftColumnIndex . Declaration public string LeftColumnLetter { get; set; } Property Value Type Description System.String The left column letter. RightColumnIndex Returns the 0-based index of the last column the graphic object is \"attached\" to. e.g. if RightColumnIndex equals 0, Excel column coordinate will equal \"A\" Declaration public int RightColumnIndex { get; set; } Property Value Type Description System.Int32 RightColumnLetter Gets or sets the left column letter, e.g. \"A\" This property is an alternative way to set column coordinates. Also take a look at RightColumnIndex . Declaration public string RightColumnLetter { get; set; } Property Value Type Description System.String The right column letter. TopRowIndex Returns the 0-based index of the first row the graphic object is \"attached\" to. e.g. if TopRowIndex equals 0, Excel row coordinate will equal 1 Declaration public int TopRowIndex { get; set; } Property Value Type Description System.Int32"
  },
  "api/IronXL.ExcelFileFormat.html": {
    "href": "api/IronXL.ExcelFileFormat.html",
    "title": "Class ExcelFileFormat | C# Excel API | IronXL",
    "keywords": "Class ExcelFileFormat Enum that represents the Excel file format which will be used for new workbook creation. XLS or XLSX (preferred). Inheritance System.Object ExcelFileFormat Namespace : IronXL Assembly : IronXL.dll Syntax public sealed class ExcelFileFormat : Enum Fields value__ Declaration public int value__ Field Value Type Description System.Int32 XLS Option stands for the old XLS Excel format (1997-2003) Declaration public const ExcelFileFormat XLS Field Value Type Description ExcelFileFormat XLSX Option stands for the new XLSX Excel format (2007+) Declaration public const ExcelFileFormat XLSX Field Value Type Description ExcelFileFormat"
  },
  "api/IronXL.Formatting.BuiltinFormats.html": {
    "href": "api/IronXL.Formatting.BuiltinFormats.html",
    "title": "Class BuiltinFormats | C# Excel API | IronXL",
    "keywords": "Class BuiltinFormats The class contains the built-in formats. Inheritance System.Object BuiltinFormats Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public static class BuiltinFormats : Object Fields Accounting0 Returns the built-in format string for a accounting value with zero digits after the dot. (\"#,##0_);(#,##0)\") Declaration public static readonly string Accounting0 Field Value Type Description System.String Accounting0Red Returns the built-in format string for a accounting value without digits after the dot and red style for negative value. (#,##0_); Red \"\") Declaration public static readonly string Accounting0Red Field Value Type Description System.String Accounting2 Returns the built-in format string for a accounting value with two digits after the dot. (\"#,##0.00);(#,##0.00)\") Declaration public static readonly string Accounting2 Field Value Type Description System.String Accounting2Red Returns the built-in format string for a accounting value with two digits after the dot and red style for negative value. (\"#,##0.00_); Red \") Declaration public static readonly string Accounting2Red Field Value Type Description System.String Currency0 Returns the built-in format string for a currency value with zero digits after the dot. (\"$#,##0_);($#,##0)\") Declaration public static readonly string Currency0 Field Value Type Description System.String Currency0Red Returns the built-in format string for a currency value without digits after the dot and red style for negative value. (\"$#,##0_); Red \") Declaration public static readonly string Currency0Red Field Value Type Description System.String Currency2 Returns the built-in format string for a currency value with two digits after the dot. (\"$#,##0.00);($#,##0.00)\") Declaration public static readonly string Currency2 Field Value Type Description System.String Currency2Red Returns the built-in format string for a currency value with two digits after the dot and red style for negative value. (\"$#,##0.00_); Red \") Declaration public static readonly string Currency2Red Field Value Type Description System.String Duration1 Returns the built-in format string for a duration value. (\"mm:ss\") Declaration public static readonly string Duration1 Field Value Type Description System.String Duration2 Returns the built-in format string for a duration value. (\"[h]:mm:ss\") Declaration public static readonly string Duration2 Field Value Type Description System.String Duration3 Returns the built-in format string for a duration value. (\"mm:ss.0\") Declaration public static readonly string Duration3 Field Value Type Description System.String Fraction1 Returns the built-in format string for a fraction with one digit. (\"# ?/?\") Declaration public static readonly string Fraction1 Field Value Type Description System.String Fraction2 Returns the built-in format string for a fraction with two digits. (\"# ??/??\") Declaration public static readonly string Fraction2 Field Value Type Description System.String General Returns the general built-in format string. (\"General\") Declaration public static readonly string General Field Value Type Description System.String LongDate1 Returns the built-in format string for a long date. (\"d-mmm-yy\") Declaration public static readonly string LongDate1 Field Value Type Description System.String LongDate2 Returns the built-in format string for a long date. (\"d-mmm\") Declaration public static readonly string LongDate2 Field Value Type Description System.String LongDate3 Returns the built-in format string for a long date. (\"mmm-yy\") Declaration public static readonly string LongDate3 Field Value Type Description System.String Number0 Returns the built-in format string for a number value without digits after the dot. (\"0\") Declaration public static readonly string Number0 Field Value Type Description System.String Number2 Returns the built-in format string for a number value with two digits after the dot. (\"0.00\") Declaration public static readonly string Number2 Field Value Type Description System.String Percent Returns the built-in format string for a percent without digits after the dot. (\"0%\") Declaration public static readonly string Percent Field Value Type Description System.String Percent2 Returns the built-in format string for a percent with two digits after the dot. (\"0.00%\") Declaration public static readonly string Percent2 Field Value Type Description System.String Scientific1 Returns the built-in format string for a scientific with one digit after the dot. (\"##0.0E+0\") Declaration public static readonly string Scientific1 Field Value Type Description System.String Scientific2 Returns the built-in format string for a scientific with two digits after the dot. (\"0.00E+00\") Declaration public static readonly string Scientific2 Field Value Type Description System.String ShortDate Returns the built-in format string for a short date. (\"m/d/yy\") Declaration public static readonly string ShortDate Field Value Type Description System.String ShortDateAndTime Returns the built-in format string for a short date and time. (\"m/d/yy h:mm\") Declaration public static readonly string ShortDateAndTime Field Value Type Description System.String Text Returns the built-in format string for a text value. (\"@\") Declaration public static readonly string Text Field Value Type Description System.String Thousands0 Returns the built-in format string for a number value with thousands and without digits after the dot. (\"#,##0\") Declaration public static readonly string Thousands0 Field Value Type Description System.String Thousands2 Returns the built-in format string for a number value with thousands and two digits after the dot. (\"#,##0.00\") Declaration public static readonly string Thousands2 Field Value Type Description System.String Time1 Returns the built-in format string for a time. (\"h:mm AM/PM\") Declaration public static readonly string Time1 Field Value Type Description System.String Time2 Returns the built-in format string for a time. (\"h:mm:ss AM/PM\") Declaration public static readonly string Time2 Field Value Type Description System.String Time3 Returns the built-in format string for a time. (\"h:mm\") Declaration public static readonly string Time3 Field Value Type Description System.String Time4 Returns the built-in format string for a time. (\"h:mm:ss\") Declaration public static readonly string Time4 Field Value Type Description System.String"
  },
  "api/IronXL.Formatting.ConditionalFormatting.html": {
    "href": "api/IronXL.Formatting.ConditionalFormatting.html",
    "title": "Class ConditionalFormatting | C# Excel API | IronXL",
    "keywords": "Class ConditionalFormatting The ConditionalFormatting class encapsulates all Settings of Conditional Formatting. Inheritance System.Object ConditionalFormatting Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public class ConditionalFormatting : Object Properties NumberOfRules Gets the number of rules. Declaration public int NumberOfRules { get; } Property Value Type Description System.Int32 The number of rules. Methods AddRule(ConditionalFormattingRule) Add a Conditional Formatting rule. Excel allows to create up to 3 Conditional Formatting rules. Declaration public void AddRule(ConditionalFormattingRule cfRule) Parameters Type Name Description ConditionalFormattingRule cfRule The Conditional Formatting rule GetFormattingRanges() Returns the list of ranges to apply formatting. Declaration public List<RangeAddress> GetFormattingRanges() Returns Type Description System.Collections.Generic.List < RangeAddress > List of range addresses. GetRule(Int32) Returns the Conditional Formatting rule at specified position. Declaration public ConditionalFormattingRule GetRule(int idx) Parameters Type Name Description System.Int32 idx Position of the rule. Returns Type Description ConditionalFormattingRule The Conditional Formatting rule at specified position. SetRule(Int32, ConditionalFormattingRule) Replaces an existing Conditional Formatting rule at position idx. Excel allows to create up to 3 Conditional Formatting rules. This method can be useful to modify existing Conditional Formatting rules. Declaration public void SetRule(int idx, ConditionalFormattingRule cfRule) Parameters Type Name Description System.Int32 idx Position of the rule. Should be between 0 and 2. ConditionalFormattingRule cfRule Conditional Formatting rule"
  },
  "api/IronXL.Formatting.ConditionalFormattingRule.html": {
    "href": "api/IronXL.Formatting.ConditionalFormattingRule.html",
    "title": "Class ConditionalFormattingRule | C# Excel API | IronXL",
    "keywords": "Class ConditionalFormattingRule Represents a description of a conditional formatting rule. Inheritance System.Object ConditionalFormattingRule Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public class ConditionalFormattingRule : Object Properties BorderFormatting Gets the border formatting. Declaration public IBorderFormatting BorderFormatting { get; } Property Value Type Description IBorderFormatting The border formatting. ComparisonOperation The comparison function used when the type of conditional formatting is Set to CellValueIs Declaration public ComparisonOperator ComparisonOperation { get; } Property Value Type Description ComparisonOperator The conditional format operator. ConditionType Type of conditional formatting rule. MUST be either CellValueIs or NPOI.SS.Formula.Formula Declaration public ConditionType ConditionType { get; } Property Value Type Description ConditionType The type of condition. FontFormatting Gets the font formatting. Declaration public IFontFormatting FontFormatting { get; } Property Value Type Description IFontFormatting The font formatting. Formula1 The formula used to Evaluate the first operand for the conditional formatting rule. If the condition type is CellValueIs this field is the first operand of the comparison. If type is NPOI.SS.Formula.Formula , this formula is used to determine if the conditional formatting is applied. If comparison type is NPOI.SS.Formula.Formula the formula MUST be a Boolean function Declaration public string Formula1 { get; } Property Value Type Description System.String The first formula of the rule Formula2 The formula used to Evaluate the second operand of the comparison when condition type is CellValueIs and operator is either Between or NotBetween Declaration public string Formula2 { get; } Property Value Type Description System.String The second formula of the rule. PatternFormatting Gets the pattern formatting. Declaration public IPatternFormatting PatternFormatting { get; } Property Value Type Description IPatternFormatting The pattern formatting."
  },
  "api/IronXL.Formatting.ConditionType.html": {
    "href": "api/IronXL.Formatting.ConditionType.html",
    "title": "Class ConditionType | C# Excel API | IronXL",
    "keywords": "Class ConditionType Represents a type of a conditional formatting rule Inheritance System.Object ConditionType Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public class ConditionType : Object Fields CellValueIs This conditional formatting rule compares a cell value to a formula calculated result, using an operator Declaration public static ConditionType CellValueIs Field Value Type Description ConditionType ColorScale Declaration public static ConditionType ColorScale Field Value Type Description ConditionType DataBar This conditional formatting rule sets a data bar, with the cell populated with bars based on their values Declaration public static ConditionType DataBar Field Value Type Description ConditionType Filter This conditional formatting rule that files the values Declaration public static ConditionType Filter Field Value Type Description ConditionType Formula This conditional formatting rule contains a formula to evaluate. When the formula result is true, the cell is highlighted. Declaration public static ConditionType Formula Field Value Type Description ConditionType IconSet This conditional formatting rule sets a data bar, with the cell populated with bars based on their values Declaration public static ConditionType IconSet Field Value Type Description ConditionType Properties Id Type's numeric id Declaration public byte Id { get; set; } Property Value Type Description System.Byte Type Internal condition type name Declaration public string Type { get; set; } Property Value Type Description System.String Methods Equals(Object) Determines whether the specified object is equal to the current ConditionType. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current ConditionType. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. ForId(Byte) Get ConditionType for specified id Declaration public static ConditionType ForId(byte id) Parameters Type Name Description System.Byte id ConditionType id Returns Type Description ConditionType ConditionType that corresponds to specified id ForId(Int32) Get ConditionType for specified id Declaration public static ConditionType ForId(int id) Parameters Type Name Description System.Int32 id ConditionType id Returns Type Description ConditionType ConditionType that corresponds to specified id GetHashCode() Hash function Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code for current ConditionType ToString() Represents ConditionType in a string format Declaration public override string ToString() Returns Type Description System.String Operators Explicit(ConditionType to ConditionType) Extension for compatibility Declaration public static explicit operator ConditionType(ConditionType obj) Parameters Type Name Description ConditionType obj Returns Type Description NPOI.SS.UserModel.ConditionType Explicit(ConditionType to ConditionType) Extension for compatibility Declaration public static explicit operator ConditionType(ConditionType obj) Parameters Type Name Description NPOI.SS.UserModel.ConditionType obj Returns Type Description ConditionType"
  },
  "api/IronXL.Formatting.Enums.ComparisonOperator.html": {
    "href": "api/IronXL.Formatting.Enums.ComparisonOperator.html",
    "title": "Class ComparisonOperator | C# Excel API | IronXL",
    "keywords": "Class ComparisonOperator The conditional format operators used for \"Highlight Cells That Contain...\" rules. Inheritance System.Object ComparisonOperator Namespace : IronXL.Formatting.Enums Assembly : IronXL.dll Syntax public sealed class ComparisonOperator : Enum Fields Between 'Between' operator Declaration public const ComparisonOperator Between Field Value Type Description ComparisonOperator Equal 'Equal to' operator Declaration public const ComparisonOperator Equal Field Value Type Description ComparisonOperator GreaterThan 'Greater than' operator Declaration public const ComparisonOperator GreaterThan Field Value Type Description ComparisonOperator GreaterThanOrEqual 'Greater than or equal to' operator Declaration public const ComparisonOperator GreaterThanOrEqual Field Value Type Description ComparisonOperator LessThan 'Less than' operator Declaration public const ComparisonOperator LessThan Field Value Type Description ComparisonOperator LessThanOrEqual 'Less than or equal to' operator Declaration public const ComparisonOperator LessThanOrEqual Field Value Type Description ComparisonOperator NoComparison The default value. Declaration public const ComparisonOperator NoComparison Field Value Type Description ComparisonOperator NotBetween 'Not between' operator Declaration public const ComparisonOperator NotBetween Field Value Type Description ComparisonOperator NotEqual 'Not equal to' operator Declaration public const ComparisonOperator NotEqual Field Value Type Description ComparisonOperator value__ Declaration public byte value__ Field Value Type Description System.Byte"
  },
  "api/IronXL.Formatting.Enums.html": {
    "href": "api/IronXL.Formatting.Enums.html",
    "title": "Namespace IronXL.Formatting.Enums | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Formatting.Enums Classes ComparisonOperator The conditional format operators used for \"Highlight Cells That Contain...\" rules."
  },
  "api/IronXL.Formatting.html": {
    "href": "api/IronXL.Formatting.html",
    "title": "Namespace IronXL.Formatting | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Formatting Classes BuiltinFormats The class contains the built-in formats. ConditionalFormatting The ConditionalFormatting class encapsulates all Settings of Conditional Formatting. ConditionalFormattingRule Represents a description of a conditional formatting rule. ConditionType Represents a type of a conditional formatting rule Interfaces IBorderFormatting Interface that represents border formatting options of conditional formatting. IFontFormatting High level representation for Font Formatting component of Conditional Formatting Settings. IPatternFormatting High level representation for Font Formatting component of Conditional Formatting Settings. ISheetConditionalFormatting The Conditional Formatting facet of WorkSheet"
  },
  "api/IronXL.Formatting.IBorderFormatting.html": {
    "href": "api/IronXL.Formatting.IBorderFormatting.html",
    "title": "Interface IBorderFormatting | C# Excel API | IronXL",
    "keywords": "Interface IBorderFormatting Interface that represents border formatting options of conditional formatting. Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface IBorderFormatting Properties BottomBorderColor Gets or sets the color of the bottom border. Declaration string BottomBorderColor { get; set; } Property Value Type Description System.String The color of the bottom border. BottomBorderType Gets or sets the border bottom line style. Declaration BorderType BottomBorderType { get; set; } Property Value Type Description BorderType The border bottom line style. DiagonalBorderColor Gets or sets the color of the diagonal border. Declaration string DiagonalBorderColor { get; set; } Property Value Type Description System.String The color of the diagonal border. DiagonalBorderType Gets or sets the border diagonal line style. Declaration BorderType DiagonalBorderType { get; set; } Property Value Type Description BorderType The border diagonal line style. LeftBorderColor Gets or sets the color of the left border. Declaration string LeftBorderColor { get; set; } Property Value Type Description System.String The color of the left border. LeftBorderType Gets or sets the border left line style. Declaration BorderType LeftBorderType { get; set; } Property Value Type Description BorderType The border left line style. RightBorderColor Gets or sets the color of the right border. Declaration string RightBorderColor { get; set; } Property Value Type Description System.String The color of the right border. RightBorderType Gets or sets the border right line style. Declaration BorderType RightBorderType { get; set; } Property Value Type Description BorderType The border right line style. TopBorderColor Gets or sets the color of the top border. Declaration string TopBorderColor { get; set; } Property Value Type Description System.String The color of the top border. TopBorderType Gets or sets the border top line style. Declaration BorderType TopBorderType { get; set; } Property Value Type Description BorderType The border top line style."
  },
  "api/IronXL.Formatting.IFontFormatting.html": {
    "href": "api/IronXL.Formatting.IFontFormatting.html",
    "title": "Interface IFontFormatting | C# Excel API | IronXL",
    "keywords": "Interface IFontFormatting High level representation for Font Formatting component of Conditional Formatting Settings. Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface IFontFormatting Properties EscapementType Get or set the type of super or subscript for the font Declaration FontScript EscapementType { get; set; } Property Value Type Description FontScript The type of the escapement. FontColor Gets or sets the color of the font. Declaration string FontColor { get; set; } Property Value Type Description System.String The color of the font. FontHeight Get or set the height of the font in px. Declaration int FontHeight { get; set; } Property Value Type Description System.Int32 The font height in px. IsBold Gets or sets a value indicating whether this font is bold. Declaration bool IsBold { get; set; } Property Value Type Description System.Boolean true if this font is bold; otherwise, false . IsItalic Gets a value indicating whether this font is italic. Declaration bool IsItalic { get; set; } Property Value Type Description System.Boolean true if this font is italic; otherwise, false . UnderlineType Get or set the type of underlining for the font. Declaration FontUnderlineType UnderlineType { get; set; } Property Value Type Description FontUnderlineType The type of the underline."
  },
  "api/IronXL.Formatting.IPatternFormatting.html": {
    "href": "api/IronXL.Formatting.IPatternFormatting.html",
    "title": "Interface IPatternFormatting | C# Excel API | IronXL",
    "keywords": "Interface IPatternFormatting High level representation for Font Formatting component of Conditional Formatting Settings. Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface IPatternFormatting Properties BackgroundColor Gets or sets the color of the background. Declaration string BackgroundColor { get; set; } Property Value Type Description System.String The color of the background. FillPattern Gets or sets the fill pattern. Declaration FillPattern FillPattern { get; set; } Property Value Type Description FillPattern The fill pattern."
  },
  "api/IronXL.Formatting.ISheetConditionalFormatting.html": {
    "href": "api/IronXL.Formatting.ISheetConditionalFormatting.html",
    "title": "Interface ISheetConditionalFormatting | C# Excel API | IronXL",
    "keywords": "Interface ISheetConditionalFormatting The Conditional Formatting facet of WorkSheet Namespace : IronXL.Formatting Assembly : IronXL.dll Syntax public interface ISheetConditionalFormatting Properties ConditionalFormattingsCount Get the number of conditional formats in this sheet Declaration int ConditionalFormattingsCount { get; } Property Value Type Description System.Int32 The conditional formattings count. Methods AddConditionalFormatting(ConditionalFormatting) Adds a copy of a ConditionalFormatting object to the sheet Declaration ConditionalFormatting AddConditionalFormatting(ConditionalFormatting cf) Parameters Type Name Description ConditionalFormatting cf The Conditional Formatting to clone. Returns Type Description ConditionalFormatting The new Conditional Formatting object. Remarks This method could be used to copy ConditionalFormatting object from one sheet to another. For example: ConditionalFormatting cf = sheet.GetConditionalFormattingAt(index); newSheet.AddConditionalFormatting(cf); AddConditionalFormatting(IEnumerable<String>, ConditionalFormattingRule) Add a new Conditional Formatting to the sheet. Declaration ConditionalFormatting AddConditionalFormatting(IEnumerable<string> regions, ConditionalFormattingRule rule) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > regions List of rectangular ranges of cells (e.g. \"A1:C10\") to apply conditional formatting rules ConditionalFormattingRule rule The rule to apply Returns Type Description ConditionalFormatting The newly created Conditional Formatting object AddConditionalFormatting(IEnumerable<String>, ConditionalFormattingRule, ConditionalFormattingRule) Add a new Conditional Formatting consisting of two rules. Declaration ConditionalFormatting AddConditionalFormatting(IEnumerable<string> regions, ConditionalFormattingRule rule1, ConditionalFormattingRule rule2) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > regions List of rectangular ranges of cells (e.g. \"A1:C10\") to apply conditional formatting rules ConditionalFormattingRule rule1 The first rule ConditionalFormattingRule rule2 The second rule Returns Type Description ConditionalFormatting The newly created Conditional Formatting object AddConditionalFormatting(IEnumerable<String>, List<ConditionalFormattingRule>) Add a new Conditional Formatting Set to the sheet. Declaration ConditionalFormatting AddConditionalFormatting(IEnumerable<string> regions, List<ConditionalFormattingRule> cfRules) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > regions List of rectangular ranges of cells (e.g. \"A1:C10\") to apply conditional formatting rules System.Collections.Generic.List < ConditionalFormattingRule > cfRules Set of up to three conditional formatting rules Returns Type Description ConditionalFormatting The newly created Conditional Formatting object AddConditionalFormatting(String, ConditionalFormattingRule) Add a new Conditional Formatting to the sheet. Declaration ConditionalFormatting AddConditionalFormatting(string region, ConditionalFormattingRule rule) Parameters Type Name Description System.String region Range of cells (e.g. \"A1:C10\") to apply conditional formatting rules ConditionalFormattingRule rule The rule to apply Returns Type Description ConditionalFormatting The newly created Conditional Formatting object AddConditionalFormatting(String, ConditionalFormattingRule, ConditionalFormattingRule) Add a new Conditional Formatting consisting of two rules. Declaration ConditionalFormatting AddConditionalFormatting(string region, ConditionalFormattingRule rule1, ConditionalFormattingRule rule2) Parameters Type Name Description System.String region Range of cells (e.g. \"A1:C10\") to apply conditional formatting rules ConditionalFormattingRule rule1 The first rule ConditionalFormattingRule rule2 The second rule Returns Type Description ConditionalFormatting The newly created Conditional Formatting object AddConditionalFormatting(String, List<ConditionalFormattingRule>) Add a new Conditional Formatting Set to the sheet. Declaration ConditionalFormatting AddConditionalFormatting(string region, List<ConditionalFormattingRule> cfRules) Parameters Type Name Description System.String region Range of cells (e.g. \"A1:C10\") to apply conditional formatting rules System.Collections.Generic.List < ConditionalFormattingRule > cfRules Set of up to three conditional formatting rules Returns Type Description ConditionalFormatting The newly created Conditional Formatting object CreateConditionalFormattingRule(ComparisonOperator, String) Create a conditional formatting rule that Compares a cell value to a formula calculated result, using an operator Declaration ConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator comparisonOperation, string formula) Parameters Type Name Description ComparisonOperator comparisonOperation MUST be a constant value from ComparisonOperator except Between and NotBetween System.String formula The formula to determine if the conditional formatting is applied Returns Type Description ConditionalFormattingRule A conditional formatting rule CreateConditionalFormattingRule(ComparisonOperator, String, String) A factory method allowing to create a conditional formatting rule with a cell comparison operator. The Created conditional formatting rule compares a cell value to a formula calculated result, using the specified operator. The type of the Created condition is CellValueIs Declaration ConditionalFormattingRule CreateConditionalFormattingRule(ComparisonOperator comparisonOperation, string formula1, string formula2) Parameters Type Name Description ComparisonOperator comparisonOperation Value from ComparisonOperator enum. System.String formula1 Formula for the valued, Compared with the cell System.String formula2 The second formula (only used with Between and NotBetween operations. Returns Type Description ConditionalFormattingRule New conditional formatting rule. CreateConditionalFormattingRule(String) Create a conditional formatting rule based on a Boolean formula. When the formula result is true, the cell is highlighted. Declaration ConditionalFormattingRule CreateConditionalFormattingRule(string formula) Parameters Type Name Description System.String formula The formula to Evaluate. MUST be a Boolean function. Returns Type Description ConditionalFormattingRule Conditional formatting rule GetConditionalFormattingAt(Int32) Gets Conditional Formatting object at a particular index Declaration ConditionalFormatting GetConditionalFormattingAt(int index) Parameters Type Name Description System.Int32 index 0-based index of the Conditional Formatting object to fetch Returns Type Description ConditionalFormatting Conditional Formatting object or null if not found Exceptions Type Condition System.ArgumentException throws ArgumentException if the index is outside of the allowable range (0 ... numberOfFormats-1) RemoveConditionalFormatting(Int32) Removes a Conditional Formatting object by index Declaration void RemoveConditionalFormatting(int index) Parameters Type Name Description System.Int32 index 0-based index of the Conditional Formatting object to remove Exceptions Type Condition System.ArgumentException throws ArgumentException if the index is outside of the allowable range (0 ... numberOfFormats-1)"
  },
  "api/IronXL.html": {
    "href": "api/IronXL.html",
    "title": "Namespace IronXL | C# Excel API | IronXL",
    "keywords": "Namespace IronXL Classes Cell Represents a Cell in an Excel WorkSheet. ExcelFileFormat Enum that represents the Excel file format which will be used for new workbook creation. XLS or XLSX (preferred). License Allows IronXL license keys to be applied globally across an application. Range A class that represents a range of cells RangeAddress Class that represents address of the range. RangeColumn A class that represents a single column of cells. RangeRow A class that represents a single row of cells. SortOrder Represents sorting order WorkBook Class that stands for a whole Excel file. This is the first object most users will construct whether they are reading or writing a workbook. It is also the top level (home-base) object for creating new sheets and most other Excel programming operations. WorkSheet Class that stands for single sheet within Excel file. WorksheetsCollection Class for managing the collection of WorkSheet elements."
  },
  "api/IronXL.Layout.html": {
    "href": "api/IronXL.Layout.html",
    "title": "Namespace IronXL.Layout | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Layout Interfaces IFooter Interface for worksheet footer IHeader Interface for worksheet header IHeaderFooter Common interface for"
  },
  "api/IronXL.Layout.IFooter.html": {
    "href": "api/IronXL.Layout.IFooter.html",
    "title": "Interface IFooter | C# Excel API | IronXL",
    "keywords": "Interface IFooter Interface for worksheet footer Inherited Members IHeaderFooter.Left IHeaderFooter.Center IHeaderFooter.Right Namespace : IronXL.Layout Assembly : IronXL.dll Syntax public interface IFooter : IHeaderFooter Inherited members Left Center Right See Also IHeaderFooter"
  },
  "api/IronXL.Layout.IHeader.html": {
    "href": "api/IronXL.Layout.IHeader.html",
    "title": "Interface IHeader | C# Excel API | IronXL",
    "keywords": "Interface IHeader Interface for worksheet header Inherited Members IHeaderFooter.Left IHeaderFooter.Center IHeaderFooter.Right Namespace : IronXL.Layout Assembly : IronXL.dll Syntax public interface IHeader : IHeaderFooter Inherited members Left Center Right See Also IHeaderFooter"
  },
  "api/IronXL.Layout.IHeaderFooter.html": {
    "href": "api/IronXL.Layout.IHeaderFooter.html",
    "title": "Interface IHeaderFooter | C# Excel API | IronXL",
    "keywords": "Interface IHeaderFooter Common interface for Namespace : IronXL.Layout Assembly : IronXL.dll Syntax public interface IHeaderFooter Properties Center Gets or sets the center of the header or footer. Declaration string Center { get; set; } Property Value Type Description System.String The string representing the center. Left Gets or sets the left side of the header or footer. Declaration string Left { get; set; } Property Value Type Description System.String The string representing the left side. Right Gets or sets the right side of the header or footer. Declaration string Right { get; set; } Property Value Type Description System.String The string representing the right side."
  },
  "api/IronXL.License.html": {
    "href": "api/IronXL.License.html",
    "title": "Class License | C# Excel API | IronXL",
    "keywords": "Class License Allows IronXL license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronXL Assembly : IronXL.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronXL is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in LicenseKey property, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironsoftware.com/csharp/excel/licensing/ and https://ironsoftware.com/csharp/excel/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean true if the license key given is valid. LicenseKey Get Licensed at https://ironsoftware.com/csharp/excel/licensing/ For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronXL.LicenseKey\" value=\"IRONXL-LICENSE-KEY\"/> within the appSettings node. See https://ironsoftware.com/csharp/excel/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronXL.LicenseKey\" and the value is a valid IronXL trial or full license key. See https://ironsoftware.com/csharp/excel/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods IsValidLicense(String) Determines whether a string license key is valid. See https://ironsoftware.com/csharp/excel/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string licenseKey) Parameters Type Name Description System.String licenseKey IronXL license key as a string Returns Type Description System.Boolean true if the license key given is valid."
  },
  "api/IronXL.Logging.html": {
    "href": "api/IronXL.Logging.html",
    "title": "Namespace IronXL.Logging | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Logging Classes Logger Provides functionality for developers to view debug logs and export log files from IronXL. Logger.LoggingModes Differnt Ways to Log developer notcies and warnings"
  },
  "api/IronXL.Logging.Logger.html": {
    "href": "api/IronXL.Logging.Logger.html",
    "title": "Class Logger | C# Excel API | IronXL",
    "keywords": "Class Logger Provides functionality for developers to view debug logs and export log files from IronXL. Inheritance System.Object Logger Namespace : IronXL.Logging Assembly : IronXL.dll Syntax public static class Logger : Object Properties LogFilePath Setting a log path produces ‘log files’ which may be vey useful for debugging in production or providing to Iron Software support when reporting an issue. LogFilePath may be set to a directory name or a full file name. Setting LogFilePath = null will turn off log files. Declaration public static string LogFilePath { get; set; } Property Value Type Description System.String See Also ClearLogFiles() LoggingMode Activate or disable detailed developer messages sent to your choice of location in the IDE or application console. Declaration public static Logger.LoggingModes LoggingMode { get; set; } Property Value Type Description Logger.LoggingModes Methods ClearLogFiles() Removes any Iron Software log files at the LogFilePath . Declaration public static void ClearLogFiles() See Also LogFilePath"
  },
  "api/IronXL.Logging.Logger.LoggingModes.html": {
    "href": "api/IronXL.Logging.Logger.LoggingModes.html",
    "title": "Class Logger.LoggingModes | C# Excel API | IronXL",
    "keywords": "Class Logger.LoggingModes Differnt Ways to Log developer notcies and warnings Inheritance System.Object Logger.LoggingModes Namespace : IronXL.Logging Assembly : IronXL.dll Syntax public sealed class LoggingModes : Enum Fields All All available methods Declaration public const Logger.LoggingModes All Field Value Type Description Logger.LoggingModes Console Sends Messages to System.Consoleg Declaration public const Logger.LoggingModes Console Field Value Type Description Logger.LoggingModes Custom Attach a custom logger Declaration public const Logger.LoggingModes Custom Field Value Type Description Logger.LoggingModes DebugOutputWindow Sends Messages to System.Diagnostics.Debug Declaration public const Logger.LoggingModes DebugOutputWindow Field Value Type Description Logger.LoggingModes File Log to File Declaration public const Logger.LoggingModes File Field Value Type Description Logger.LoggingModes None Silent Declaration public const Logger.LoggingModes None Field Value Type Description Logger.LoggingModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Metadata.html": {
    "href": "api/IronXL.Metadata.html",
    "title": "Namespace IronXL.Metadata | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Metadata Interfaces ICustomProperties Interface that represents set of custom metadata properties IMetadata Interface that represents meta-data for the Excel file such as \"Author\", \"Title\"..."
  },
  "api/IronXL.Metadata.ICustomProperties.html": {
    "href": "api/IronXL.Metadata.ICustomProperties.html",
    "title": "Interface ICustomProperties | C# Excel API | IronXL",
    "keywords": "Interface ICustomProperties Interface that represents set of custom metadata properties Namespace : IronXL.Metadata Assembly : IronXL.dll Syntax public interface ICustomProperties Methods AddProperty(String, Object) Method for adding property with the specified name and value. Available value types are: System.Int32 , System.Double , System.String , System.Boolean . Declaration void AddProperty(string name, object value) Parameters Type Name Description System.String name Name of the property. System.Object value Value of the property. Contains(String) Method to check whether set of properties contains property with the specified name. Declaration bool Contains(string name) Parameters Type Name Description System.String name Name of the property. Returns Type Description System.Boolean true if property with the specified name exists, otherwise false . GetValue(String) Method for getting custom property value by its name. See AddProperty(String, Object) for list of possible types. Declaration object GetValue(string name) Parameters Type Name Description System.String name The name of the property. Returns Type Description System.Object The value of the property. GetValue<T>(String) Unsafe method for getting strongly-typed custom property value by its name. See AddProperty(String, Object) for list of possible types. Declaration T GetValue<T>(string name) Parameters Type Name Description System.String name Name of the property. Returns Type Description T Returns default(T) is such property wasn't found Type Parameters Name Description T Remove(String) Method for removing property by its name. Declaration bool Remove(string name) Parameters Type Name Description System.String name The name of the property. Returns Type Description System.Boolean true if property was removed, otherwise false . TryGetValue<T>(String, out T) Safe method for getting strongly-typed custom property value by its name. See AddProperty(String, Object) for list of possible types. Declaration bool TryGetValue<T>(string name, out T value) Parameters Type Name Description System.String name The name of the property. T value The value of the property.. Returns Type Description System.Boolean true if value was returned successfully, otherwise false . Type Parameters Name Description T Type of the return value."
  },
  "api/IronXL.Metadata.IMetadata.html": {
    "href": "api/IronXL.Metadata.IMetadata.html",
    "title": "Interface IMetadata | C# Excel API | IronXL",
    "keywords": "Interface IMetadata Interface that represents meta-data for the Excel file such as \"Author\", \"Title\"... Namespace : IronXL.Metadata Assembly : IronXL.dll Syntax public interface IMetadata Properties ApplicationName Gets the name of the application with which the file was created. Declaration string ApplicationName { get; } Property Value Type Description System.String Author Gets or sets the author of the file. Declaration string Author { get; set; } Property Value Type Description System.String Category Gets or sets the category of the file. Declaration string Category { get; set; } Property Value Type Description System.String Comments Gets or sets the comments field value. Declaration string Comments { get; set; } Property Value Type Description System.String Company Gets the company field value. Declaration string Company { get; } Property Value Type Description System.String Created Gets or sets the creation time. Declaration Nullable<DateTime> Created { get; set; } Property Value Type Description System.Nullable < System.DateTime > CustomProperties Gets the custom properties of the workbook. Declaration ICustomProperties CustomProperties { get; } Property Value Type Description ICustomProperties Keywords Gets or sets the keywords field value. Declaration string Keywords { get; set; } Property Value Type Description System.String LastPrinted Gets or sets the last printed time. Declaration Nullable<DateTime> LastPrinted { get; set; } Property Value Type Description System.Nullable < System.DateTime > Manager Gets the manager field value. Declaration string Manager { get; } Property Value Type Description System.String Modified Gets or sets the last modification time. Declaration Nullable<DateTime> Modified { get; set; } Property Value Type Description System.Nullable < System.DateTime > Subject Gets or sets the subject of the file. Declaration string Subject { get; set; } Property Value Type Description System.String Template Gets the template field value. Declaration string Template { get; } Property Value Type Description System.String Title Gets or sets the title of the file. Declaration string Title { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Options.CreatingOptions.html": {
    "href": "api/IronXL.Options.CreatingOptions.html",
    "title": "Class CreatingOptions | C# Excel API | IronXL",
    "keywords": "Class CreatingOptions Options for creating new WorkBook object. Inheritance System.Object CreatingOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class CreatingOptions : Object Constructors CreatingOptions() Declaration public CreatingOptions() Properties DefaultFileFormat Property that indicates whether to use XLS or XLSX as new workbook format. XLSX is the default value for new workbook Declaration public ExcelFileFormat DefaultFileFormat { get; set; } Property Value Type Description ExcelFileFormat The default spreadsheet file format."
  },
  "api/IronXL.Options.HiddenState.html": {
    "href": "api/IronXL.Options.HiddenState.html",
    "title": "Class HiddenState | C# Excel API | IronXL",
    "keywords": "Class HiddenState Enum that represents visibility of the worksheet. Inheritance System.Object HiddenState Namespace : IronXL.Options Assembly : IronXL.dll Syntax public sealed class HiddenState : Enum Fields Hidden Worksheet is hidden. Declaration public const HiddenState Hidden Field Value Type Description HiddenState value__ Declaration public int value__ Field Value Type Description System.Int32 VeryHidden Worksheet is very hidden. Declaration public const HiddenState VeryHidden Field Value Type Description HiddenState Visible Worksheet is visible. Declaration public const HiddenState Visible Field Value Type Description HiddenState"
  },
  "api/IronXL.Options.html": {
    "href": "api/IronXL.Options.html",
    "title": "Namespace IronXL.Options | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Options Classes CreatingOptions Options for creating new WorkBook object. HiddenState Enum that represents visibility of the worksheet. HtmlExportOptions Options for exporting workbook to HTML format. LoadingOptions Options for loading WorkBook object from file. PanePosition Define the position of active the pane. One of lower/right, upper/right, lower/left and upper/left. SavingOptions Options for saving WorkBook object to file."
  },
  "api/IronXL.Options.HtmlExportOptions.html": {
    "href": "api/IronXL.Options.HtmlExportOptions.html",
    "title": "Class HtmlExportOptions | C# Excel API | IronXL",
    "keywords": "Class HtmlExportOptions Options for exporting workbook to HTML format. Inheritance System.Object HtmlExportOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class HtmlExportOptions : Object Constructors HtmlExportOptions() Declaration public HtmlExportOptions() Properties OutputColumnHeaders Property that indicates whether to show column header in result file. Declaration public bool OutputColumnHeaders { get; set; } Property Value Type Description System.Boolean OutputHiddenColumns Property that indicates whether to show hidden columns in result file. Declaration public bool OutputHiddenColumns { get; set; } Property Value Type Description System.Boolean OutputHiddenRows Property that indicates whether to show hidden rows in result file. Declaration public bool OutputHiddenRows { get; set; } Property Value Type Description System.Boolean OutputLeadingSpacesAsNonBreaking Property that indicates whether to show leading spaces as non-breaking in result file. Declaration public bool OutputLeadingSpacesAsNonBreaking { get; set; } Property Value Type Description System.Boolean OutputRowNumbers Property that indicates whether to show row numbers in result file. Declaration public bool OutputRowNumbers { get; set; } Property Value Type Description System.Boolean"
  },
  "api/IronXL.Options.LoadingOptions.html": {
    "href": "api/IronXL.Options.LoadingOptions.html",
    "title": "Class LoadingOptions | C# Excel API | IronXL",
    "keywords": "Class LoadingOptions Options for loading WorkBook object from file. Inheritance System.Object LoadingOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class LoadingOptions : Object Constructors LoadingOptions() Declaration public LoadingOptions() Properties ConvertFieldValues Property that indicates whether to convert field values when loading CSV/TSV files. Default value is TRUE . Declaration public bool ConvertFieldValues { get; set; } Property Value Type Description System.Boolean CsvListDelimiter Property that indicates CSV file list delimiter. Default value depends on current region. Take a look at System.Globalization.CultureInfo Declaration public string CsvListDelimiter { get; set; } Property Value Type Description System.String DefaultFileFormat Property that indicates whether to use XLS or XLSX as new workbook format when loading CSV/TSV files. XLSX is the default value for new workbook Declaration public ExcelFileFormat DefaultFileFormat { get; set; } Property Value Type Description ExcelFileFormat Password Get or set a password for a workbook. Declaration public string Password { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Options.PanePosition.html": {
    "href": "api/IronXL.Options.PanePosition.html",
    "title": "Class PanePosition | C# Excel API | IronXL",
    "keywords": "Class PanePosition Define the position of active the pane. One of lower/right, upper/right, lower/left and upper/left. Inheritance System.Object PanePosition Namespace : IronXL.Options Assembly : IronXL.dll Syntax public sealed class PanePosition : Enum Fields LowerLeft Refers to the lower/left corner Declaration public const PanePosition LowerLeft Field Value Type Description PanePosition LowerRight Refers to the lower/right corner Declaration public const PanePosition LowerRight Field Value Type Description PanePosition UpperLeft Refers to the upper/left corner Declaration public const PanePosition UpperLeft Field Value Type Description PanePosition UpperRight Refers to the upper/right corner Declaration public const PanePosition UpperRight Field Value Type Description PanePosition value__ Declaration public byte value__ Field Value Type Description System.Byte"
  },
  "api/IronXL.Options.SavingOptions.html": {
    "href": "api/IronXL.Options.SavingOptions.html",
    "title": "Class SavingOptions | C# Excel API | IronXL",
    "keywords": "Class SavingOptions Options for saving WorkBook object to file. Inheritance System.Object SavingOptions Namespace : IronXL.Options Assembly : IronXL.dll Syntax public class SavingOptions : Object Constructors SavingOptions() Declaration public SavingOptions() Properties ListDelimiter Property that indicates CSV file list delimiter. Default value depends on current region. Take a look at System.Globalization.CultureInfo Declaration public string ListDelimiter { get; set; } Property Value Type Description System.String Password Password to encrypt the workbook with Declaration public string Password { get; set; } Property Value Type Description System.String"
  },
  "api/IronXL.Printing.html": {
    "href": "api/IronXL.Printing.html",
    "title": "Namespace IronXL.Printing | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Printing Classes PaperSize An Enum that represents different sizes of paper for Excel document printing and page setup. See https://docs.microsoft.com/en-us/windows/desktop/intl/paper-sizes for more information on windows and Excel paper sizes. PrintOrientation Enum that represents different print orientations Interfaces IPrintSetup Interface that represents list of settings for printing a Excel file."
  },
  "api/IronXL.Printing.IPrintSetup.html": {
    "href": "api/IronXL.Printing.IPrintSetup.html",
    "title": "Interface IPrintSetup | C# Excel API | IronXL",
    "keywords": "Interface IPrintSetup Interface that represents list of settings for printing a Excel file. Namespace : IronXL.Printing Assembly : IronXL.dll Syntax public interface IPrintSetup Properties Copies Returns the number of copies to print. Declaration short Copies { get; set; } Property Value Type Description System.Int16 Draft Returns the draft mode. Declaration bool Draft { get; set; } Property Value Type Description System.Boolean FitHeight Returns the number of pages high to fit the sheet in to. Declaration short FitHeight { get; set; } Property Value Type Description System.Int16 FitWidth Returns the number of pages wide to fit sheet in to. Declaration short FitWidth { get; set; } Property Value Type Description System.Int16 FooterMargin Returns the footer margin. Declaration double FooterMargin { get; set; } Property Value Type Description System.Double HeaderMargin Returns the header margin. Declaration double HeaderMargin { get; set; } Property Value Type Description System.Double HResolution Returns the horizontal resolution. Declaration short HResolution { get; set; } Property Value Type Description System.Int16 LeftToRight Returns the left to right print order. Declaration bool LeftToRight { get; set; } Property Value Type Description System.Boolean NoColor Returns the black and white Setting. Declaration bool NoColor { get; set; } Property Value Type Description System.Boolean Notes Returns the print notes. Declaration bool Notes { get; set; } Property Value Type Description System.Boolean PageStart Returns the page start. Declaration short PageStart { get; set; } Property Value Type Description System.Int16 PaperSize Gets or sets the size of the paper. Declaration PaperSize PaperSize { get; set; } Property Value Type Description PaperSize PrintOrientation Returns the print orientation. Declaration PrintOrientation PrintOrientation { get; set; } Property Value Type Description PrintOrientation Scale Returns the scale. Declaration short Scale { get; set; } Property Value Type Description System.Int16 UsePage Returns the use page numbers. Declaration bool UsePage { get; set; } Property Value Type Description System.Boolean VResolution Returns the vertical resolution. Declaration short VResolution { get; set; } Property Value Type Description System.Int16"
  },
  "api/IronXL.Printing.PaperSize.html": {
    "href": "api/IronXL.Printing.PaperSize.html",
    "title": "Class PaperSize | C# Excel API | IronXL",
    "keywords": "Class PaperSize An Enum that represents different sizes of paper for Excel document printing and page setup. See https://docs.microsoft.com/en-us/windows/desktop/intl/paper-sizes for more information on windows and Excel paper sizes. Inheritance System.Object PaperSize Namespace : IronXL.Printing Assembly : IronXL.dll Syntax public sealed class PaperSize : Enum Fields A3 A3 297 x 420 mm Declaration public const PaperSize A3 Field Value Type Description PaperSize A4 A4 210 x 297 mm Declaration public const PaperSize A4 Field Value Type Description PaperSize A4EExtra A4 Extra 9.27 x 12.69 in Declaration public const PaperSize A4EExtra Field Value Type Description PaperSize A4Plus A4 Plus - 210x330 mm Declaration public const PaperSize A4Plus Field Value Type Description PaperSize A4Rotated A4 Rotated - 297x210 mm Declaration public const PaperSize A4Rotated Field Value Type Description PaperSize A4Small A4 Small 210 x 297 mm Declaration public const PaperSize A4Small Field Value Type Description PaperSize A4Transverse A4 Transverse - 210x297 mm Declaration public const PaperSize A4Transverse Field Value Type Description PaperSize A5 A5 148 x 210 mm Declaration public const PaperSize A5 Field Value Type Description PaperSize B4 B4 (JIS) 257 x 364 mm Declaration public const PaperSize B4 Field Value Type Description PaperSize B5 B5 (JIS) 182 x 257 mm Declaration public const PaperSize B5 Field Value Type Description PaperSize CSizeSheet C size sheet Declaration public const PaperSize CSizeSheet Field Value Type Description PaperSize DSizeSheet D size sheet Declaration public const PaperSize DSizeSheet Field Value Type Description PaperSize ElevenBySeven 11 x 17 in Declaration public const PaperSize ElevenBySeven Field Value Type Description PaperSize Envelope10 US Envelope #10 4 1/8 x 9 1/2 Declaration public const PaperSize Envelope10 Field Value Type Description PaperSize Envelope11 US Envelope #11 4 1/2 x 10 3/8 Declaration public const PaperSize Envelope11 Field Value Type Description PaperSize Envelope12 US Envelope #12 4 3/4 x 11 in Declaration public const PaperSize Envelope12 Field Value Type Description PaperSize Envelope14 US Envelope #14 5 x 11 1/2 Declaration public const PaperSize Envelope14 Field Value Type Description PaperSize Envelope9 US Envelope #9 3 7/8 x 8 7/8 Declaration public const PaperSize Envelope9 Field Value Type Description PaperSize EnvelopeC3 Envelope C3 324 x 458 mm Declaration public const PaperSize EnvelopeC3 Field Value Type Description PaperSize EnvelopeC4 Envelope C4 229 x 324 mm Declaration public const PaperSize EnvelopeC4 Field Value Type Description PaperSize EnvelopeC5 Envelope C5 162 x 229 mm Declaration public const PaperSize EnvelopeC5 Field Value Type Description PaperSize EnvelopeC6 Envelope C6 114 x 162 mm Declaration public const PaperSize EnvelopeC6 Field Value Type Description PaperSize EnvelopeDL Envelope DL 110 x 220mm Declaration public const PaperSize EnvelopeDL Field Value Type Description PaperSize EnvelopeMonarch US Envelope Monarch 3.875 x 7.5 in Declaration public const PaperSize EnvelopeMonarch Field Value Type Description PaperSize ESizeSheet Declaration public const PaperSize ESizeSheet Field Value Type Description PaperSize Executive US Executive 7 1/4 x 10 1/2 in Declaration public const PaperSize Executive Field Value Type Description PaperSize Folio Folio 8 1/2 x 13 in Declaration public const PaperSize Folio Field Value Type Description PaperSize Ledger US Ledger 17 x 11 in Declaration public const PaperSize Ledger Field Value Type Description PaperSize Legal US Legal 8 1/2 x 14 in Declaration public const PaperSize Legal Field Value Type Description PaperSize Letter US Letter Small 8 1/2 x 11 in Declaration public const PaperSize Letter Field Value Type Description PaperSize LetterRotated US Letter Rotated 11 x 8 1/2 in Declaration public const PaperSize LetterRotated Field Value Type Description PaperSize Note US Note 8 1/2 x 11 in Declaration public const PaperSize Note Field Value Type Description PaperSize PrinterDefault Default paper size. Works with each printer's default paper setting. Declaration public const PaperSize PrinterDefault Field Value Type Description PaperSize Quarto Quarto 215 x 275 mm Declaration public const PaperSize Quarto Field Value Type Description PaperSize Statement US Statement 5 1/2 x 8 1/2 in Declaration public const PaperSize Statement Field Value Type Description PaperSize Tabloid US Tabloid 11 x 17 in Declaration public const PaperSize Tabloid Field Value Type Description PaperSize TenByFourteen 10 x 14 in Declaration public const PaperSize TenByFourteen Field Value Type Description PaperSize value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Printing.PrintOrientation.html": {
    "href": "api/IronXL.Printing.PrintOrientation.html",
    "title": "Class PrintOrientation | C# Excel API | IronXL",
    "keywords": "Class PrintOrientation Enum that represents different print orientations Inheritance System.Object PrintOrientation Namespace : IronXL.Printing Assembly : IronXL.dll Syntax public sealed class PrintOrientation : Enum Fields Default The default print orientation Declaration public const PrintOrientation Default Field Value Type Description PrintOrientation Landscape The landscape print orientation Declaration public const PrintOrientation Landscape Field Value Type Description PrintOrientation Portrait The portrait print orientation Declaration public const PrintOrientation Portrait Field Value Type Description PrintOrientation value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Range.html": {
    "href": "api/IronXL.Range.html",
    "title": "Class Range | C# Excel API | IronXL",
    "keywords": "Class Range A class that represents a range of cells Inheritance System.Object Range RangeColumn RangeRow WorkSheet Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Namespace : IronXL Assembly : IronXL.dll Syntax public class Range : Object Properties AllColumnsInRange List of ALL columns within the current range. Calling this method will create all columns that this range spans over .The columns contain Cell objects. Declaration public RangeColumn[] AllColumnsInRange { get; } Property Value Type Description RangeColumn [] AllRowsInRange List of ALL rows within the current range. Calling this method will create all rows that this range spans over .The rows contain Cell objects. Declaration public RangeRow[] AllRowsInRange { get; } Property Value Type Description RangeRow [] BoolValue Gets or sets the System.Boolean value of this Range of cells. Getting the BoolValue will return true only if ALL cells in the range are true. Numeric cells greater than zero are treated as TRUE. [Logical AND Operator Applied] Setting the BoolValue will set all cells in with the same System.Boolean value. Declaration public virtual bool BoolValue { get; set; } Property Value Type Description System.Boolean The boolean AND aggregate value of the cells. Error end NAN cells will return as a false . Columns List of \"physically\" present Excel columns within the current range. The columns contain Cell objects. Declaration public RangeColumn[] Columns { get; } Property Value Type Description RangeColumn [] DateTimeValue Gets or sets the nullable System.DateTime value of this Range of cells. Getting the DateTimeValue will return highest (MAX) DateTime in the Range, or null if no System.DateTime is found. Setting the DateTimeValue will set all cells in with the same System.DateTime value. Declaration public Nullable<DateTime> DateTimeValue { get; set; } Property Value Type Description System.Nullable < System.DateTime > The MAX System.DateTime of all of the cells. DecimalValue Gets or sets the System.Decimal value of this Range of cells. Getting the DecimalValue will return the SUM of all numeric cells in the Range. Setting the DecimalValue will set all cells in with the same System.Decimal value. Declaration public virtual Decimal DecimalValue { get; set; } Property Value Type Description System.Decimal The System.Decimal SUM of all of the cells. Error end NAN cells will count as 0 DoubleValue Gets or sets the double value of all Cells in this Rance. Declaration public virtual double DoubleValue { get; set; } Property Value Type Description System.Double The double value. FloatValue Gets or sets the System.Single value of this Range of cells. Getting the FloatValue will return the SUM of all numeric cells in the Range. Setting the FloatValue will set all cells in with the same System.Single value. Declaration public virtual float FloatValue { get; set; } Property Value Type Description System.Single The System.Single SUM of all of the cells. Error end NAN cells will count as 0 FormatString Property to get or set range format string. If range contains one cell: {get} returns the cell format string; {set} changes the cell format string If range contains more than one cell: {get} returns the format string if all cells within range have the same format string, otherwise returns null ; {set} changes the format string of every cell within the range. Declaration public string FormatString { get; set; } Property Value Type Description System.String Remarks You can find the list of the built-in format strings in the class BuiltinFormats . See Also BuiltinFormats Formula Property to get or set range formula. If range contains one cell: {get} returns the cell formula; {set} changes the cell formula If range contains more than one cell: {get} returns the formula if all cells within range have the same formula, otherwise returns null ; {set} changes the formula of every cell within the range. Declaration public string Formula { get; set; } Property Value Type Description System.String Int32Value Synonym of IntValue Gets or sets the System.Int32 (Int32) value of this Range of cells. Getting the LongValue will return the SUM of all numeric cells in the Range. Setting the LongValue will set all cells in with the same System.Int32 value. Declaration public virtual int Int32Value { get; set; } Property Value Type Description System.Int32 The System.Int32 SUM of all of the cells. Error end NAN cells will count as 0 Int64Value Synonym of LongValue Gets or sets the System.Int64 (Int64) value of this Range of cells. Getting the LongValue will return the SUM of all numeric cells in the Range. Setting the LongValue will set all cells in with the same System.Int64 value. Declaration public virtual long Int64Value { get; set; } Property Value Type Description System.Int64 The System.Int64 SUM of all of the cells. Error end NAN cells will count as 0 IntValue Gets or sets the System.Int32 value of this Range of cells. Getting the IntValue will return the SUM of all numeric cells in the Range. Setting the IntValue will set all cells in with the same System.Int32 value. Declaration public virtual int IntValue { get; set; } Property Value Type Description System.Int32 The System.Int32 SUM of all of the cells. Error end NAN cells will count as 0 IsEmpty Property that indicates if range is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean LongValue Gets or sets the System.Int64 (Int64) value of this Range of cells. Getting the LongValue will return the SUM of all numeric cells in the Range. Setting the LongValue will set all cells in with the same System.Int64 value. Declaration public virtual long LongValue { get; set; } Property Value Type Description System.Int64 The System.Int64 SUM of all of the cells. Error end NAN cells will count as 0 RangeAddressAsString Gets a string representation of this range address. E.g. \"A1:B25\" Declaration public virtual string RangeAddressAsString { get; } Property Value Type Description System.String The range address as string. Rows List of \"physically\" present Excel rows within the current range. The rows contain Cell objects. Declaration public RangeRow[] Rows { get; } Property Value Type Description RangeRow [] StringValue Gets or sets the System.String value of this Range of cells. Getting the StringValue will return formatted System.String values. Columns will be delimited by TABS. Rows delimited by NEWLINE Setting the StringValue will set all cells in with the same System.String value. Declaration public virtual string StringValue { get; set; } Property Value Type Description System.String The string value of all of the cells. Numbers and dates will be rendered into readable strings; as displayed in Excel. Formulas will be calculated. Error end NAN cells will return as a null string. Style Style of all cells within range. Declaration public IStyle Style { get; } Property Value Type Description IStyle Value Property to get or set range value. If range contains one cell: {get} returns the cell value, {set} changes the cell value If range contains more than one cell: {get} returns the sum of all numeric cells within range, {set} changes the value of every cell within the range. Declaration public object Value { get; set; } Property Value Type Description System.Object WorkBook The workbook this range belongs to. Declaration public WorkBook WorkBook { get; } Property Value Type Description WorkBook Methods AddRange(Range) Add another range to this current range. Basically, the result is union of two ranges. Declaration public virtual Range AddRange(Range range) Parameters Type Name Description Range range The range to add to the current working range. Returns Type Description Range This Range allowing a fluent coding style. Avg() Returns average value of all numeric cells Declaration public Decimal Avg() Returns Type Description System.Decimal The average value as a decimal. ClearContents() Empties the contents of the Range , leaving all Cells empty. Declaration public virtual void ClearContents() Column(Int32) Get a column by index Declaration protected RangeColumn Column(int index) Parameters Type Name Description System.Int32 index Returns Type Description RangeColumn Copy(WorkSheet, String) Copies the specified range to the sheet and inserts it at the specified point. E.g. Pastes this range to a WorkSheet at a specified cell location Declaration public void Copy(WorkSheet sheet, string pointToInsert) Parameters Type Name Description WorkSheet sheet The worksheet to paste this Range into. System.String pointToInsert The cell at which to paste the range. E.g. \"A11\" GetAllColumns() Get a list of all columns that overlap this Range Declaration protected RangeColumn[] GetAllColumns() Returns Type Description RangeColumn [] GetAllPhysicalColumns() Get a list of only the columns that actually exist in this range Declaration protected RangeColumn[] GetAllPhysicalColumns() Returns Type Description RangeColumn [] GetAllPhysicalRows() Get a list of only the rows that actually exist in this range Declaration protected RangeRow[] GetAllPhysicalRows() Returns Type Description RangeRow [] GetAllRows() Get a list of all rows that overlap this Range Declaration protected RangeRow[] GetAllRows() Returns Type Description RangeRow [] GetColumns(Boolean) Gets the list of columns that this Range spans over. Is able to create columns to fill the range with columns if needed, or only return the columns that actually exist on the sheet. Declaration protected RangeColumn[] GetColumns(bool createIfNull) Parameters Type Name Description System.Boolean createIfNull Indicates wether the method should create the columns that are overlapped by this Range and add them to the resulting array, or only get existing columns Returns Type Description RangeColumn [] GetEnumerator() IEnumerable implementation. Declaration public IEnumerator<Cell> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Cell > An IEnumerator allowing for-each logical iteration of cells with Ranges. GetRows(Boolean) Gets the list of rows that this Range spans over. Is able to create rows to fill the range with rows if needed, or only return the rows that actually exist on the sheet. Declaration protected RangeRow[] GetRows(bool createIfNull) Parameters Type Name Description System.Boolean createIfNull Indicates wether the method should create the rows that are overlapped by this Range and add them to the resulting array, or only get existing rows Returns Type Description RangeRow [] GetValue<TType>() Method for getting a range's value. If range contains one cell then method calls GetValue<TType>() of this cell If range contains more than one cell then method tries to cast Sum() of all numeric cells within range to TType Use Try/Catch to avoid possible exceptions from this method if cell content types are inconsistent or contain formula errors. Declaration public TType GetValue<TType>() Returns Type Description TType The value of the cell, cast as TType Type Parameters Name Description TType The .net type to which the cell's value will be cast. Exceptions Type Condition System.ArgumentException Range value cannot be casted to {type.Name} Max() Returns maximum value of all numeric cells Declaration public Decimal Max() Returns Type Description System.Decimal The max value as a decimal. Min() Returns minimum value of all numeric cells within this range. Declaration public Decimal Min() Returns Type Description System.Decimal The min value as a decimal. Replace(String, String) Textual and numeric Find and Replace. Replaces all found occurrences of \"oldValue\" with the \"newValue\". Works with all string and numeric values. Declaration public void Replace(string oldValue, string newValue) Parameters Type Name Description System.String oldValue The string to find. System.String newValue The string to replace oldValue with. Row(Int32) Get a row by index Declaration protected RangeRow Row(int index) Parameters Type Name Description System.Int32 index The zero based row index. Returns Type Description RangeRow SaveAsNamedRange(String, Boolean) Saves the current range as a new named range. Declaration public void SaveAsNamedRange(string nameOfRange, bool globalName) Parameters Type Name Description System.String nameOfRange The user-defined name. System.Boolean globalName Sets the range as global if set to true . Default value is true . SaveAsNamedTable(String, Boolean, TableStyle) Saves the current range as named table with the specified name. Declaration public void SaveAsNamedTable(string tableName, bool showFilter = true, TableStyle tableStyle = null) Parameters Type Name Description System.String tableName the name of the table System.Boolean showFilter show filter on the header. Default value is true . TableStyle tableStyle table style properties Exceptions Type Condition System.NotSupportedException Only XLSX supports named tables. SetCellValue(Int32, Int32, Object) Set a single cell value using its row and column indexes. Declaration public void SetCellValue(int rowIndex, int columnIndex, object value) Parameters Type Name Description System.Int32 rowIndex Row index within this Range . The first row is numbered 0. System.Int32 columnIndex Column index within this Range . The first column is numbered 0. System.Object value Value for the cell. SortAscending() Sort current range in ascending order. This updates the cell positions within your WorkSheets. Declaration public Range SortAscending() Returns Type Description Range This Range, allowing for a fluent code style. SortByColumn(Int32, SortOrder) Sort current range by specified column. This updates the row positions within your WorkSheet. Range has to be rectangular: first and last rows numbers in all columns should be the same, and first and last columns numbers in all rows should be the same. Declaration public Range SortByColumn(int columnNumber, SortOrder sortOrder) Parameters Type Name Description System.Int32 columnNumber Zero-based column index. Column should intersect current range SortOrder sortOrder Direction of the sort Returns Type Description Range This Range, allowing for a fluent code style. Exceptions Type Condition System.InvalidOperationException Thrown if range is not of rectangular shape System.IndexOutOfRangeException Thrown if columnNumber is out of current range's bounds SortByColumn(String, SortOrder) Sort current range by specified column. This updates the row positions within your WorkSheet. Range has to be rectangular: first and last rows numbers in all columns should be the same, and first and last columns numbers in all rows should be the same. Declaration public Range SortByColumn(string column, SortOrder sortOrder) Parameters Type Name Description System.String column Column name in the string form. For example \"A\" or \"AB\". Column should intersect current range SortOrder sortOrder Direction of the sort Returns Type Description Range This Range, allowing for a fluent code style. Exceptions Type Condition System.InvalidOperationException Thrown if range is not of rectangular shape System.ArgumentException Thrown if column name is not a valid column name System.IndexOutOfRangeException Thrown if column is out of current range's bounds SortDescending() Sort current range in descending order. This updates the cell positions within your WorkSheets. Declaration public Range SortDescending() Returns Type Description Range This Range, allowing for a fluent code style. SubtractRange(Range) Subtracts a range from the current. Result is first range without intersection of two ranges. Declaration public virtual Range SubtractRange(Range range) Parameters Type Name Description Range range The range to remove from the current working range. Returns Type Description Range This Range allowing a fluent coding style. Sum() Returns sum of all numeric cells . Declaration public Decimal Sum() Returns Type Description System.Decimal The sum value as a decimal. ToDataTable(Boolean) Get System.Data.DataTable representation of current range. Useful when working with DataGrids, System.Data, SQL or Entity Framework Declaration public DataTable ToDataTable(bool useFirstRowAsColumnNames = false) Parameters Type Name Description System.Boolean useFirstRowAsColumnNames Indicates whether to use first row as column names or not Returns Type Description System.Data.DataTable A System.Data.DataTable representation of current range. ToString() Returns the StringValue of this Range. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Trim() Removes all empty rows and columns on the range borders. Declaration public Range Trim() Returns Type Description Range This Range, allowing for a fluent code style. TryGetValue<TType>(out TType) Method for safely getting a range's total value. If range contains one cell then method calls GetValue<TType>() of this cell If range contains more than one cell then method tries to cast Sum() of all numeric cells within range to TType Use Try/Catch to avoid possible exceptions from this method if cell content types are inconsistent or contain formula errors. Declaration public bool TryGetValue<TType>(out TType value) Parameters Type Name Description TType value The sum value of the range, expressed as TType. Returns Type Description System.Boolean true if the range's content could be cast to TType. Type Parameters Name Description TType The .net type to which the cell's value will be cast. Exceptions Type Condition System.ArgumentException Range value cannot be casted to {type.Name} Operators Addition(Range, Range) Overloaded + operator, see also AddRange(Range) Declaration public static Range operator +(Range a, Range b) Parameters Type Name Description Range a This Range. Range b Another Range. Both Ranges will be joined in the result. Returns Type Description Range The combination of both ranges' areas. Subtraction(Range, Range) Overloaded - operator, see also SubtractRange(Range) Declaration public static Range operator -(Range a, Range b) Parameters Type Name Description Range a This Range. Range b Another Range which will be subtracted from the first range. Returns Type Description Range All cells in your Range, with any cells in the second Range removed. Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronXL.RangeAddress.html": {
    "href": "api/IronXL.RangeAddress.html",
    "title": "Class RangeAddress | C# Excel API | IronXL",
    "keywords": "Class RangeAddress Class that represents address of the range. Inheritance System.Object RangeAddress Namespace : IronXL Assembly : IronXL.dll Syntax public class RangeAddress : Object Properties ColumnsCount Amount of columns within this address. Declaration public int ColumnsCount { get; } Property Value Type Description System.Int32 FirstColumn Index of the first column within this address. Declaration public int FirstColumn { get; } Property Value Type Description System.Int32 FirstRow Index of the first row within this address. Declaration public int FirstRow { get; } Property Value Type Description System.Int32 LastColumn Index of the last column within this address. Declaration public int LastColumn { get; } Property Value Type Description System.Int32 LastRow Index of the last row within this address. Declaration public int LastRow { get; } Property Value Type Description System.Int32 Location Gets the Range / Cells location in Excel Address selector notation. E.G. \"A1:B16\" Declaration public string Location { get; } Property Value Type Description System.String The Range's location expressed as an Excel Address selector string. RowsCount Amount of rows within this address. Declaration public int RowsCount { get; } Property Value Type Description System.Int32 Methods Extend(RangeAddress) Combines two range addresses. The result is range address where the last column and the last row have maximum values among two combined addresses. Declaration public RangeAddress Extend(RangeAddress rangeAddress) Parameters Type Name Description RangeAddress rangeAddress The range address. Returns Type Description RangeAddress The result range address. Includes(Int32, Int32) Check whether this range address contains target cell. Declaration public bool Includes(int row, int col) Parameters Type Name Description System.Int32 row The row of the cell. zero based. System.Int32 col The column of the cell. zero based. E.g. column A is 0 Returns Type Description System.Boolean true if that specified cell falls within this RangeAddress IsEqual(RangeAddress) Checks whether two ranges are equal. Declaration public bool IsEqual(RangeAddress range) Parameters Type Name Description RangeAddress range Returns Type Description System.Boolean ToString() Converts to string of the location of the range in Excel Address selector notation. E.G. \"A4:D87\" Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance."
  },
  "api/IronXL.RangeColumn.html": {
    "href": "api/IronXL.RangeColumn.html",
    "title": "Class RangeColumn | C# Excel API | IronXL",
    "keywords": "Class RangeColumn A class that represents a single column of cells. Inheritance System.Object Range RangeColumn Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Inherited Members Range.GetEnumerator() Range.Sum() Range.Max() Range.Min() Range.Avg() Range.SortAscending() Range.SortDescending() Range.SortByColumn(String, SortOrder) Range.SortByColumn(Int32, SortOrder) Range.Trim() Range.ToDataTable(Boolean) Range.SetCellValue(Int32, Int32, Object) Range.GetValue<TType>() Range.TryGetValue<TType>(TType) Range.ToString() Range.ClearContents() Range.Copy(WorkSheet, String) Range.Replace(String, String) Range.SaveAsNamedTable(String, Boolean, TableStyle) Range.SaveAsNamedRange(String, Boolean) Range.GetAllRows() Range.GetAllPhysicalRows() Range.GetRows(Boolean) Range.GetAllColumns() Range.GetAllPhysicalColumns() Range.GetColumns(Boolean) Range.Row(Int32) Range.Column(Int32) Range.RangeAddressAsString Range.IsEmpty Range.Value Range.FormatString Range.Formula Range.Rows Range.AllRowsInRange Range.Columns Range.AllColumnsInRange Range.Style Range.WorkBook Range.DateTimeValue Range.StringValue Range.BoolValue Range.IntValue Range.DoubleValue Range.DecimalValue Range.FloatValue Range.Int64Value Range.LongValue Range.Int32Value Namespace : IronXL Assembly : IronXL.dll Syntax public class RangeColumn : Range Properties Hidden Gets or sets a value indicating whether this column is hidden. Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean RangeAddress Address of the column. Declaration public RangeAddress RangeAddress { get; } Property Value Type Description RangeAddress Width Gets or sets the width of the column. Declaration public int Width { get; set; } Property Value Type Description System.Int32 Methods AddRange(Range) Add range to the current column if they can be combined. Declaration public override Range AddRange(Range range) Parameters Type Name Description Range range The range to add to the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.AddRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be added to the current column because they are not on the same line or cannot be combined in one column AutoSizeColumn() Changes width of the column to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeColumn() Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. AutoSizeColumn(Boolean) Changes width of the column to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeColumn(bool useMergedCells) Parameters Type Name Description System.Boolean useMergedCells If true, the width of merged cells will be taken into account. Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. SubtractRange(Range) Subtract range from the current column if it can be subtracted. Declaration public override Range SubtractRange(Range range) Parameters Type Name Description Range range The range to remove from the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.SubtractRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be subtracted from the current column because result column isn't continuous Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable Inherited members GetEnumerator() Sum() Max() Min() Avg() SortAscending() SortDescending() SortByColumn(String, SortOrder) SortByColumn(Int32, SortOrder) Trim() ToDataTable(Boolean) SetCellValue(Int32, Int32, Object) GetValue<TType>() TryGetValue<TType>(TType) ToString() ClearContents() Copy(WorkSheet, String) Replace(String, String) SaveAsNamedTable(String, Boolean, TableStyle) SaveAsNamedRange(String, Boolean) GetAllRows() GetAllPhysicalRows() GetRows(Boolean) GetAllColumns() GetAllPhysicalColumns() GetColumns(Boolean) Row(Int32) Column(Int32) RangeAddressAsString IsEmpty Value FormatString Formula Rows AllRowsInRange Columns AllColumnsInRange Style WorkBook DateTimeValue StringValue BoolValue IntValue DoubleValue DecimalValue FloatValue Int64Value LongValue Int32Value"
  },
  "api/IronXL.RangeRow.html": {
    "href": "api/IronXL.RangeRow.html",
    "title": "Class RangeRow | C# Excel API | IronXL",
    "keywords": "Class RangeRow A class that represents a single row of cells. Inheritance System.Object Range RangeRow Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Inherited Members Range.GetEnumerator() Range.Sum() Range.Max() Range.Min() Range.Avg() Range.SortAscending() Range.SortDescending() Range.SortByColumn(String, SortOrder) Range.SortByColumn(Int32, SortOrder) Range.Trim() Range.ToDataTable(Boolean) Range.SetCellValue(Int32, Int32, Object) Range.GetValue<TType>() Range.TryGetValue<TType>(TType) Range.ToString() Range.ClearContents() Range.Copy(WorkSheet, String) Range.Replace(String, String) Range.SaveAsNamedTable(String, Boolean, TableStyle) Range.SaveAsNamedRange(String, Boolean) Range.GetAllRows() Range.GetAllPhysicalRows() Range.GetRows(Boolean) Range.GetAllColumns() Range.GetAllPhysicalColumns() Range.GetColumns(Boolean) Range.Row(Int32) Range.Column(Int32) Range.RangeAddressAsString Range.IsEmpty Range.Value Range.FormatString Range.Formula Range.Rows Range.AllRowsInRange Range.Columns Range.AllColumnsInRange Range.Style Range.WorkBook Range.DateTimeValue Range.StringValue Range.BoolValue Range.IntValue Range.DoubleValue Range.DecimalValue Range.FloatValue Range.Int64Value Range.LongValue Range.Int32Value Namespace : IronXL Assembly : IronXL.dll Syntax public class RangeRow : Range Properties Height Gets or sets the height of the row. Declaration public int Height { get; set; } Property Value Type Description System.Int32 Hidden Gets or sets a value indicating whether this row is hidden. Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean RangeAddress Address of the row. Declaration public RangeAddress RangeAddress { get; } Property Value Type Description RangeAddress Methods AddRange(Range) Add range to the current row if they can be combined. Declaration public override Range AddRange(Range range) Parameters Type Name Description Range range The range to add to the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.AddRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be added to the current row because they are not on the same line or cannot be combined in one row AutoSizeRow() Changes height of the row to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeRow() Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. AutoSizeRow(Boolean) Changes height of the row to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeRow(bool useMergedCells) Parameters Type Name Description System.Boolean useMergedCells If true, the height of merged cells will be considered. Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. RemoveRow() Removes this Row from the current WorkSheet ; Declaration public void RemoveRow() SubtractRange(Range) Subtract range from the current row if it can be subtracted Declaration public override Range SubtractRange(Range range) Parameters Type Name Description Range range The range to remove from the current working range. Returns Type Description Range This Range allowing a fluent coding style. Overrides Range.SubtractRange(Range) Exceptions Type Condition System.InvalidOperationException This range cannot be subtracted from the current row because result row isn't continuous Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable Inherited members GetEnumerator() Sum() Max() Min() Avg() SortAscending() SortDescending() SortByColumn(String, SortOrder) SortByColumn(Int32, SortOrder) Trim() ToDataTable(Boolean) SetCellValue(Int32, Int32, Object) GetValue<TType>() TryGetValue<TType>(TType) ToString() ClearContents() Copy(WorkSheet, String) Replace(String, String) SaveAsNamedTable(String, Boolean, TableStyle) SaveAsNamedRange(String, Boolean) GetAllRows() GetAllPhysicalRows() GetRows(Boolean) GetAllColumns() GetAllPhysicalColumns() GetColumns(Boolean) Row(Int32) Column(Int32) RangeAddressAsString IsEmpty Value FormatString Formula Rows AllRowsInRange Columns AllColumnsInRange Style WorkBook DateTimeValue StringValue BoolValue IntValue DoubleValue DecimalValue FloatValue Int64Value LongValue Int32Value"
  },
  "api/IronXL.SortOrder.html": {
    "href": "api/IronXL.SortOrder.html",
    "title": "Class SortOrder | C# Excel API | IronXL",
    "keywords": "Class SortOrder Represents sorting order Inheritance System.Object SortOrder Namespace : IronXL Assembly : IronXL.dll Syntax public sealed class SortOrder : Enum Fields Ascending A-Z, oldest to newest, smallest to largest Declaration public const SortOrder Ascending Field Value Type Description SortOrder Descending Z-A, newest to oldest, largest to smallest Declaration public const SortOrder Descending Field Value Type Description SortOrder value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Styles.BorderType.html": {
    "href": "api/IronXL.Styles.BorderType.html",
    "title": "Class BorderType | C# Excel API | IronXL",
    "keywords": "Class BorderType The enumeration value indicating the line style of a border in a cell Inheritance System.Object BorderType Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class BorderType : Enum Fields DashDot dash-dot border Declaration public const BorderType DashDot Field Value Type Description BorderType DashDotDot dash-dot-dot border Declaration public const BorderType DashDotDot Field Value Type Description BorderType Dashed dash border Declaration public const BorderType Dashed Field Value Type Description BorderType Dotted dot border Declaration public const BorderType Dotted Field Value Type Description BorderType Double double-line border Declaration public const BorderType Double Field Value Type Description BorderType Hair hair-line border Declaration public const BorderType Hair Field Value Type Description BorderType Medium Medium border Declaration public const BorderType Medium Field Value Type Description BorderType MediumDashDot medium dash-dot border Declaration public const BorderType MediumDashDot Field Value Type Description BorderType MediumDashDotDot medium dash-dot-dot border Declaration public const BorderType MediumDashDotDot Field Value Type Description BorderType MediumDashed Medium dashed border Declaration public const BorderType MediumDashed Field Value Type Description BorderType None No border Declaration public const BorderType None Field Value Type Description BorderType SlantedDashDot slanted dash-dot border Declaration public const BorderType SlantedDashDot Field Value Type Description BorderType Thick Thick border Declaration public const BorderType Thick Field Value Type Description BorderType Thin Thin border Declaration public const BorderType Thin Field Value Type Description BorderType value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.DiagonalBorderDirection.html": {
    "href": "api/IronXL.Styles.DiagonalBorderDirection.html",
    "title": "Class DiagonalBorderDirection | C# Excel API | IronXL",
    "keywords": "Class DiagonalBorderDirection Enum that stands for direction of diagonal border inside cell Inheritance System.Object DiagonalBorderDirection Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class DiagonalBorderDirection : Enum Fields Backward Backward diagonal border, from left-top to right-bottom Declaration public const DiagonalBorderDirection Backward Field Value Type Description DiagonalBorderDirection Both Both forward and backward diagonal border Declaration public const DiagonalBorderDirection Both Field Value Type Description DiagonalBorderDirection Forward Forward diagonal border, from right-top to left-bottom Declaration public const DiagonalBorderDirection Forward Field Value Type Description DiagonalBorderDirection None No diagonal border Declaration public const DiagonalBorderDirection None Field Value Type Description DiagonalBorderDirection value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.FillPattern.html": {
    "href": "api/IronXL.Styles.FillPattern.html",
    "title": "Class FillPattern | C# Excel API | IronXL",
    "keywords": "Class FillPattern The enumeration value indicating the style of fill pattern being used for a cell format. Inheritance System.Object FillPattern Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class FillPattern : Enum Fields AltBars Wide dots Declaration public const FillPattern AltBars Field Value Type Description FillPattern BigSpots Large spots Declaration public const FillPattern BigSpots Field Value Type Description FillPattern Bricks Brick-like layout Declaration public const FillPattern Bricks Field Value Type Description FillPattern Diamonds Diamonds Declaration public const FillPattern Diamonds Field Value Type Description FillPattern FineDots Small fine dots Declaration public const FillPattern FineDots Field Value Type Description FillPattern LeastDots Least Dots Declaration public const FillPattern LeastDots Field Value Type Description FillPattern LessDots Less Dots Declaration public const FillPattern LessDots Field Value Type Description FillPattern NoFill No background Declaration public const FillPattern NoFill Field Value Type Description FillPattern SolidForeground Solidly Filled Declaration public const FillPattern SolidForeground Field Value Type Description FillPattern SparseDots Sparse dots Declaration public const FillPattern SparseDots Field Value Type Description FillPattern Squares Squares Declaration public const FillPattern Squares Field Value Type Description FillPattern ThickBackwardDiagonals Thick backward facing diagonals Declaration public const FillPattern ThickBackwardDiagonals Field Value Type Description FillPattern ThickForwardDiagonals Thick forward facing diagonals Declaration public const FillPattern ThickForwardDiagonals Field Value Type Description FillPattern ThickHorizontalBands Thick horizontal bands Declaration public const FillPattern ThickHorizontalBands Field Value Type Description FillPattern ThickVerticalBands Thick vertical bands Declaration public const FillPattern ThickVerticalBands Field Value Type Description FillPattern ThinBackwardDiagonals Thin backward diagonal Declaration public const FillPattern ThinBackwardDiagonals Field Value Type Description FillPattern ThinForwardDiagonals Thin forward diagonal Declaration public const FillPattern ThinForwardDiagonals Field Value Type Description FillPattern ThinHorizontalBands Thin horizontal bands Declaration public const FillPattern ThinHorizontalBands Field Value Type Description FillPattern ThinVerticalBands Thin vertical bands Declaration public const FillPattern ThinVerticalBands Field Value Type Description FillPattern value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.FontScript.html": {
    "href": "api/IronXL.Styles.FontScript.html",
    "title": "Class FontScript | C# Excel API | IronXL",
    "keywords": "Class FontScript Enum that stands for position of the symbol Inheritance System.Object FontScript Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class FontScript : Enum Fields None Default symbol position Declaration public const FontScript None Field Value Type Description FontScript Sub Stands for position when symbol is at the bottom of the line Declaration public const FontScript Sub Field Value Type Description FontScript Super Stands for position when symbol is on the top of the line Declaration public const FontScript Super Field Value Type Description FontScript value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Styles.FontUnderlineType.html": {
    "href": "api/IronXL.Styles.FontUnderlineType.html",
    "title": "Class FontUnderlineType | C# Excel API | IronXL",
    "keywords": "Class FontUnderlineType Enum that stands for different types of font underline Inheritance System.Object FontUnderlineType Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class FontUnderlineType : Enum Fields Double A double underline Declaration public const FontUnderlineType Double Field Value Type Description FontUnderlineType DoubleAccounting An accounting style double underline Declaration public const FontUnderlineType DoubleAccounting Field Value Type Description FontUnderlineType None Not underlined Declaration public const FontUnderlineType None Field Value Type Description FontUnderlineType Single A single (normal) underline as used in word processing Declaration public const FontUnderlineType Single Field Value Type Description FontUnderlineType SingleAccounting An accounting style single underline Declaration public const FontUnderlineType SingleAccounting Field Value Type Description FontUnderlineType value__ Declaration public short value__ Field Value Type Description System.Int16"
  },
  "api/IronXL.Styles.HorizontalAlignment.html": {
    "href": "api/IronXL.Styles.HorizontalAlignment.html",
    "title": "Class HorizontalAlignment | C# Excel API | IronXL",
    "keywords": "Class HorizontalAlignment The enumeration value indicating horizontal alignment of a cell, I.e., whether it is aligned general, left, right, horizontally centered, Filled (replicated), justified, centered across multiple cells, or distributed. Inheritance System.Object HorizontalAlignment Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class HorizontalAlignment : Enum Fields Center The horizontal alignment is centered, meaning the text is centered across the cell. Declaration public const HorizontalAlignment Center Field Value Type Description HorizontalAlignment CenterSelection The horizontal alignment is centered across multiple cells. The information about how many cells to span is expressed in the Sheet Part, in the row of the cell in question. For each cell that is spanned in the alignment, a cell element needs to be written out, with the same style Id which references the centerContinuous alignment. Declaration public const HorizontalAlignment CenterSelection Field Value Type Description HorizontalAlignment Distributed Indicates that each 'word' in each line of text inside the cell is evenly distributed across the width of the cell, with flush right and left margins. When there is also an indent value to apply, both the left and right side of the cell are pAdded by the indent value. A 'word' is a set of characters with no space character in them. Two lines inside a cell are Separated by a carriage return. Declaration public const HorizontalAlignment Distributed Field Value Type Description HorizontalAlignment Fill Indicates that the value of the cell should be Filled across the entire width of the cell. If blank cells to the right also have the fill alignment, they are also Filled with the value, using a convention similar to centerContinuous. Additional rules: Only whole values can be Appended, not partial values. The column will not be widened to 'best fit' the Filled value If Appending an Additional occurrence of the value exceeds the boundary of the cell left/right edge, don't append the Additional occurrence of the value. The display value of the cell is Filled, not the underlying raw number. Declaration public const HorizontalAlignment Fill Field Value Type Description HorizontalAlignment General The horizontal alignment is general-aligned. Text data is left-aligned. Numbers, dates, and times are right aligned. Boolean types are centered. Changing the alignment does not change the type of data. Declaration public const HorizontalAlignment General Field Value Type Description HorizontalAlignment Justify The horizontal alignment is justified (flush left and right). For each line of text, aligns each line of the wrapped text in a cell to the right and left (except the last line). If no single line of text wraps in the cell, then the text is not justified. Declaration public const HorizontalAlignment Justify Field Value Type Description HorizontalAlignment Left The horizontal alignment is left-aligned, even in Right-to-Left mode. Aligns contents at the left edge of the cell. If an indent amount is specified, the contents of the cell is indented from the left by the specified number of character spaces. The character spaces are based on the default font and font size for the workbook. Declaration public const HorizontalAlignment Left Field Value Type Description HorizontalAlignment Right The horizontal alignment is right-aligned, meaning that cell contents are aligned at the right edge of the cell, even in Right-to-Left mode. Declaration public const HorizontalAlignment Right Field Value Type Description HorizontalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.Styles.html": {
    "href": "api/IronXL.Styles.html",
    "title": "Namespace IronXL.Styles | C# Excel API | IronXL",
    "keywords": "Namespace IronXL.Styles Classes BorderType The enumeration value indicating the line style of a border in a cell DiagonalBorderDirection Enum that stands for direction of diagonal border inside cell FillPattern The enumeration value indicating the style of fill pattern being used for a cell format. FontScript Enum that stands for position of the symbol FontUnderlineType Enum that stands for different types of font underline HorizontalAlignment The enumeration value indicating horizontal alignment of a cell, I.e., whether it is aligned general, left, right, horizontally centered, Filled (replicated), justified, centered across multiple cells, or distributed. TableStyle Style information for a specific table instance. VerticalAlignment This enumeration value indicates the type of vertical alignment for a cell, i.e., whether it is aligned top, bottom, vertically centered, justified or distributed. Interfaces IBorder Interface for cell border value IFont Interface for cell font value IStylable Interface for indicating that certain Excel unit has it's own style IStyle Interface for cell style"
  },
  "api/IronXL.Styles.IBorder.html": {
    "href": "api/IronXL.Styles.IBorder.html",
    "title": "Interface IBorder | C# Excel API | IronXL",
    "keywords": "Interface IBorder Interface for cell border value Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IBorder Properties Color Property that returns border color in rgb format. Declaration string Color { get; set; } Property Value Type Description System.String Type Gets or sets the type of the border line. See BorderType Declaration BorderType Type { get; set; } Property Value Type Description BorderType Methods SetColor(Color) Method for setting border color with Color value Declaration void SetColor(Color color) Parameters Type Name Description IronSoftware.Drawing.Color color Color value SetColor(String) Method for setting border color with the rgb string. Declaration void SetColor(string rgb) Parameters Type Name Description System.String rgb Color rgb value"
  },
  "api/IronXL.Styles.IFont.html": {
    "href": "api/IronXL.Styles.IFont.html",
    "title": "Interface IFont | C# Excel API | IronXL",
    "keywords": "Interface IFont Interface for cell font value Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IFont Properties Bold Property that indicates if cell font is bold Declaration bool Bold { get; set; } Property Value Type Description System.Boolean Color Property that returns font color in rgb format. Declaration string Color { get; set; } Property Value Type Description System.String FontScript Gets or sets script property of font. Also take a look at FontScript to get list of available options Declaration FontScript FontScript { get; set; } Property Value Type Description FontScript Height Gets or sets font size in px Declaration short Height { get; set; } Property Value Type Description System.Int16 Italic Property that indicates if cell font is italic Declaration bool Italic { get; set; } Property Value Type Description System.Boolean Name Gets or sets font name Declaration string Name { get; set; } Property Value Type Description System.String Strikeout Get whether to use a strikeout horizontal line through the text or not Declaration bool Strikeout { get; set; } Property Value Type Description System.Boolean Underline Gets or sets underline property of font. Also take a look at FontUnderlineType to get list of available options Declaration FontUnderlineType Underline { get; set; } Property Value Type Description FontUnderlineType Methods SetColor(Color) Method for setting font color with Color value Declaration void SetColor(Color color) Parameters Type Name Description IronSoftware.Drawing.Color color Color value SetColor(String) Method for setting font color with the rgb string. Declaration void SetColor(string rgb) Parameters Type Name Description System.String rgb Color rgb value"
  },
  "api/IronXL.Styles.IStylable.html": {
    "href": "api/IronXL.Styles.IStylable.html",
    "title": "Interface IStylable | C# Excel API | IronXL",
    "keywords": "Interface IStylable Interface for indicating that certain Excel unit has it's own style Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IStylable Properties Style Cell style Declaration IStyle Style { get; } Property Value Type Description IStyle"
  },
  "api/IronXL.Styles.IStyle.html": {
    "href": "api/IronXL.Styles.IStyle.html",
    "title": "Interface IStyle | C# Excel API | IronXL",
    "keywords": "Interface IStyle Interface for cell style Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public interface IStyle Properties BackgroundColor Gets the color of the background in rgb format. E.g. #ffffff Declaration string BackgroundColor { get; set; } Property Value Type Description System.String BottomBorder Property that represents cell bottom border Declaration IBorder BottomBorder { get; } Property Value Type Description IBorder DiagonalBorder Property that represents cell diagonal border Declaration IBorder DiagonalBorder { get; } Property Value Type Description IBorder DiagonalBorderDirection Gets or sets the diagonal border direction value. Declaration DiagonalBorderDirection DiagonalBorderDirection { get; set; } Property Value Type Description DiagonalBorderDirection FillPattern Gets or sets fill pattern of the cell. Declaration FillPattern FillPattern { get; set; } Property Value Type Description FillPattern Font Property that represents cell font value Declaration IFont Font { get; } Property Value Type Description IFont HorizontalAlignment Gets or sets the horizontal alignment of the cell. Declaration HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment Indention Get the number of spaces to indent the text in the cell Declaration short Indention { get; set; } Property Value Type Description System.Int16 LeftBorder Property that represents cell left border Declaration IBorder LeftBorder { get; } Property Value Type Description IBorder RightBorder Property that represents cell right border Declaration IBorder RightBorder { get; } Property Value Type Description IBorder Rotation Get the degree of rotation (between -90 and 90 degrees) for the text in the cell Declaration short Rotation { get; set; } Property Value Type Description System.Int16 ShrinkToFit Gets or sets a value indicating whether the cell should be auto-sized to shrink to fit if the text is too long Declaration bool ShrinkToFit { get; set; } Property Value Type Description System.Boolean TopBorder Property that represents cell top border Declaration IBorder TopBorder { get; } Property Value Type Description IBorder VerticalAlignment Gets or sets the vertical alignment of the cell. Declaration VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment WrapText Bool property that indicates if text is wrapped Declaration bool WrapText { get; set; } Property Value Type Description System.Boolean Methods SetBackgroundColor(Color) Method for setting cell background color with IronSoftware.Drawing.Color value Declaration void SetBackgroundColor(Color color) Parameters Type Name Description IronSoftware.Drawing.Color color Color value SetBackgroundColor(String) Method for setting cell background color with an rgb string. Declaration void SetBackgroundColor(string rgb) Parameters Type Name Description System.String rgb Color RGB value"
  },
  "api/IronXL.Styles.TableStyle.html": {
    "href": "api/IronXL.Styles.TableStyle.html",
    "title": "Class TableStyle | C# Excel API | IronXL",
    "keywords": "Class TableStyle Style information for a specific table instance. Inheritance System.Object TableStyle Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public class TableStyle : Object Constructors TableStyle() Declaration public TableStyle() Fields None No built-in style. Declaration public static readonly TableStyle None Field Value Type Description TableStyle TableStyleDark1 'TableStyleDark1' built-in style. Declaration public static readonly TableStyle TableStyleDark1 Field Value Type Description TableStyle TableStyleDark10 'TableStyleDark10' built-in style. Declaration public static readonly TableStyle TableStyleDark10 Field Value Type Description TableStyle TableStyleDark11 'TableStyleDark11' built-in style. Declaration public static readonly TableStyle TableStyleDark11 Field Value Type Description TableStyle TableStyleDark2 'TableStyleDark2' built-in style. Declaration public static readonly TableStyle TableStyleDark2 Field Value Type Description TableStyle TableStyleDark3 'TableStyleDark3' built-in style. Declaration public static readonly TableStyle TableStyleDark3 Field Value Type Description TableStyle TableStyleDark4 'TableStyleDark4' built-in style. Declaration public static readonly TableStyle TableStyleDark4 Field Value Type Description TableStyle TableStyleDark5 'TableStyleDark5' built-in style. Declaration public static readonly TableStyle TableStyleDark5 Field Value Type Description TableStyle TableStyleDark6 'TableStyleDark6' built-in style. Declaration public static readonly TableStyle TableStyleDark6 Field Value Type Description TableStyle TableStyleDark7 'TableStyleDark7' built-in style. Declaration public static readonly TableStyle TableStyleDark7 Field Value Type Description TableStyle TableStyleDark8 'TableStyleDark8' built-in style. Declaration public static readonly TableStyle TableStyleDark8 Field Value Type Description TableStyle TableStyleDark9 'TableStyleDark9' built-in style. Declaration public static readonly TableStyle TableStyleDark9 Field Value Type Description TableStyle TableStyleLight1 'TableStyleLight1' built-in style. Declaration public static readonly TableStyle TableStyleLight1 Field Value Type Description TableStyle TableStyleLight10 'TableStyleLight10' built-in style. Declaration public static readonly TableStyle TableStyleLight10 Field Value Type Description TableStyle TableStyleLight11 'TableStyleLight11' built-in style. Declaration public static readonly TableStyle TableStyleLight11 Field Value Type Description TableStyle TableStyleLight12 'TableStyleLight12' built-in style. Declaration public static readonly TableStyle TableStyleLight12 Field Value Type Description TableStyle TableStyleLight13 'TableStyleLight13' built-in style. Declaration public static readonly TableStyle TableStyleLight13 Field Value Type Description TableStyle TableStyleLight14 'TableStyleLight14' built-in style. Declaration public static readonly TableStyle TableStyleLight14 Field Value Type Description TableStyle TableStyleLight15 'TableStyleLight15' built-in style. Declaration public static readonly TableStyle TableStyleLight15 Field Value Type Description TableStyle TableStyleLight16 'TableStyleLight16' built-in style. Declaration public static readonly TableStyle TableStyleLight16 Field Value Type Description TableStyle TableStyleLight17 'TableStyleLight17' built-in style. Declaration public static readonly TableStyle TableStyleLight17 Field Value Type Description TableStyle TableStyleLight18 'TableStyleLight18' built-in style. Declaration public static readonly TableStyle TableStyleLight18 Field Value Type Description TableStyle TableStyleLight19 'TableStyleLight19' built-in style. Declaration public static readonly TableStyle TableStyleLight19 Field Value Type Description TableStyle TableStyleLight2 'TableStyleLight2' built-in style. Declaration public static readonly TableStyle TableStyleLight2 Field Value Type Description TableStyle TableStyleLight20 'TableStyleLight20' built-in style. Declaration public static readonly TableStyle TableStyleLight20 Field Value Type Description TableStyle TableStyleLight21 'TableStyleLight21' built-in style. Declaration public static readonly TableStyle TableStyleLight21 Field Value Type Description TableStyle TableStyleLight3 'TableStyleLight3' built-in style. Declaration public static readonly TableStyle TableStyleLight3 Field Value Type Description TableStyle TableStyleLight4 'TableStyleLight4' built-in style. Declaration public static readonly TableStyle TableStyleLight4 Field Value Type Description TableStyle TableStyleLight5 'TableStyleLight5' built-in style. Declaration public static readonly TableStyle TableStyleLight5 Field Value Type Description TableStyle TableStyleLight6 'TableStyleLight6' built-in style. Declaration public static readonly TableStyle TableStyleLight6 Field Value Type Description TableStyle TableStyleLight7 'TableStyleLight7' built-in style. Declaration public static readonly TableStyle TableStyleLight7 Field Value Type Description TableStyle TableStyleLight8 'TableStyleLight8' built-in style. Declaration public static readonly TableStyle TableStyleLight8 Field Value Type Description TableStyle TableStyleLight9 'TableStyleLight9' built-in style. Declaration public static readonly TableStyle TableStyleLight9 Field Value Type Description TableStyle TableStyleMedium1 'TableStyleMedium1' built-in style. Declaration public static readonly TableStyle TableStyleMedium1 Field Value Type Description TableStyle TableStyleMedium10 'TableStyleMedium10' built-in style. Declaration public static readonly TableStyle TableStyleMedium10 Field Value Type Description TableStyle TableStyleMedium11 'TableStyleMedium11' built-in style. Declaration public static readonly TableStyle TableStyleMedium11 Field Value Type Description TableStyle TableStyleMedium12 'TableStyleMedium12' built-in style. Declaration public static readonly TableStyle TableStyleMedium12 Field Value Type Description TableStyle TableStyleMedium13 'TableStyleMedium13' built-in style. Declaration public static readonly TableStyle TableStyleMedium13 Field Value Type Description TableStyle TableStyleMedium14 'TableStyleMedium14' built-in style. Declaration public static readonly TableStyle TableStyleMedium14 Field Value Type Description TableStyle TableStyleMedium15 'TableStyleMedium15' built-in style. Declaration public static readonly TableStyle TableStyleMedium15 Field Value Type Description TableStyle TableStyleMedium16 'TableStyleMedium16' built-in style. Declaration public static readonly TableStyle TableStyleMedium16 Field Value Type Description TableStyle TableStyleMedium17 'TableStyleMedium17' built-in style. Declaration public static readonly TableStyle TableStyleMedium17 Field Value Type Description TableStyle TableStyleMedium18 'TableStyleMedium18' built-in style. Declaration public static readonly TableStyle TableStyleMedium18 Field Value Type Description TableStyle TableStyleMedium19 'TableStyleMedium19' built-in style. Declaration public static readonly TableStyle TableStyleMedium19 Field Value Type Description TableStyle TableStyleMedium2 'TableStyleMedium2' built-in style. Declaration public static readonly TableStyle TableStyleMedium2 Field Value Type Description TableStyle TableStyleMedium20 'TableStyleMedium20' built-in style. Declaration public static readonly TableStyle TableStyleMedium20 Field Value Type Description TableStyle TableStyleMedium21 'TableStyleMedium21' built-in style. Declaration public static readonly TableStyle TableStyleMedium21 Field Value Type Description TableStyle TableStyleMedium22 'TableStyleMedium22' built-in style. Declaration public static readonly TableStyle TableStyleMedium22 Field Value Type Description TableStyle TableStyleMedium23 'TableStyleMedium23' built-in style. Declaration public static readonly TableStyle TableStyleMedium23 Field Value Type Description TableStyle TableStyleMedium24 'TableStyleMedium24' built-in style. Declaration public static readonly TableStyle TableStyleMedium24 Field Value Type Description TableStyle TableStyleMedium25 'TableStyleMedium25' built-in style. Declaration public static readonly TableStyle TableStyleMedium25 Field Value Type Description TableStyle TableStyleMedium26 'TableStyleMedium26' built-in style. Declaration public static readonly TableStyle TableStyleMedium26 Field Value Type Description TableStyle TableStyleMedium27 'TableStyleMedium27' built-in style. Declaration public static readonly TableStyle TableStyleMedium27 Field Value Type Description TableStyle TableStyleMedium28 'TableStyleMedium28' built-in style. Declaration public static readonly TableStyle TableStyleMedium28 Field Value Type Description TableStyle TableStyleMedium3 'TableStyleMedium3' built-in style. Declaration public static readonly TableStyle TableStyleMedium3 Field Value Type Description TableStyle TableStyleMedium4 'TableStyleMedium4' built-in style. Declaration public static readonly TableStyle TableStyleMedium4 Field Value Type Description TableStyle TableStyleMedium5 'TableStyleMedium5' built-in style. Declaration public static readonly TableStyle TableStyleMedium5 Field Value Type Description TableStyle TableStyleMedium6 'TableStyleMedium6' built-in style. Declaration public static readonly TableStyle TableStyleMedium6 Field Value Type Description TableStyle TableStyleMedium7 'TableStyleMedium7' built-in style. Declaration public static readonly TableStyle TableStyleMedium7 Field Value Type Description TableStyle TableStyleMedium8 'TableStyleMedium8' built-in style. Declaration public static readonly TableStyle TableStyleMedium8 Field Value Type Description TableStyle TableStyleMedium9 'TableStyleMedium9' built-in style. Declaration public static readonly TableStyle TableStyleMedium9 Field Value Type Description TableStyle Properties Name Gets or sets the name of the style (may reference a built-in style). Declaration public virtual string Name { get; set; } Property Value Type Description System.String ShowColumnStripes true if alternating column styles should be applied. Declaration public virtual Nullable<bool> ShowColumnStripes { get; set; } Property Value Type Description System.Nullable < System.Boolean > ShowFirstColumn true if the distinct first column style should be applied. Declaration public virtual Nullable<bool> ShowFirstColumn { get; set; } Property Value Type Description System.Nullable < System.Boolean > ShowLastColumn true if the distinct last column style should be applied. Declaration public virtual Nullable<bool> ShowLastColumn { get; set; } Property Value Type Description System.Nullable < System.Boolean > ShowRowStripes true if alternating row styles should be applied. Declaration public virtual Nullable<bool> ShowRowStripes { get; set; } Property Value Type Description System.Nullable < System.Boolean >"
  },
  "api/IronXL.Styles.VerticalAlignment.html": {
    "href": "api/IronXL.Styles.VerticalAlignment.html",
    "title": "Class VerticalAlignment | C# Excel API | IronXL",
    "keywords": "Class VerticalAlignment This enumeration value indicates the type of vertical alignment for a cell, i.e., whether it is aligned top, bottom, vertically centered, justified or distributed. Inheritance System.Object VerticalAlignment Namespace : IronXL.Styles Assembly : IronXL.dll Syntax public sealed class VerticalAlignment : Enum Fields Bottom The vertical alignment is aligned-to-bottom. Declaration public const VerticalAlignment Bottom Field Value Type Description VerticalAlignment Center The vertical alignment is centered across the height of the cell. Declaration public const VerticalAlignment Center Field Value Type Description VerticalAlignment Distributed When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top When text direction is vertical: behaves exactly as distributed horizontal alignment. The first words in a line of text (appearing at the top of the cell) are flush with the top edge of the cell, and the last words of a line of text are flush with the bottom edge of the cell, and the line of text is distributed evenly from top to bottom. Declaration public const VerticalAlignment Distributed Field Value Type Description VerticalAlignment Justify When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top and bottom margins. When text direction is vertical: similar behavior as horizontal justification. The alignment is justified (flush top and bottom in this case). For each line of text, each line of the wrapped text in a cell is aligned to the top and bottom (except the last line). If no single line of text wraps in the cell, then the text is not justified. Declaration public const VerticalAlignment Justify Field Value Type Description VerticalAlignment None The alignment is default Declaration public const VerticalAlignment None Field Value Type Description VerticalAlignment Top The vertical alignment is aligned-to-top. Declaration public const VerticalAlignment Top Field Value Type Description VerticalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronXL.WorkBook.html": {
    "href": "api/IronXL.WorkBook.html",
    "title": "Class WorkBook | C# Excel API | IronXL",
    "keywords": "Class WorkBook Class that stands for a whole Excel file. This is the first object most users will construct whether they are reading or writing a workbook. It is also the top level (home-base) object for creating new sheets and most other Excel programming operations. Inheritance System.Object WorkBook Namespace : IronXL Assembly : IronXL.dll Syntax public class WorkBook : Object Constructors WorkBook(ExcelFileFormat) Initializes a new instance of the WorkBook class as a new empty spreadsheet in XLS or XLSX format. Declaration public WorkBook(ExcelFileFormat fileFormat) Parameters Type Name Description ExcelFileFormat fileFormat The excel file format. XLS (legacy) or XLSX (preferred). See Also Create() WorkBook(Byte[]) Loads a new instance of the WorkBook by loading a CSV, TSV, XLS or XLSX from a Byte Array (byte[]). Declaration public WorkBook(byte[] spreadSheetBytes) Parameters Type Name Description System.Byte [] spreadSheetBytes The spread sheet data to load into IronXL. WorkBook(Stream) Loads a new instance of the WorkBook by loading a CSV, TSV, XLS or XLSX from a System.IO.Stream . Declaration public WorkBook(Stream spreadSheetStream) Parameters Type Name Description System.IO.Stream spreadSheetStream The spread sheet stream to load into IronXL. WorkBook(String) Loads a new instance of the WorkBook by loading a CSV, TSV, XLS or XLSX file. Declaration public WorkBook(string spreadSheetFilePath) Parameters Type Name Description System.String spreadSheetFilePath The spread sheet file path to load into IronXL. Properties DefaultWorkSheet Gets the default (first) work sheet in the workbook. Declaration public WorkSheet DefaultWorkSheet { get; } Property Value Type Description WorkSheet The default work sheet or creates a new sheet . FilePath The full file path to this Excel or CSV document. returns null if this WorkBook has no location on disk. Use SaveAs(String) to set a path. Declaration public string FilePath { get; } Property Value Type Description System.String A fully qualified file path; IsEncrypted Checks if workbook should be encrypted when saved Declaration public bool IsEncrypted { get; set; } Property Value Type Description System.Boolean Metadata Gets the metadata of the document. Declaration public IMetadata Metadata { get; } Property Value Type Description IMetadata Password Password with which the workbook will be encrypted when saved. Workbook will not be encrypted if this property is null; Declaration public string Password { get; set; } Property Value Type Description System.String WorkSheets Collection of worksheets within current workbook Declaration public WorksheetsCollection WorkSheets { get; } Property Value Type Description WorksheetsCollection The work sheets as a list. Can be accessed as WorkBook.WorkSheets[0]. Methods Close() Closes the workbook object. Once this has been called, no further operations, updates or reads should be performed on the Workbook. Declaration public void Close() Create() Create new XLSX Excel WorkBook . Declaration public static WorkBook Create() Returns Type Description WorkBook A new WorkBook Create(ExcelFileFormat) Create new workbook with the specified format. Declaration public static WorkBook Create(ExcelFileFormat fileFormat) Parameters Type Name Description ExcelFileFormat fileFormat The excel file format. XLSX or XLS Returns Type Description WorkBook A new WorkBook Create(CreatingOptions) Create new workbook with the specified options. Declaration public static WorkBook Create(CreatingOptions options) Parameters Type Name Description CreatingOptions options Advanced workbook creation options object. Returns Type Description WorkBook A new WorkBook Exceptions Type Condition System.Exception CreateWorkSheet(String) Create new worksheet with the specified name Declaration public WorkSheet CreateWorkSheet(string name) Parameters Type Name Description System.String name The name of the new worksheet. Returns Type Description WorkSheet A new WorkSheet within this WorkBook . Decrypt(Stream, String) Decrypts a stream using provided password Declaration public static MemoryStream Decrypt(Stream stream, string password) Parameters Type Name Description System.IO.Stream stream A stream to decrypt System.String password A password Returns Type Description System.IO.MemoryStream Decrypted System.IO.MemoryStream Exceptions Type Condition System.InvalidOperationException Encrypt(String) Encrypts a workbook with a password provided as argument or if password is not provided - with a password stored in Password property. Declaration public MemoryStream Encrypt(string password = null) Parameters Type Name Description System.String password Password to use for encryption Returns Type Description System.IO.MemoryStream Encryped System.IO.MemoryStream Exceptions Type Condition System.ArgumentNullException Thrown if no password provided as argument and no password is stored in Password property EvaluateAll() Loops over all cells in all sheets of the associated workbook. For cells that contain formulas, their formulas are evaluated, and the results are saved. These cells remain as formula cells. For cells that do not contain formulas, no changes are made. Declaration public WorkBook EvaluateAll() Returns Type Description WorkBook ExportToHtml(String) Export workbook to the HTML file with the specified name. Declaration public WorkBook ExportToHtml(string filename) Parameters Type Name Description System.String filename The filename Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. ExportToHtml(String, HtmlExportOptions) Export workbook to the HTML file with the specified name. Declaration public WorkBook ExportToHtml(string filename, HtmlExportOptions options) Parameters Type Name Description System.String filename Filename to save with HtmlExportOptions options Options to customize result file view. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. ExportToHtml(String, Boolean, Boolean, Boolean, Boolean, Boolean) Exports workbook to the HTML file with the specified name and HTMLExportOptions. Declaration public WorkBook ExportToHtml(string filename, bool outputColumnHeaders = true, bool outputHiddenColumns = false, bool outputHiddenRows = true, bool outputLeadingSpacesAsNonBreaking = true, bool outputRowNumbers = true) Parameters Type Name Description System.String filename The filename. System.Boolean outputColumnHeaders Property that indicates whether to show column header in result file. System.Boolean outputHiddenColumns Property that indicates whether to show hidden columns in result file.. System.Boolean outputHiddenRows Property that indicates whether to show hidden rows in result file. System.Boolean outputLeadingSpacesAsNonBreaking Property that indicates whether to show leading spaces as non-breaking in result file. System.Boolean outputRowNumbers Property that indicates whether to show row numbers in result file. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. ExportToHtmlString(HtmlExportOptions) Export workbook to HTML file with the specified options. Declaration public string ExportToHtmlString(HtmlExportOptions options) Parameters Type Name Description HtmlExportOptions options Options to customize result file view. Returns Type Description System.String An HTML String ExportToHtmlString(Boolean, Boolean, Boolean, Boolean, Boolean) Exports workbook to HTML with the specified HTMLExportOptions. Declaration public string ExportToHtmlString(bool outputColumnHeaders = true, bool outputHiddenColumns = false, bool outputHiddenRows = true, bool outputLeadingSpacesAsNonBreaking = true, bool outputRowNumbers = true) Parameters Type Name Description System.Boolean outputColumnHeaders Property that indicates whether to show column header in result file. System.Boolean outputHiddenColumns Property that indicates whether to show hidden columns in result file.. System.Boolean outputHiddenRows Property that indicates whether to show hidden rows in result file. System.Boolean outputLeadingSpacesAsNonBreaking Property that indicates whether to show leading spaces as non-breaking in result file. System.Boolean outputRowNumbers Property that indicates whether to show row numbers in result file. Returns Type Description System.String A formatted HTML String. FromByteArray(Byte[]) Creates a new workbook from its binary data in memory (byte[]) Declaration public static WorkBook FromByteArray(byte[] data) Parameters Type Name Description System.Byte [] data A byte array of an XLS, XLSX or CSV file Returns Type Description WorkBook The imported spreadsheet data as a WorkBook object FromByteArray(Byte[], String) Creates a new workbook from its binary data in memory (byte[]) using provided password. Declaration public static WorkBook FromByteArray(byte[] data, string password) Parameters Type Name Description System.Byte [] data A byte array of an XLS, XLSX or CSV file System.String password Password (cannot be null) Returns Type Description WorkBook The imported spreadsheet data as a WorkBook object FromStream(Stream) Creates a new workbook from its a System.IO.Stream Declaration public static WorkBook FromStream(Stream stream) Parameters Type Name Description System.IO.Stream stream A Stream of an XLS, XLSX or CSV file Returns Type Description WorkBook The imported spreadsheet stream as a WorkBook object FromStream(Stream, String) Creates a new workbook from its System.IO.Stream using provided password. Declaration public static WorkBook FromStream(Stream stream, string password) Parameters Type Name Description System.IO.Stream stream A Stream of an XLS, XLSX or CSV file System.String password Password (cannot be null) Returns Type Description WorkBook The imported spreadsheet stream as a WorkBook object GetWorkSheet(String) Returns a WorkSheet within this WorkBook ; identified by its name. Returns null if the named worksheet would not be found. Declaration public WorkSheet GetWorkSheet(string workSheetName) Parameters Type Name Description System.String workSheetName Name of the work sheet to select. Returns Type Description WorkSheet The specified WorkSheet . Returns null if the named worksheet would not be found. Import(String, ExcelFileFormat) Imports and creates a new workbook from specified CSV, TSV, JSON or XML file. Declaration public static WorkBook Import(string filename, ExcelFileFormat fileFormat) Parameters Type Name Description System.String filename The path of the file to import. ExcelFileFormat fileFormat The excel file format to generate with the imported data. XLS or XLSX. XLSX is preferred and default. Returns Type Description WorkBook The loaded spreadsheet as a WorkBook . Load(Byte[]) Load workbook from a ByteArray (byte[]). Shortcut synonym for LoadExcel(Byte[]) Declaration public static WorkBook Load(byte[] data) Parameters Type Name Description System.Byte [] data The binary data of the file to load. Returns Type Description WorkBook A new WorkBook Load(Byte[], String) Load workbook from a ByteArray (byte[]) using provided password. Shortcut synonym for LoadExcel(Byte[]) Declaration public static WorkBook Load(byte[] data, string password) Parameters Type Name Description System.Byte [] data The binary data of the file to load. System.String password Password (cannot be null) Returns Type Description WorkBook A new WorkBook Load(DataSet, CreatingOptions) Load workbook from specified System.Data.DataSet Declaration public static WorkBook Load(DataSet dataset, CreatingOptions options = null) Parameters Type Name Description System.Data.DataSet dataset The dataset to load from. CreatingOptions options Advanced options when importing non Excel formats. Returns Type Description WorkBook A new WorkBook Load(Stream) Load workbook from a System.IO.Stream . Shortcut synonym for LoadExcel(Stream) Declaration public static WorkBook Load(Stream stream) Parameters Type Name Description System.IO.Stream stream The stream of the file to load. Returns Type Description WorkBook A new WorkBook Load(Stream, String) Load workbook from a System.IO.Stream using provided password. Shortcut synonym for LoadExcel(Stream) Declaration public static WorkBook Load(Stream stream, string password) Parameters Type Name Description System.IO.Stream stream The stream of the file to load. System.String password Password (cannot be null) Returns Type Description WorkBook A new WorkBook Load(String) Load workbook from specified file. Shortcut synonym for LoadExcel(String) Declaration public static WorkBook Load(string filename) Parameters Type Name Description System.String filename The path of the file to load. Returns Type Description WorkBook A new WorkBook Load(String, LoadingOptions) Load workbook from a specified file. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML. Declaration public static WorkBook Load(string filename, LoadingOptions options) Parameters Type Name Description System.String filename The path of the file to load. LoadingOptions options Advanced options when importing non Excel formats. Returns Type Description WorkBook An Excel WorkBook object. Exceptions Type Condition System.Exception A general exception with a detailed developer message. System.FormatException Unsupported file extension. Supported formats are: XLS, XLSX, CSV, TSV. Load(String, String) Load workbook from a specified file using provided password. Declaration public static WorkBook Load(string filename, string password) Parameters Type Name Description System.String filename The path of the file to load. System.String password Password Returns Type Description WorkBook An Excel WorkBook object. Load(String, String, ExcelFileFormat) Loads workbook from specified file. Declaration public static WorkBook Load(string filename, string listDelimiter = null, ExcelFileFormat fileFormat) Parameters Type Name Description System.String filename The path of the file to load. System.String listDelimiter The list delimiter. ExcelFileFormat fileFormat The file format. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. LoadCSV(String, ExcelFileFormat, String, Boolean) Imports and creates a new workbook from specified CSV or TSV file. Declaration public static WorkBook LoadCSV(string filename, ExcelFileFormat fileFormat, string ListDelimiter = null, bool ConvertFieldValues = true) Parameters Type Name Description System.String filename The path of the file to import. ExcelFileFormat fileFormat The excel file format to generate with the imported data. XLS or XLSX. XLSX is preferred and default. System.String ListDelimiter The column list delimiter. Default (null) will refer to the system default settings. System.Boolean ConvertFieldValues Converts field values when loading CSV/TSV files. Default value is TRUE . Returns Type Description WorkBook The imported spreadsheet as a WorkBook object LoadExcel(Byte[]) Load workbook from specified Byte Array. Declaration public static WorkBook LoadExcel(byte[] data) Parameters Type Name Description System.Byte [] data The Byte Array of the file to load. Returns Type Description WorkBook A new WorkBook LoadExcel(Byte[], String) Load workbook from specified Byte Array using provided password. Declaration public static WorkBook LoadExcel(byte[] data, string password) Parameters Type Name Description System.Byte [] data The Byte Array of the file to load. System.String password Password (cannot be null) Returns Type Description WorkBook A new WorkBook LoadExcel(Stream) Load workbook from specified Stream. Declaration public static WorkBook LoadExcel(Stream file) Parameters Type Name Description System.IO.Stream file The Stream of the file to load. Returns Type Description WorkBook A new WorkBook LoadExcel(Stream, String) Load workbook from specified Stream using provided password. Declaration public static WorkBook LoadExcel(Stream file, string password) Parameters Type Name Description System.IO.Stream file The Stream of the file to load. System.String password Password (cannot be null) Returns Type Description WorkBook A new WorkBook LoadExcel(String) Load workbook from specified file. Declaration public static WorkBook LoadExcel(string filename) Parameters Type Name Description System.String filename The path of the file to load. Returns Type Description WorkBook A new WorkBook LoadExcel(String, String) Load workbook from specified file using provided password. Declaration public static WorkBook LoadExcel(string filename, string password) Parameters Type Name Description System.String filename The path of the file to load. System.String password Password (cannot be null) Returns Type Description WorkBook A new WorkBook LoadWorkSheet(DataTable) Import System.Data.DataTable as a worksheet. Useful when moving data between Excel and SQL. Declaration public WorkSheet LoadWorkSheet(DataTable table) Parameters Type Name Description System.Data.DataTable table The DataTable to load from. Returns Type Description WorkSheet Added WorkSheet LoadWorkSheetsFromDataSet(DataSet, WorkBook) Loads tables from specified System.Data.DataSet to specified WorkBook . Each table of the System.Data.DataSet will be represented as a separate WorkSheet . Declaration public static void LoadWorkSheetsFromDataSet(DataSet dataset, WorkBook workBook) Parameters Type Name Description System.Data.DataSet dataset The dataset to load from. WorkBook workBook WorkBook to load data to RemoveWorkSheet(Int32) Remove worksheet with the specified position within workbook. Declaration public void RemoveWorkSheet(int index) Parameters Type Name Description System.Int32 index Worksheet 0-based index. RemoveWorkSheet(String) Remove worksheet with the specified name. Declaration public void RemoveWorkSheet(string name) Parameters Type Name Description System.String name Worksheet name. Save() Save workbook to the File Path from where it was loaded. Declaration public WorkBook Save() Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. See Also FilePath Save(SavingOptions) Save workbook to the File Path from where it was loaded. Declaration public WorkBook Save(SavingOptions options) Parameters Type Name Description SavingOptions options Advanced file saving options. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. See Also FilePath SaveAs(String) Save workbook with the specified filename. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML Declaration public WorkBook SaveAs(string fileName) Parameters Type Name Description System.String fileName A file path to save the spreadsheet to. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. SaveAs(String, SavingOptions) Save workbook with the specified filename. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML Declaration public WorkBook SaveAs(string fileName, SavingOptions options) Parameters Type Name Description System.String fileName A file path to save the spreadsheet to. SavingOptions options Advanced file saving options. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. Exceptions Type Condition System.FormatException Unsupported file extension. Supported formats are: XLS, XLSX, CSV, TSV, JSON, XML SaveAs(String, String) Save workbook with the specified filename and encrypt it with a specified password Currently encryption only supported for \".xlsx\", \".xlsm\" and \".xltx\" formats Declaration public WorkBook SaveAs(string fileName, string password) Parameters Type Name Description System.String fileName A file path to save the spreadsheet to. System.String password Password (cannot be null) Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. SaveAsCsv(String, String) Exports the Excel file as CSV. Declaration public void SaveAsCsv(string filename, string delimiter = null) Parameters Type Name Description System.String filename The CSV file path. System.String delimiter The CSV column delimiter. Leave this null to use the system default. SaveAsJson(String) Exports the Excel file as JSON. Declaration public void SaveAsJson(string filename) Parameters Type Name Description System.String filename The JSON file path. SaveAsWithCustomDelimiter(String, String) Save workbook with the specified filename. Declaration public WorkBook SaveAsWithCustomDelimiter(string fileName, string listDelimiter = null) Parameters Type Name Description System.String fileName Name of the file. System.String listDelimiter The list delimiter. Returns Type Description WorkBook This WorkBook, allowing for a fluent, in-line coding style. SaveAsXml(String) Exports the Excel file as XML. Declaration public void SaveAsXml(string filename) Parameters Type Name Description System.String filename The XML file path. SetActiveTab(Int32) Set index (zero-based) of the active tab Declaration public void SetActiveTab(int index) Parameters Type Name Description System.Int32 index Index of the active tab. SetSheetPosition(String, Int32) Set new tab zero-indexed position within workbook for the specified worksheet. Declaration public void SetSheetPosition(string sheetName, int index) Parameters Type Name Description System.String sheetName Name of the sheet. System.Int32 index The index to insert at. ToBinary() Converts workbook to a binary representation. Declaration public byte[] ToBinary() Returns Type Description System.Byte [] A byte array of the excel file contents ToByteArray() Synonym of ToBinary() Declaration public byte[] ToByteArray() Returns Type Description System.Byte [] A byte array of the excel file contents ToDataSet(Boolean) Convert workbook to System.Data.DataSet where each worksheet represents System.Data.DataTable Declaration public DataSet ToDataSet(bool useFirstRowAsColumnNames = false) Parameters Type Name Description System.Boolean useFirstRowAsColumnNames if set to true [use first row as column names]. Returns Type Description System.Data.DataSet A System.Data.DataSet containing the entire WorkBook. ToStream() Converts workbook to a memory stream. Declaration public MemoryStream ToStream() Returns Type Description System.IO.MemoryStream A System.IO.MemoryStream of the excel file contents TryLoad(String, out WorkBook) Loads the specified workbook to its WorkBook instance and returns a value that indicates whether the load succeeded. Declaration public static bool TryLoad(string filename, out WorkBook workBook) Parameters Type Name Description System.String filename The path of the file to load. WorkBook workBook When this method returns, contains the WorkBook instance loaded from the filename , if the load succeeded, or null if the load failed. Returns Type Description System.Boolean true if workbook from the filename was loaded successfully; otherwise, false . TryLoad(String, out WorkBook, LoadingOptions) Loads the specified workbook to its WorkBook instance and returns a value that indicates whether the load succeeded. Declaration public static bool TryLoad(string filename, out WorkBook workBook, LoadingOptions options) Parameters Type Name Description System.String filename The path of the file to load. WorkBook workBook When this method returns, contains the WorkBook instance loaded from the filename , if the load succeeded, or null if the load failed. LoadingOptions options Advanced options when importing non Excel formats. Returns Type Description System.Boolean true if workbook from the filename was loaded successfully; otherwise, false . TryLoad(String, out WorkBook, String, ExcelFileFormat) Loads the specified workbook to its WorkBook instance and returns a value that indicates whether the load succeeded. Declaration public static bool TryLoad(string filename, out WorkBook workBook, string listDelimiter = null, ExcelFileFormat fileFormat) Parameters Type Name Description System.String filename The path of the file to load. WorkBook workBook When this method returns, contains the WorkBook instance loaded from the filename , if the load succeeded, or null if the load failed. System.String listDelimiter The list delimiter. ExcelFileFormat fileFormat The file format. Returns Type Description System.Boolean true if workbook from the filename was loaded successfully; otherwise, false . TryLoad(String, String, out WorkBook) Loads the specified workbook using provided password to its WorkBook instance and returns a value that indicates whether the load succeeded. Declaration public static bool TryLoad(string filename, string password, out WorkBook workBook) Parameters Type Name Description System.String filename The path of the file to load. System.String password Password (cannot be null) WorkBook workBook When this method returns, contains the WorkBook instance loaded from the filename , if the load succeeded, or null if the load failed. Returns Type Description System.Boolean true if workbook from the filename was loaded successfully; otherwise, false . TryLoadExcel(String, out WorkBook) Loads the specified workbook to its WorkBook instance and returns a value that indicates whether the load succeeded. Declaration public static bool TryLoadExcel(string filename, out WorkBook workBook) Parameters Type Name Description System.String filename The path of the file to load. WorkBook workBook When this method returns, contains the WorkBook instance loaded from the filename , if the load succeeded, or null if the load failed. Returns Type Description System.Boolean true if workbook from the filename was loaded successfully; otherwise, false . TryLoadExcel(String, String, out WorkBook) Loads the specified workbook using provided password to its WorkBook instance and returns a value that indicates whether the load succeeded. Declaration public static bool TryLoadExcel(string filename, string password, out WorkBook workBook) Parameters Type Name Description System.String filename The path of the file to load. System.String password Password (cannot be null) WorkBook workBook When this method returns, contains the WorkBook instance loaded from the filename , if the load succeeded, or null if the load failed. Returns Type Description System.Boolean true if workbook from the filename was loaded successfully; otherwise, false ."
  },
  "api/IronXL.WorkSheet.html": {
    "href": "api/IronXL.WorkSheet.html",
    "title": "Class WorkSheet | C# Excel API | IronXL",
    "keywords": "Class WorkSheet Class that stands for single sheet within Excel file. Inheritance System.Object Range WorkSheet Implements System.Collections.Generic.IEnumerable < Cell > System.Collections.IEnumerable Inherited Members Range.GetEnumerator() Range.Sum() Range.Max() Range.Min() Range.Avg() Range.AddRange(Range) Range.SubtractRange(Range) Range.SortAscending() Range.SortDescending() Range.SortByColumn(String, SortOrder) Range.SortByColumn(Int32, SortOrder) Range.Trim() Range.ToDataTable(Boolean) Range.SetCellValue(Int32, Int32, Object) Range.GetValue<TType>() Range.TryGetValue<TType>(TType) Range.ToString() Range.ClearContents() Range.Copy(WorkSheet, String) Range.Replace(String, String) Range.SaveAsNamedTable(String, Boolean, TableStyle) Range.SaveAsNamedRange(String, Boolean) Range.GetAllRows() Range.GetAllPhysicalRows() Range.GetRows(Boolean) Range.GetAllColumns() Range.GetAllPhysicalColumns() Range.GetColumns(Boolean) Range.Row(Int32) Range.Column(Int32) Range.RangeAddressAsString Range.IsEmpty Range.Value Range.FormatString Range.Formula Range.Rows Range.AllRowsInRange Range.Columns Range.AllColumnsInRange Range.Style Range.WorkBook Range.DateTimeValue Range.StringValue Range.BoolValue Range.IntValue Range.DoubleValue Range.DecimalValue Range.FloatValue Range.Int64Value Range.LongValue Range.Int32Value Namespace : IronXL Assembly : IronXL.dll Syntax public class WorkSheet : Range Properties Charts A list of charts contained within the sheet. Declaration public List<IChart> Charts { get; } Property Value Type Description System.Collections.Generic.List < IChart > ColumnCount The number of columns in the used range of this WorkSheet . If used range of this WorkSheet is, for exeample, B1:K1, then RowCount will return 10 Declaration public int ColumnCount { get; } Property Value Type Description System.Int32 ConditionalFormatting Gets the conditional formatting facet of the worksheet. Declaration public ISheetConditionalFormatting ConditionalFormatting { get; } Property Value Type Description ISheetConditionalFormatting DisplayGridlines Gets or sets a value indicating whether to display grid-lines. Declaration public bool DisplayGridlines { get; set; } Property Value Type Description System.Boolean true if the sheet displays grid-lines; otherwise, false . FilledCells Gets the collection of filled (physically existing) cells. Declaration public ICollection<Cell> FilledCells { get; } Property Value Type Description System.Collections.Generic.ICollection < Cell > FirstFilledCell Gets the first filled (physically existing) cell, returns null if the worksheet does not contain a filled (physically existing) cell. Declaration public Cell FirstFilledCell { get; } Property Value Type Description Cell FitToPage Flag indicating whether the Fit to Page print option is enabled. Declaration public bool FitToPage { get; set; } Property Value Type Description System.Boolean Footer Gets the print footer of the worksheet. Declaration public IFooter Footer { get; } Property Value Type Description IFooter The Footer . Header Gets the print header of the worksheet. Declaration public IHeader Header { get; } Property Value Type Description IHeader The Header . Hidden Indicates whether this worksheet visible, hidden or very hidden. Declaration public HiddenState Hidden { get; set; } Property Value Type Description HiddenState HorizontallyCenter Determine whether printed output for this sheet will be horizontally centered. Declaration public bool HorizontallyCenter { get; set; } Property Value Type Description System.Boolean Images A list of images contained within the sheet. Declaration public List<IImage> Images { get; } Property Value Type Description System.Collections.Generic.List < IImage > Index Gets the index of the worksheet within workbook. Declaration public int Index { get; } Property Value Type Description System.Int32 IsPrintGridlines Gets or sets a value indicating whether to display grid-lines when printing. Declaration public bool IsPrintGridlines { get; set; } Property Value Type Description System.Boolean true if this sheet displays print grid-lines; otherwise, false . Item[String] Indexer for getting range with specified range address. <para.>Range MyRange = workSheet[\"A12:B18\"]</para.> Declaration public Range this[string rangeAddress] { get; } Parameters Type Name Description System.String rangeAddress E.g. A12:B18 Property Value Type Description Range The Range . LastFilledCell Gets the last filled (physically existing) cell, returns null if the worksheet does not contain a filled (physically existing) cell. Declaration public Cell LastFilledCell { get; } Property Value Type Description Cell Name Worksheet name Declaration public string Name { get; set; } Property Value Type Description System.String PhysicalColumnCount The number of physical columns that contain cells or style information in them. If used range of this WorkSheet is, for exeample, B1:K1, but there is only one cell on it at address B1 and column K was hidden, then PhysicalColumnCount will return 2 Declaration public int PhysicalColumnCount { get; } Property Value Type Description System.Int32 PhysicalRowCount The number of physical rows that contain cells or style information in them. If used range of this WorkSheet is, for exeample, A11:A20, but there is only one cell on it at address A11 and row 20 was hidden, then PhysicalRowCount will return 2 Declaration public int PhysicalRowCount { get; } Property Value Type Description System.Int32 PrintSetup Gets the print setup object. Declaration public IPrintSetup PrintSetup { get; } Property Value Type Description IPrintSetup The PrintSetup for this WorkSheet. RowCount The number of rows in the used range of this WorkSheet . If used range of this WorkSheet is, for exeample, A11:A20, then RowCount will return 10 Declaration public int RowCount { get; } Property Value Type Description System.Int32 VerticallyCenter Determine whether printed output for this sheet will be vertically centered. Declaration public bool VerticallyCenter { get; set; } Property Value Type Description System.Boolean true if the sheet is vertically centered; otherwise, false . Methods AddNamedRange(String, Range, Boolean) Adds a new named range with specified range of cells. Declaration public void AddNamedRange(string nameOfRange, Range range, bool globalName = true) Parameters Type Name Description System.String nameOfRange The user-defined name. Range range The range to be referred by name. System.Boolean globalName Sets the range as global if set to true . Default value is true . AddNamedRange(String, String, Boolean) Adds a new named range with specified formula . Declaration public void AddNamedRange(string nameOfRange, string formula, bool globalName = true) Parameters Type Name Description System.String nameOfRange The user-defined name. System.String formula The formula to be referred by name. System.Boolean globalName Sets the range as global if set to true . Default value is true . AddNamedTable(String, Range, Boolean, TableStyle) Adds named table with the specified name at the data range. Declaration public void AddNamedTable(string tableName, Range range, bool showFilter = true, TableStyle tableStyle = null) Parameters Type Name Description System.String tableName the name of the table Range range the data range System.Boolean showFilter show filter on the header. Default value is true . TableStyle tableStyle table style properties Exceptions Type Condition System.NotSupportedException Only XLSX supports named tables. AutoSizeColumn(Int32) Changes width of the column to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeColumn(int columnIndex) Parameters Type Name Description System.Int32 columnIndex 0-based index of the column. Cannot be outside of the bounds set by 0 and ColumnCount -1 Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. AutoSizeColumn(Int32, Boolean) Changes width of the column to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeColumn(int columnIndex, bool useMergedCells) Parameters Type Name Description System.Int32 columnIndex 0-based index of the column. Cannot be outside of the bounds set by 0 and ColumnCount -1 System.Boolean useMergedCells If true, the width of merged cells will be taken into account. Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. AutoSizeRow(Int32) Changes height of the row to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeRow(int rowIndex) Parameters Type Name Description System.Int32 rowIndex 0-based index of the row. Cannot be outside of the bounds set by 0 and RowCount -1 Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. AutoSizeRow(Int32, Boolean) Changes height of the row to fit the content. NOTE: This method measures the text in the cell based on the font that is used for the cell. If the exact font is not found on the machine it will try to measure it with a defalt font. If the default could not be found, it will try to use any font available. Finally if there are no fonts found the exception will be thrown. Declaration public void AutoSizeRow(int rowIndex, bool useMergedCells) Parameters Type Name Description System.Int32 rowIndex 0-based index of the row. Cannot be outside of the bounds set by 0 and RowCount -1 System.Boolean useMergedCells If true, the height of merged cells will be considered. Exceptions Type Condition System.ArgumentException FontException Trown when no fonts found istalled on the machine. CopySheet(String) Duplicates this WorkSheet within the same excel WorkBook . Declaration public WorkSheet CopySheet(string name) Parameters Type Name Description System.String name The name of the new WorkSheet Returns Type Description WorkSheet This WorkSheet allowing for a fluent, in-line coding style. Exceptions Type Condition System.ArgumentException Duplicate sheet names are not allowed. CopyTo(WorkBook, String) Copies worksheet to another workbook with the specified name. Declaration public void CopyTo(WorkBook workBook, string name) Parameters Type Name Description WorkBook workBook The WorkBook where this worksheet will be copied to. System.String name The new name of the copied worksheet. Exceptions Type Condition System.ArgumentException Duplicate sheet names are not allowed. CreateChart(ChartType, Int32, Int32, Int32, Int32) Creates the chart of the specified type with the specified sizes. Integer parameters are 0-based row and column coordinates. E.g. if col1 equals 1, Excel column coordinate will equal \"B\" Declaration public IChart CreateChart(ChartType type, int row1, int col1, int row2, int col2) Parameters Type Name Description ChartType type The type of the chart. System.Int32 row1 The upper row coordinate. System.Int32 col1 The upper column coordinate System.Int32 row2 The lower row coordinate. System.Int32 col2 The lower column coordinate. Returns Type Description IChart Created chart object. Exceptions Type Condition System.Exception Charts for xls format are not currently supported. Try to use xlsx format as default. CreateChart(ChartType, Int32, String, Int32, String) Creates the chart of the specified type with the specified sizes. Integer parameters are 0-based row coordinates. E.g. if row1 equals 1, Excel row coordinate will equal 2 Declaration public IChart CreateChart(ChartType type, int row1, string col1, int row2, string col2) Parameters Type Name Description ChartType type The type of the chart. System.Int32 row1 The upper row coordinate. System.String col1 The left column coordinate, e.g. \"A\" System.Int32 row2 The lower row coordinate. System.String col2 The right column coordinate, e.g. \"C\". Returns Type Description IChart Created chart object. Exceptions Type Condition System.Exception Charts for xls format are not currently supported. Try to use xlsx format as default. CreateFreezePane(Int32, Int32) Creates a freeze pane. Any existing freeze pane or split pane is overwritten. All parameters are 0-based row and column coordinates. E.g. if colSplit equals 1, Excel column coordinate will equal \"B\" Declaration public void CreateFreezePane(int colSplit, int rowSplit) Parameters Type Name Description System.Int32 colSplit Horizontal position of split. System.Int32 rowSplit Vertical position of split. CreateFreezePane(Int32, Int32, Int32, Int32) Creates a freeze pane. Any existing freeze pane or split pane is overwritten. All parameters are 0-based row and column coordinates. E.g. if colSplit equals 1, Excel column coordinate will equal \"B\" Declaration public void CreateFreezePane(int colSplit, int rowSplit, int leftmostColumn, int topRow) Parameters Type Name Description System.Int32 colSplit Horizontal position of split. System.Int32 rowSplit Vertical position of split. System.Int32 leftmostColumn Top row visible in bottom pane System.Int32 topRow Left column visible in right pane. CreateSplitPane(Int32, Int32, Int32, Int32, PanePosition) Creates a split pane. Any existing freeze pane or split pane is overwritten. Integer parameters are 0-based row and column coordinates. E.g. if ySplitPos equals 1, Excel column coordinate will equal \"B\" Declaration public void CreateSplitPane(int xSplitPos, int ySplitPos, int leftmostColumn, int topRow, PanePosition activePane) Parameters Type Name Description System.Int32 xSplitPos Horizontal position of split in px. System.Int32 ySplitPos Vertical position of split in px. System.Int32 leftmostColumn Left column visible in right pane. System.Int32 topRow Top row visible in bottom pane. PanePosition activePane Active pane. FindNamedRange(String) Finds the named range with the specified name. Declaration public string FindNamedRange(string nameOfRange) Parameters Type Name Description System.String nameOfRange The user-defined name. Returns Type Description System.String The formula of the named range. GetCellAt(Int32, Int32) Returns the cell at a given row/column number within a worksheet. Useful for iterating a worksheet; Declaration public Cell GetCellAt(int rowIndex, int columnIndex) Parameters Type Name Description System.Int32 rowIndex Row index within this worksheet. The first row is numbered 0. System.Int32 columnIndex Column index within this worksheet. The first column is numbered 0. Returns Type Description Cell A Cell object. Use Value to get the value. null if cell is not filled. GetColumn(Int32) Returns the Column at columnIndex. The first column \"A\" is counted as 0; Synonym of Column(Int32) Declaration public RangeColumn GetColumn(int columnIndex) Parameters Type Name Description System.Int32 columnIndex The index (zero-based number) of the column to return Returns Type Description RangeColumn A Column within the WorkSheet. GetColumn(String) Returns a Column by name E.g. \"A\" or \"B\" Declaration public RangeColumn GetColumn(string columnName) Parameters Type Name Description System.String columnName Column heading letter. For Example \"A\" or \"B\" Returns Type Description RangeColumn A Column within the WorkSheet. GetNamedRanges() Gets names of the named ranges. Declaration public ICollection<string> GetNamedRanges() Returns Type Description System.Collections.Generic.ICollection < System.String > Collection for the names of the named ranges. GetNamedTableNames() Gets names of named tables. Declaration public ICollection<string> GetNamedTableNames() Returns Type Description System.Collections.Generic.ICollection < System.String > Exceptions Type Condition System.NotSupportedException Only XLSX supports named tables. GetRange(String) Get range with specified range address E.g. Range myRange = mySheet.GetRange(\"A1:C62\") Declaration public Range GetRange(string range) Parameters Type Name Description System.String range The range address within the sheet. E.g. \"B12:B29\" Returns Type Description Range The specified Range GetRow(Int32) Returns the Row at rowIndex. The first row is counted as 0; Synonym of Row(Int32) Declaration public RangeRow GetRow(int rowIndex) Parameters Type Name Description System.Int32 rowIndex The index (zero-based number) of the row to return Returns Type Description RangeRow A Row within the WorkSheet. GroupColumns(Int32, Int32) Group multiple columns within the specified range together. Grouping and ungrouping is layered and calling GroupColumns(Int32, Int32) twice requires two calls of UngroupColumns(Int32, Int32) with appropriate ranges to remove all groupings. All parameters are 0-based coordinates. E.g. if startColumn equals 2, Excel column coordinate will equal \"C\" Declaration public void GroupColumns(int startColumn, int endColumn) Parameters Type Name Description System.Int32 startColumn The start column index. System.Int32 endColumn The end column index. GroupColumns(String, String) Group multiple columns within the specified range together. Grouping and ungrouping is layered and calling GroupColumns(String, String) twice requires two calls of UngroupColumns(Int32, Int32) with appropriate ranges to remove all groupings. Declaration public void GroupColumns(string startColumn, string endColumn) Parameters Type Name Description System.String startColumn The start column value, e.g. \"A\". System.String endColumn The end column value, e.g. \"C\" GroupRows(Int32, Int32) Group multiple rows within the specified range together. Grouping and ungrouping is layered and calling GroupRows(Int32, Int32) twice requires two calls of UngroupRows(Int32, Int32) with appropriate ranges to remove all groupings. All parameters are 0-based coordinates. E.g. if startRow equals 2, Excel row coordinate will equal 3 Declaration public void GroupRows(int startRow, int endRow) Parameters Type Name Description System.Int32 startRow The start row index. System.Int32 endRow The end row index. InsertColumn(Int32) Inserts a new column into the worksheet at the specified position. Declaration public void InsertColumn(int columnIndex) Parameters Type Name Description System.Int32 columnIndex A zero-based index of the position where to insert a new column. InsertColumn(String) Inserts a column with the specified heading into the worksheet. Declaration public void InsertColumn(string columnLatter) Parameters Type Name Description System.String columnLatter The column heading latter of the first column to insert. e.g. \"A\" or \"B\" InsertColumns(Int32, Int32) Inserts multiple columns into the worksheet. Declaration public void InsertColumns(int columnIndex, int columnsCount = 1) Parameters Type Name Description System.Int32 columnIndex A zero-based index of the position where to insert a new column. System.Int32 columnsCount Specifies the number of columns to insert. Default value is 1 . InsertColumns(String, Int32) Inserts multiple columns into the worksheet. Declaration public void InsertColumns(string columnName, int columnsCount = 1) Parameters Type Name Description System.String columnName The column heading latter of the first column to insert. e.g. \"A\" or \"B\" System.Int32 columnsCount Specifies the number of columns to insert. Default value is 1 . InsertImage(Byte[], ImageFormat, Int32, Int32, Int32, Int32) Inserts image from the specified path to the worksheet. The size of the picture is defined by col/row coordinates. Integer parameters are 0-based row and column coordinates. E.g. if col1 equals 1, Excel column coordinate will equal \"B\" Declaration public IImage InsertImage(byte[] bytes, ImageFormat pictureType, int col1, int row1, int col2, int row2) Parameters Type Name Description System.Byte [] bytes The byte array of the image being imported ImageFormat pictureType The type of a picture contained in bytes . Supported types are listed in ImageFormat enumeration System.Int32 col1 The left column to place the image. System.Int32 row1 The top row to place the image. System.Int32 col2 The right column to place the image. System.Int32 row2 The bottom row to place the image. Returns Type Description IImage The inserted IronXL.Drawing.Images.Image object. InsertImage(String, Int32, Int32, Int32, Int32) Inserts image from the specified path to the worksheet. The size of the picture is defined by col/row coordinates. Integer parameters are 0-based row and column coordinates. E.g. if col1 equals 1, Excel column coordinate will equal \"B\" Declaration public IImage InsertImage(string path, int col1, int row1, int col2, int row2) Parameters Type Name Description System.String path The path to the image file. System.Int32 col1 The left column to place the image. System.Int32 row1 The top row to place the image. System.Int32 col2 The right column to place the image. System.Int32 row2 The bottom row to place the image. Returns Type Description IImage The inserted IronXL.Drawing.Images.Image object. Exceptions Type Condition System.ArgumentException Unsupported image format. Supported formats are: JPG/JPEG, BMP, PNG, GIF, TIFF InsertImage(String, String, Int32, String, Int32) Inserts image from the specified path to the worksheet. The size of the picture is defined by col/row coordinates. Integer parameters are 0-based row coordinates. E.g. if row1 equals 1, Excel row coordinate will equal 2 Declaration public IImage InsertImage(string path, string col1, int row1, string col2, int row2) Parameters Type Name Description System.String path The path to the image file. System.String col1 The left column to place the image, e.g. \"A\". System.Int32 row1 The top row to place the image. System.String col2 The right column to place the image, e.g. \"C\". System.Int32 row2 The bottom row to place the image. Returns Type Description IImage The inserted IronXL.Drawing.Images.Image object. Exceptions Type Condition System.ArgumentException Unsupported image format. Supported formats are: JPG/JPEG, BMP, PNG, GIF, TIFF InsertRow(Int32) Inserts a new row into the worksheet at the specified position. Declaration public void InsertRow(int rowIndex) Parameters Type Name Description System.Int32 rowIndex A zero-based index of the position where to insert a new row. InsertRows(Int32, Int32) Inserts multiple rows into the worksheet. Declaration public void InsertRows(int rowIndex, int rowsCount = 1) Parameters Type Name Description System.Int32 rowIndex A zero-based index of the position where to insert a new row. System.Int32 rowsCount Specifies the number of rows to insert. Default value is 1 . Merge(String) Merges the specified range into a single cell. Declaration public int Merge(string range) Parameters Type Name Description System.String range The Excel range selector as a string. E.g. \"B1:C1\" Returns Type Description System.Int32 Index of the created merged region. See Unmerge(Int32) . ProtectSheet(String) Protects the sheet. Declaration public void ProtectSheet(string password) Parameters Type Name Description System.String password The password. RemoveChart(IChart) Removes the specified chart. Declaration public void RemoveChart(IChart chart) Parameters Type Name Description IChart chart The chart to remove. RemoveColumnBreak(Int32) Removes a page break at the indicated column. Declaration public void RemoveColumnBreak(int column) Parameters Type Name Description System.Int32 column The column index. RemoveImage(Int32) Removes the image by its id. Id can be retrieved from the IImage object Declaration public void RemoveImage(int id) Parameters Type Name Description System.Int32 id The image id [identifier]. RemoveNamedRange(String) Removes the named range with the specified name. Declaration public void RemoveNamedRange(string nameOfRange) Parameters Type Name Description System.String nameOfRange The user-defined name. RemovePane() Removes the freeze or the split pane. Declaration public void RemovePane() RemoveRepeatingColumns() Reset repeating columns for the print title of the worksheet. Declaration public void RemoveRepeatingColumns() RemoveRepeatingRows() Reset repeating rows for the print title of the worksheet. Declaration public void RemoveRepeatingRows() RemoveRowBreak(Int32) Removes the page break at the indicated row. Declaration public void RemoveRowBreak(int row) Parameters Type Name Description System.Int32 row The row index. SaveAs(String) Exports the worksheet with as a new worksheet to: CSV, TSV, JSON, Excel or XML Declaration public WorkSheet SaveAs(string filename) Parameters Type Name Description System.String filename The new filename. Export format will be detected by the file extension specified. Returns Type Description WorkSheet This WorkSheet, allowing for an in-line fluent coding style. Exceptions Type Condition System.FormatException Unsupported extension. Supported formats for worksheet are: CSV, TSV, JSON, XML SaveAsCsv(String, String) Saves the worksheet into a new CSV file. Declaration public void SaveAsCsv(string filename, string delimiter = null) Parameters Type Name Description System.String filename The new CSV filename. System.String delimiter The CSV column delimiter. leave this null for default system behavior. SaveAsJson(String) Saves the worksheet into a new JSON file. Declaration public void SaveAsJson(string filename) Parameters Type Name Description System.String filename The new JSON filename. SaveAsNewExcelFile(String, ExcelFileFormat) Saves the worksheet into a new excel file on disk. Declaration public void SaveAsNewExcelFile(string filename, ExcelFileFormat excelFormat) Parameters Type Name Description System.String filename The new Excel filename. ExcelFileFormat excelFormat The Excel format. XLSX is preferred and default. SaveAsXml(String) Saves the worksheet into a new XML file. Declaration public void SaveAsXml(string filename) Parameters Type Name Description System.String filename The new XML filename. SetAutoFilter(Int32, Int32, Int32, Int32) Enable filtering for a range of cells defined with the row and column coordinates. e.g. if firstColumn equals 0, Excel column coordinate will equal \"A\" Declaration public void SetAutoFilter(int firstRow, int lastRow, int firstColumn, int lastColumn) Parameters Type Name Description System.Int32 firstRow First row of the range to filter. System.Int32 lastRow Last of the range to filter. System.Int32 firstColumn First column of the range to filter. System.Int32 lastColumn Last column of the range to filter. SetAutoFilter(String) Enable filtering for a range of cells. Declaration public void SetAutoFilter(string range) Parameters Type Name Description System.String range The range of cells to filter. SetColumnBreak(Int32) Sets the column break. Declaration public void SetColumnBreak(int column) Parameters Type Name Description System.Int32 column The column index. SetPrintArea(String) Sets the print area for this worksheet. E.g. \"A1:X82\" Declaration public void SetPrintArea(string range) Parameters Type Name Description System.String range The cell range to specify as the print area. E.g. \"A1:X82\" SetRepeatingColumns(Int32, Int32) Set repeating columns for the print title of the worksheet. All parameters are 0-based coordinates. E.g. if startColumn equals 2, Excel column coordinate will equal \"C\" Declaration public void SetRepeatingColumns(int startColumn, int endColumn) Parameters Type Name Description System.Int32 startColumn The start 0-based column index. System.Int32 endColumn The end 0-based column index. SetRepeatingColumns(String, String) Set repeating columns for the print title of the worksheet. Declaration public void SetRepeatingColumns(string startColumn, string endColumn) Parameters Type Name Description System.String startColumn The start column value, e.g. \"A\". System.String endColumn The end column value, e.g. \"C\". SetRepeatingRows(Int32, Int32) Set repeating rows for the print title of the worksheet. All parameters are 0-based coordinates. E.g. if startRow equals 1, Excel row coordinate will equal 2 Declaration public void SetRepeatingRows(int startRow, int endRow) Parameters Type Name Description System.Int32 startRow The start 0-based row index. System.Int32 endRow The end 0-based row index. SetRowBreak(Int32) Sets the row break. Declaration public void SetRowBreak(int row) Parameters Type Name Description System.Int32 row The row. SetZoom(Int32) Sets the zoom scale for this worksheet. 100 is normal zoom. Declaration public void SetZoom(int scale) Parameters Type Name Description System.Int32 scale The scale percentage. 100 is normal zoom. ToArray() Converts the worksheet to flattened array of cells. Declaration public Cell[] ToArray() Returns Type Description Cell [] An array of Cell objects. ToMultiDimensionalArray() Convert worksheet to two-dimensional array of cells Declaration public Cell[][] ToMultiDimensionalArray() Returns Type Description Cell [][] An 2 dimensional array of Cell objects. UngroupColumn(String, String) Ungroup all columns within the specified range. Grouping and ungrouping is layered and calling GroupColumns(String, String) twice requires two calls of UngroupColumns(Int32, Int32) with appropriate ranges to remove all groupings. Declaration public void UngroupColumn(string startColumn, string endColumn) Parameters Type Name Description System.String startColumn The start column value, e.g. \"A\". System.String endColumn The end column index, e.g. \"C\" UngroupColumns(Int32, Int32) Ungroup all columns within the specified range. Grouping and ungrouping is layered and calling GroupColumns(Int32, Int32) twice requires two calls of UngroupColumns(Int32, Int32) with appropriate ranges to remove all groupings. All parameters are 0-based coordinates. E.g. if startColumn equals 2, Excel column coordinate will equal \"C\" Declaration public void UngroupColumns(int startColumn, int endColumn) Parameters Type Name Description System.Int32 startColumn The start column index. System.Int32 endColumn The end column index. UngroupRows(Int32, Int32) Ungroup all rows within the specified range. Grouping and ungrouping is layered and calling GroupRows(Int32, Int32) twice requires two calls of UngroupRows(Int32, Int32) with appropriate ranges to remove all groupings. All parameters are 0-based coordinates. E.g. if startRow equals 2, Excel row coordinate will equal 3 Declaration public void UngroupRows(int startRow, int endRow) Parameters Type Name Description System.Int32 startRow The start row index. System.Int32 endRow The end row index. Unmerge(Int32) Un-Merges the specified merge region by index. To learn about indexes, see Merge(String) . Declaration public void Unmerge(int index) Parameters Type Name Description System.Int32 index The index. To learn about indexes see Merge(String) Unmerge(String) Un-Merges a specified range of cells. Declaration public void Unmerge(string range) Parameters Type Name Description System.String range The Excel range selector for the merged region as a string. E.g. \"B1:C1\" Exceptions Type Condition System.ArgumentException Merged region was not found. UnprotectSheet() Unprotects the sheet. Declaration public void UnprotectSheet() UnsetAutoFilter() Unset filtering for a current worksheet. Declaration public void UnsetAutoFilter() Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable Inherited members GetEnumerator() Sum() Max() Min() Avg() AddRange(Range) SubtractRange(Range) SortAscending() SortDescending() SortByColumn(String, SortOrder) SortByColumn(Int32, SortOrder) Trim() ToDataTable(Boolean) SetCellValue(Int32, Int32, Object) GetValue<TType>() TryGetValue<TType>(TType) ToString() ClearContents() Copy(WorkSheet, String) Replace(String, String) SaveAsNamedTable(String, Boolean, TableStyle) SaveAsNamedRange(String, Boolean) GetAllRows() GetAllPhysicalRows() GetRows(Boolean) GetAllColumns() GetAllPhysicalColumns() GetColumns(Boolean) Row(Int32) Column(Int32) RangeAddressAsString IsEmpty Value FormatString Formula Rows AllRowsInRange Columns AllColumnsInRange Style WorkBook DateTimeValue StringValue BoolValue IntValue DoubleValue DecimalValue FloatValue Int64Value LongValue Int32Value"
  },
  "api/IronXL.WorksheetsCollection.html": {
    "href": "api/IronXL.WorksheetsCollection.html",
    "title": "Class WorksheetsCollection | C# Excel API | IronXL",
    "keywords": "Class WorksheetsCollection Class for managing the collection of WorkSheet elements. Inheritance System.Object WorksheetsCollection Implements System.Collections.Generic.IList < WorkSheet > System.Collections.Generic.ICollection < WorkSheet > System.Collections.Generic.IEnumerable < WorkSheet > System.Collections.IEnumerable Namespace : IronXL Assembly : IronXL.dll Syntax public class WorksheetsCollection : Object Properties Count Gets the number of elements contained in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 The count of worksheets. IsReadOnly Gets a value indicating whether the collection is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Item[Int32] Gets or sets the WorkSheet at the specified index. Declaration public WorkSheet this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index. Property Value Type Description WorkSheet The WorkSheet . Methods Add(WorkSheet) Adds an object to the end of the collection. Declaration public void Add(WorkSheet item) Parameters Type Name Description WorkSheet item The object to be added to the end of the collection. Clear() Clears the list of worksheets. Declaration public void Clear() Contains(WorkSheet) Determines whether worksheets collection contains the element. Declaration public bool Contains(WorkSheet item) Parameters Type Name Description WorkSheet item The element to find. Returns Type Description System.Boolean true if contains the specified item otherwise, false . CopyTo(WorkSheet[], Int32) Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(WorkSheet[] array, int arrayIndex) Parameters Type Name Description WorkSheet [] array The destination of the elements copied from collection. The array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. Create(String) Create new worksheet with the specified name. Declaration public WorkSheet Create(string name) Parameters Type Name Description System.String name The name of the new worksheet. Returns Type Description WorkSheet A new WorkSheet within the workbook. FindIndex(Predicate<WorkSheet>) Searches for an element that matches the conditions defined by the specified predicate. Declaration public int FindIndex(Predicate<WorkSheet> predicate) Parameters Type Name Description System.Predicate < WorkSheet > predicate The predicate delegate that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the first occurrence of an element that matches the conditions defined by predicate , if found; otherwise, –1. GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<WorkSheet> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < WorkSheet > An enumerator that can be used to iterate through the collection. IndexOf(WorkSheet) Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection. Declaration public int IndexOf(WorkSheet item) Parameters Type Name Description WorkSheet item The object to locate in the collection. Returns Type Description System.Int32 The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, –1. Insert(Int32, WorkSheet) Inserts an element into the collection at the specified index. Declaration public void Insert(int index, WorkSheet item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. WorkSheet item The object to insert. Remove(WorkSheet) Removes the specified WorkSheet item. Declaration public bool Remove(WorkSheet item) Parameters Type Name Description WorkSheet item The item to remove. Returns Type Description System.Boolean true if item was successfully removed otherwise false . RemoveAt(Int32) Removes the element at the specified index of collection. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The zero-based index of the element to remove. SetSheetIndex(WorkSheet, Int32) Sets the order of appearance for a given sheet. Declaration public void SetSheetIndex(WorkSheet sheet, int index) Parameters Type Name Description WorkSheet sheet The sheet to reorder. System.Int32 index The index to insert into. Implements System.Collections.Generic.IList<> System.Collections.Generic.ICollection<> System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/SixLabors.Fonts.ColorFontSupport.html": {
    "href": "api/SixLabors.Fonts.ColorFontSupport.html",
    "title": "Class ColorFontSupport | C# Excel API | IronXL",
    "keywords": "Class ColorFontSupport Inheritance System.Object ColorFontSupport Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class ColorFontSupport : Enum Fields MicrosoftColrFormat Declaration public const ColorFontSupport MicrosoftColrFormat Field Value Type Description ColorFontSupport None Declaration public const ColorFontSupport None Field Value Type Description ColorFontSupport value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.Font.html": {
    "href": "api/SixLabors.Fonts.Font.html",
    "title": "Class Font | C# Excel API | IronXL",
    "keywords": "Class Font Inheritance System.Object Font Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class Font : Object Constructors Font(Font, FontStyle) Declaration public Font(Font prototype, FontStyle style) Parameters Type Name Description Font prototype FontStyle style Font(Font, Single) Declaration public Font(Font prototype, float size) Parameters Type Name Description Font prototype System.Single size Font(Font, Single, FontStyle) Declaration public Font(Font prototype, float size, FontStyle style) Parameters Type Name Description Font prototype System.Single size FontStyle style Font(FontFamily, Single) Declaration public Font(FontFamily family, float size) Parameters Type Name Description FontFamily family System.Single size Font(FontFamily, Single, FontStyle) Declaration public Font(FontFamily family, float size, FontStyle style) Parameters Type Name Description FontFamily family System.Single size FontStyle style Properties Family Declaration public FontFamily Family { get; } Property Value Type Description FontFamily FontMetrics Declaration public FontMetrics FontMetrics { get; } Property Value Type Description FontMetrics IsBold Declaration public bool IsBold { get; } Property Value Type Description System.Boolean IsItalic Declaration public bool IsItalic { get; } Property Value Type Description System.Boolean Name Declaration public string Name { get; } Property Value Type Description System.String Size Declaration public float Size { get; } Property Value Type Description System.Single Methods GetGlyphs(CodePoint, ColorFontSupport) Declaration public IEnumerable<Glyph> GetGlyphs(CodePoint codePoint, ColorFontSupport support) Parameters Type Name Description CodePoint codePoint ColorFontSupport support Returns Type Description System.Collections.Generic.IEnumerable < Glyph > GetGlyphs(CodePoint, TextAttributes, ColorFontSupport) Declaration public IEnumerable<Glyph> GetGlyphs(CodePoint codePoint, TextAttributes textAttributes, ColorFontSupport support) Parameters Type Name Description CodePoint codePoint TextAttributes textAttributes ColorFontSupport support Returns Type Description System.Collections.Generic.IEnumerable < Glyph > TryGetPath(out String) Declaration public bool TryGetPath(out string path) Parameters Type Name Description System.String path Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.FontCollection.html": {
    "href": "api/SixLabors.Fonts.FontCollection.html",
    "title": "Class FontCollection | C# Excel API | IronXL",
    "keywords": "Class FontCollection Inheritance System.Object FontCollection Implements IFontCollection IReadOnlyFontCollection Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class FontCollection : Object, IFontCollection, IReadOnlyFontCollection Constructors FontCollection() Declaration public FontCollection() Properties Families Declaration public IEnumerable<FontFamily> Families { get; } Property Value Type Description System.Collections.Generic.IEnumerable < FontFamily > Methods Add(Stream) Declaration public FontFamily Add(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description FontFamily Add(Stream, out FontDescription) Declaration public FontFamily Add(Stream stream, out FontDescription description) Parameters Type Name Description System.IO.Stream stream FontDescription description Returns Type Description FontFamily Add(Stream, CultureInfo) Declaration public FontFamily Add(Stream stream, CultureInfo culture) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture Returns Type Description FontFamily Add(Stream, CultureInfo, out FontDescription) Declaration public FontFamily Add(Stream stream, CultureInfo culture, out FontDescription description) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture FontDescription description Returns Type Description FontFamily Add(String) Declaration public FontFamily Add(string path) Parameters Type Name Description System.String path Returns Type Description FontFamily Add(String, out FontDescription) Declaration public FontFamily Add(string path, out FontDescription description) Parameters Type Name Description System.String path FontDescription description Returns Type Description FontFamily Add(String, CultureInfo) Declaration public FontFamily Add(string path, CultureInfo culture) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture Returns Type Description FontFamily Add(String, CultureInfo, out FontDescription) Declaration public FontFamily Add(string path, CultureInfo culture, out FontDescription description) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture FontDescription description Returns Type Description FontFamily AddCollection(Stream) Declaration public IEnumerable<FontFamily> AddCollection(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(Stream, out IEnumerable<FontDescription>) Declaration public IEnumerable<FontFamily> AddCollection(Stream stream, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.IO.Stream stream System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(Stream, CultureInfo) Declaration public IEnumerable<FontFamily> AddCollection(Stream stream, CultureInfo culture) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(Stream, CultureInfo, out IEnumerable<FontDescription>) Declaration public IEnumerable<FontFamily> AddCollection(Stream stream, CultureInfo culture, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String) Declaration public IEnumerable<FontFamily> AddCollection(string path) Parameters Type Name Description System.String path Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String, out IEnumerable<FontDescription>) Declaration public IEnumerable<FontFamily> AddCollection(string path, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.String path System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String, CultureInfo) Declaration public IEnumerable<FontFamily> AddCollection(string path, CultureInfo culture) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String, CultureInfo, out IEnumerable<FontDescription>) Declaration public IEnumerable<FontFamily> AddCollection(string path, CultureInfo culture, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > Get(String) Declaration public FontFamily Get(string name) Parameters Type Name Description System.String name Returns Type Description FontFamily Get(String, CultureInfo) Declaration public FontFamily Get(string name, CultureInfo culture) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture Returns Type Description FontFamily GetByCulture(CultureInfo) Declaration public IEnumerable<FontFamily> GetByCulture(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > TryGet(String, out FontFamily) Declaration public bool TryGet(string name, out FontFamily family) Parameters Type Name Description System.String name FontFamily family Returns Type Description System.Boolean TryGet(String, CultureInfo, out FontFamily) Declaration public bool TryGet(string name, CultureInfo culture, out FontFamily family) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture FontFamily family Returns Type Description System.Boolean Implements IFontCollection IReadOnlyFontCollection Extension Methods FontCollectionExtensions.AddSystemFonts(FontCollection) FontCollectionExtensions.AddSystemFonts(FontCollection, Predicate<FontMetrics>)"
  },
  "api/SixLabors.Fonts.FontCollectionExtensions.html": {
    "href": "api/SixLabors.Fonts.FontCollectionExtensions.html",
    "title": "Class FontCollectionExtensions | C# Excel API | IronXL",
    "keywords": "Class FontCollectionExtensions Inheritance System.Object FontCollectionExtensions Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public static class FontCollectionExtensions : Object Methods AddSystemFonts(FontCollection) Declaration public static FontCollection AddSystemFonts(this FontCollection collection) Parameters Type Name Description FontCollection collection Returns Type Description FontCollection AddSystemFonts(FontCollection, Predicate<FontMetrics>) Declaration public static FontCollection AddSystemFonts(this FontCollection collection, Predicate<FontMetrics> match) Parameters Type Name Description FontCollection collection System.Predicate < FontMetrics > match Returns Type Description FontCollection"
  },
  "api/SixLabors.Fonts.FontDescription.html": {
    "href": "api/SixLabors.Fonts.FontDescription.html",
    "title": "Class FontDescription | C# Excel API | IronXL",
    "keywords": "Class FontDescription Inheritance System.Object FontDescription Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class FontDescription : Object Properties FontFamilyInvariantCulture Declaration public string FontFamilyInvariantCulture { get; } Property Value Type Description System.String FontNameInvariantCulture Declaration public string FontNameInvariantCulture { get; } Property Value Type Description System.String FontSubFamilyNameInvariantCulture Declaration public string FontSubFamilyNameInvariantCulture { get; } Property Value Type Description System.String Style Declaration public FontStyle Style { get; } Property Value Type Description FontStyle Methods FontFamily(CultureInfo) Declaration public string FontFamily(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.String FontName(CultureInfo) Declaration public string FontName(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.String FontSubFamilyName(CultureInfo) Declaration public string FontSubFamilyName(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.String GetNameById(CultureInfo, KnownNameIds) Declaration public string GetNameById(CultureInfo culture, KnownNameIds nameId) Parameters Type Name Description System.Globalization.CultureInfo culture KnownNameIds nameId Returns Type Description System.String LoadDescription(Stream) Declaration public static FontDescription LoadDescription(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description FontDescription LoadDescription(String) Declaration public static FontDescription LoadDescription(string path) Parameters Type Name Description System.String path Returns Type Description FontDescription LoadFontCollectionDescriptions(Stream) Declaration public static FontDescription[] LoadFontCollectionDescriptions(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description FontDescription [] LoadFontCollectionDescriptions(String) Declaration public static FontDescription[] LoadFontCollectionDescriptions(string path) Parameters Type Name Description System.String path Returns Type Description FontDescription []"
  },
  "api/SixLabors.Fonts.FontException.html": {
    "href": "api/SixLabors.Fonts.FontException.html",
    "title": "Class FontException | C# Excel API | IronXL",
    "keywords": "Class FontException Inheritance System.Object FontException FontFamilyNotFoundException GlyphMissingException Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class FontException : Exception Constructors FontException(String) Declaration public FontException(string message) Parameters Type Name Description System.String message"
  },
  "api/SixLabors.Fonts.FontFamily.html": {
    "href": "api/SixLabors.Fonts.FontFamily.html",
    "title": "Class FontFamily | C# Excel API | IronXL",
    "keywords": "Class FontFamily Inheritance System.Object FontFamily Implements System.IEquatable < FontFamily > Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class FontFamily : ValueType Properties Culture Declaration public CultureInfo Culture { get; } Property Value Type Description System.Globalization.CultureInfo Name Declaration public string Name { get; } Property Value Type Description System.String Methods CreateFont(Single) Declaration public Font CreateFont(float size) Parameters Type Name Description System.Single size Returns Type Description Font CreateFont(Single, FontStyle) Declaration public Font CreateFont(float size, FontStyle style) Parameters Type Name Description System.Single size FontStyle style Returns Type Description Font Equals(FontFamily) Declaration public bool Equals(FontFamily other) Parameters Type Name Description FontFamily other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetAvailableStyles() Declaration public IEnumerable<FontStyle> GetAvailableStyles() Returns Type Description System.Collections.Generic.IEnumerable < FontStyle > GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 ToString() Declaration public override string ToString() Returns Type Description System.String TryGetPaths(out IEnumerable<String>) Declaration public bool TryGetPaths(out IEnumerable<string> paths) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > paths Returns Type Description System.Boolean Operators Equality(FontFamily, FontFamily) Declaration public static bool operator ==(FontFamily left, FontFamily right) Parameters Type Name Description FontFamily left FontFamily right Returns Type Description System.Boolean Inequality(FontFamily, FontFamily) Declaration public static bool operator !=(FontFamily left, FontFamily right) Parameters Type Name Description FontFamily left FontFamily right Returns Type Description System.Boolean Implements System.IEquatable<>"
  },
  "api/SixLabors.Fonts.FontFamilyNotFoundException.html": {
    "href": "api/SixLabors.Fonts.FontFamilyNotFoundException.html",
    "title": "Class FontFamilyNotFoundException | C# Excel API | IronXL",
    "keywords": "Class FontFamilyNotFoundException Inheritance System.Object FontException FontFamilyNotFoundException Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class FontFamilyNotFoundException : FontException Constructors FontFamilyNotFoundException(String) Declaration public FontFamilyNotFoundException(string family) Parameters Type Name Description System.String family FontFamilyNotFoundException(String, IReadOnlyCollection<String>) Declaration public FontFamilyNotFoundException(string family, IReadOnlyCollection<string> searchDirectories) Parameters Type Name Description System.String family System.Collections.Generic.IReadOnlyCollection < System.String > searchDirectories Properties FontFamily Declaration public string FontFamily { get; } Property Value Type Description System.String SearchDirectories Declaration public IReadOnlyCollection<string> SearchDirectories { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < System.String >"
  },
  "api/SixLabors.Fonts.FontMetrics.html": {
    "href": "api/SixLabors.Fonts.FontMetrics.html",
    "title": "Class FontMetrics | C# Excel API | IronXL",
    "keywords": "Class FontMetrics Inheritance System.Object FontMetrics Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public abstract class FontMetrics : Object Properties AdvanceHeightMax Declaration public abstract short AdvanceHeightMax { get; } Property Value Type Description System.Int16 AdvanceWidthMax Declaration public abstract short AdvanceWidthMax { get; } Property Value Type Description System.Int16 Ascender Declaration public abstract short Ascender { get; } Property Value Type Description System.Int16 Descender Declaration public abstract short Descender { get; } Property Value Type Description System.Int16 Description Declaration public abstract FontDescription Description { get; } Property Value Type Description FontDescription ItalicAngle Declaration public abstract float ItalicAngle { get; } Property Value Type Description System.Single LineGap Declaration public abstract short LineGap { get; } Property Value Type Description System.Int16 LineHeight Declaration public abstract short LineHeight { get; } Property Value Type Description System.Int16 ScaleFactor Declaration public abstract float ScaleFactor { get; } Property Value Type Description System.Single StrikeoutPosition Declaration public abstract short StrikeoutPosition { get; } Property Value Type Description System.Int16 StrikeoutSize Declaration public abstract short StrikeoutSize { get; } Property Value Type Description System.Int16 SubscriptXOffset Declaration public abstract short SubscriptXOffset { get; } Property Value Type Description System.Int16 SubscriptXSize Declaration public abstract short SubscriptXSize { get; } Property Value Type Description System.Int16 SubscriptYOffset Declaration public abstract short SubscriptYOffset { get; } Property Value Type Description System.Int16 SubscriptYSize Declaration public abstract short SubscriptYSize { get; } Property Value Type Description System.Int16 SuperscriptXOffset Declaration public abstract short SuperscriptXOffset { get; } Property Value Type Description System.Int16 SuperscriptXSize Declaration public abstract short SuperscriptXSize { get; } Property Value Type Description System.Int16 SuperscriptYOffset Declaration public abstract short SuperscriptYOffset { get; } Property Value Type Description System.Int16 SuperscriptYSize Declaration public abstract short SuperscriptYSize { get; } Property Value Type Description System.Int16 UnderlinePosition Declaration public abstract short UnderlinePosition { get; } Property Value Type Description System.Int16 UnderlineThickness Declaration public abstract short UnderlineThickness { get; } Property Value Type Description System.Int16 UnitsPerEm Declaration public abstract ushort UnitsPerEm { get; } Property Value Type Description System.UInt16 Methods GetGlyphMetrics(CodePoint, ColorFontSupport) Declaration public abstract IEnumerable<GlyphMetrics> GetGlyphMetrics(CodePoint codePoint, ColorFontSupport support) Parameters Type Name Description CodePoint codePoint ColorFontSupport support Returns Type Description System.Collections.Generic.IEnumerable < GlyphMetrics >"
  },
  "api/SixLabors.Fonts.FontRectangle.html": {
    "href": "api/SixLabors.Fonts.FontRectangle.html",
    "title": "Class FontRectangle | C# Excel API | IronXL",
    "keywords": "Class FontRectangle Inheritance System.Object FontRectangle Implements System.IEquatable < FontRectangle > Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class FontRectangle : ValueType Constructors FontRectangle(fkgnpb, fkgnpb) Declaration public FontRectangle(fkgnpb point, fkgnpb size) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb point Iron.Excel.Extensions.fkgnpb size FontRectangle(Single, Single, Single, Single) Declaration public FontRectangle(float x, float y, float width, float height) Parameters Type Name Description System.Single x System.Single y System.Single width System.Single height Fields Empty Declaration public static readonly FontRectangle Empty Field Value Type Description FontRectangle Properties Bottom Declaration public float Bottom { get; } Property Value Type Description System.Single Height Declaration public float Height { get; } Property Value Type Description System.Single Left Declaration public float Left { get; } Property Value Type Description System.Single Right Declaration public float Right { get; } Property Value Type Description System.Single Top Declaration public float Top { get; } Property Value Type Description System.Single Width Declaration public float Width { get; } Property Value Type Description System.Single X Declaration public float X { get; } Property Value Type Description System.Single Y Declaration public float Y { get; } Property Value Type Description System.Single Methods Center(FontRectangle) Declaration public static fkgnpb Center(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle Returns Type Description Iron.Excel.Extensions.fkgnpb Contains(fkgnpb) Declaration public bool Contains(fkgnpb point) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb point Returns Type Description System.Boolean Contains(FontRectangle) Declaration public bool Contains(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle Returns Type Description System.Boolean Contains(Single, Single) Declaration public bool Contains(float x, float y) Parameters Type Name Description System.Single x System.Single y Returns Type Description System.Boolean Deconstruct(out Single, out Single, out Single, out Single) Declaration public void Deconstruct(out float x, out float y, out float width, out float height) Parameters Type Name Description System.Single x System.Single y System.Single width System.Single height Equals(FontRectangle) Declaration public bool Equals(FontRectangle other) Parameters Type Name Description FontRectangle other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean FromLTRB(Single, Single, Single, Single) Declaration public static FontRectangle FromLTRB(float left, float top, float right, float bottom) Parameters Type Name Description System.Single left System.Single top System.Single right System.Single bottom Returns Type Description FontRectangle GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Inflate(fkgnpb) Declaration public FontRectangle Inflate(fkgnpb size) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb size Returns Type Description FontRectangle Inflate(FontRectangle, Single, Single) Declaration public static FontRectangle Inflate(FontRectangle rectangle, float x, float y) Parameters Type Name Description FontRectangle rectangle System.Single x System.Single y Returns Type Description FontRectangle Inflate(Single, Single) Declaration public FontRectangle Inflate(float width, float height) Parameters Type Name Description System.Single width System.Single height Returns Type Description FontRectangle Intersect(FontRectangle) Declaration public FontRectangle Intersect(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle Returns Type Description FontRectangle Intersect(FontRectangle, FontRectangle) Declaration public static FontRectangle Intersect(FontRectangle a, FontRectangle b) Parameters Type Name Description FontRectangle a FontRectangle b Returns Type Description FontRectangle IntersectsWith(FontRectangle) Declaration public bool IntersectsWith(FontRectangle rectangle) Parameters Type Name Description FontRectangle rectangle Returns Type Description System.Boolean Offset(fkgnpb) Declaration public FontRectangle Offset(fkgnpb point) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb point Returns Type Description FontRectangle Offset(Single, Single) Declaration public FontRectangle Offset(float dx, float dy) Parameters Type Name Description System.Single dx System.Single dy Returns Type Description FontRectangle ToString() Declaration public override string ToString() Returns Type Description System.String Transform(FontRectangle, fkgnox) Declaration public static FontRectangle Transform(FontRectangle rectangle, fkgnox matrix) Parameters Type Name Description FontRectangle rectangle Iron.Excel.Extensions.fkgnox matrix Returns Type Description FontRectangle Union(FontRectangle, FontRectangle) Declaration public static FontRectangle Union(FontRectangle a, FontRectangle b) Parameters Type Name Description FontRectangle a FontRectangle b Returns Type Description FontRectangle Operators Equality(FontRectangle, FontRectangle) Declaration public static bool operator ==(FontRectangle left, FontRectangle right) Parameters Type Name Description FontRectangle left FontRectangle right Returns Type Description System.Boolean Inequality(FontRectangle, FontRectangle) Declaration public static bool operator !=(FontRectangle left, FontRectangle right) Parameters Type Name Description FontRectangle left FontRectangle right Returns Type Description System.Boolean Implements System.IEquatable<>"
  },
  "api/SixLabors.Fonts.FontStyle.html": {
    "href": "api/SixLabors.Fonts.FontStyle.html",
    "title": "Class FontStyle | C# Excel API | IronXL",
    "keywords": "Class FontStyle Inheritance System.Object FontStyle Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class FontStyle : Enum Fields Bold Declaration public const FontStyle Bold Field Value Type Description FontStyle BoldItalic Declaration public const FontStyle BoldItalic Field Value Type Description FontStyle Italic Declaration public const FontStyle Italic Field Value Type Description FontStyle Regular Declaration public const FontStyle Regular Field Value Type Description FontStyle value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.Glyph.html": {
    "href": "api/SixLabors.Fonts.Glyph.html",
    "title": "Class Glyph | C# Excel API | IronXL",
    "keywords": "Class Glyph Inheritance System.Object Glyph Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class Glyph : ValueType Properties GlyphMetrics Declaration public GlyphMetrics GlyphMetrics { get; } Property Value Type Description GlyphMetrics Methods BoundingBox(fkgnpb, Single) Declaration public FontRectangle BoundingBox(fkgnpb location, float dpi) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb location System.Single dpi Returns Type Description FontRectangle"
  },
  "api/SixLabors.Fonts.GlyphBounds.html": {
    "href": "api/SixLabors.Fonts.GlyphBounds.html",
    "title": "Class GlyphBounds | C# Excel API | IronXL",
    "keywords": "Class GlyphBounds Inheritance System.Object GlyphBounds Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class GlyphBounds : ValueType Constructors GlyphBounds(CodePoint, FontRectangle) Declaration public GlyphBounds(CodePoint codePoint, FontRectangle bounds) Parameters Type Name Description CodePoint codePoint FontRectangle bounds Properties Bounds Declaration public FontRectangle Bounds { get; } Property Value Type Description FontRectangle Codepoint Declaration public CodePoint Codepoint { get; } Property Value Type Description CodePoint Methods ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/SixLabors.Fonts.GlyphColor.html": {
    "href": "api/SixLabors.Fonts.GlyphColor.html",
    "title": "Class GlyphColor | C# Excel API | IronXL",
    "keywords": "Class GlyphColor Inheritance System.Object GlyphColor Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class GlyphColor : ValueType Properties Alpha Declaration public byte Alpha { get; } Property Value Type Description System.Byte Blue Declaration public byte Blue { get; } Property Value Type Description System.Byte Green Declaration public byte Green { get; } Property Value Type Description System.Byte Red Declaration public byte Red { get; } Property Value Type Description System.Byte Methods Equals(GlyphColor) Declaration public bool Equals(GlyphColor other) Parameters Type Name Description GlyphColor other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators Equality(GlyphColor, GlyphColor) Declaration public static bool operator ==(GlyphColor left, GlyphColor right) Parameters Type Name Description GlyphColor left GlyphColor right Returns Type Description System.Boolean Inequality(GlyphColor, GlyphColor) Declaration public static bool operator !=(GlyphColor left, GlyphColor right) Parameters Type Name Description GlyphColor left GlyphColor right Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.GlyphMetrics.html": {
    "href": "api/SixLabors.Fonts.GlyphMetrics.html",
    "title": "Class GlyphMetrics | C# Excel API | IronXL",
    "keywords": "Class GlyphMetrics Inheritance System.Object GlyphMetrics TrueTypeGlyphMetrics Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public abstract class GlyphMetrics : Object Properties AdvanceHeight Declaration public ushort AdvanceHeight { get; } Property Value Type Description System.UInt16 AdvanceWidth Declaration public ushort AdvanceWidth { get; } Property Value Type Description System.UInt16 BottomSideBearing Declaration public short BottomSideBearing { get; } Property Value Type Description System.Int16 CodePoint Declaration public CodePoint CodePoint { get; } Property Value Type Description CodePoint GlyphColor Declaration public Nullable<GlyphColor> GlyphColor { get; } Property Value Type Description System.Nullable < GlyphColor > GlyphType Declaration public GlyphType GlyphType { get; } Property Value Type Description GlyphType Height Declaration public float Height { get; } Property Value Type Description System.Single LeftSideBearing Declaration public short LeftSideBearing { get; } Property Value Type Description System.Int16 RightSideBearing Declaration public short RightSideBearing { get; } Property Value Type Description System.Int16 ScaleFactor Declaration public fkgnpb ScaleFactor { get; protected set; } Property Value Type Description Iron.Excel.Extensions.fkgnpb TopSideBearing Declaration public short TopSideBearing { get; } Property Value Type Description System.Int16 UnitsPerEm Declaration public ushort UnitsPerEm { get; } Property Value Type Description System.UInt16 Width Declaration public float Width { get; } Property Value Type Description System.Single"
  },
  "api/SixLabors.Fonts.GlyphMissingException.html": {
    "href": "api/SixLabors.Fonts.GlyphMissingException.html",
    "title": "Class GlyphMissingException | C# Excel API | IronXL",
    "keywords": "Class GlyphMissingException Inheritance System.Object FontException GlyphMissingException Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class GlyphMissingException : FontException Constructors GlyphMissingException(CodePoint) Declaration public GlyphMissingException(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint"
  },
  "api/SixLabors.Fonts.GlyphRendererParameters.html": {
    "href": "api/SixLabors.Fonts.GlyphRendererParameters.html",
    "title": "Class GlyphRendererParameters | C# Excel API | IronXL",
    "keywords": "Class GlyphRendererParameters Inheritance System.Object GlyphRendererParameters Implements System.IEquatable < GlyphRendererParameters > Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class GlyphRendererParameters : ValueType Properties CodePoint Declaration public CodePoint CodePoint { get; } Property Value Type Description CodePoint Dpi Declaration public float Dpi { get; } Property Value Type Description System.Single Font Declaration public string Font { get; } Property Value Type Description System.String FontStyle Declaration public FontStyle FontStyle { get; } Property Value Type Description FontStyle GlyphColor Declaration public GlyphColor GlyphColor { get; } Property Value Type Description GlyphColor GlyphIndex Declaration public ushort GlyphIndex { get; } Property Value Type Description System.UInt16 GlyphType Declaration public GlyphType GlyphType { get; } Property Value Type Description GlyphType PointSize Declaration public float PointSize { get; } Property Value Type Description System.Single TextRun Declaration public TextRun TextRun { get; } Property Value Type Description TextRun Methods Equals(GlyphRendererParameters) Declaration public bool Equals(GlyphRendererParameters other) Parameters Type Name Description GlyphRendererParameters other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators Equality(GlyphRendererParameters, GlyphRendererParameters) Declaration public static bool operator ==(GlyphRendererParameters left, GlyphRendererParameters right) Parameters Type Name Description GlyphRendererParameters left GlyphRendererParameters right Returns Type Description System.Boolean Inequality(GlyphRendererParameters, GlyphRendererParameters) Declaration public static bool operator !=(GlyphRendererParameters left, GlyphRendererParameters right) Parameters Type Name Description GlyphRendererParameters left GlyphRendererParameters right Returns Type Description System.Boolean Implements System.IEquatable<>"
  },
  "api/SixLabors.Fonts.GlyphType.html": {
    "href": "api/SixLabors.Fonts.GlyphType.html",
    "title": "Class GlyphType | C# Excel API | IronXL",
    "keywords": "Class GlyphType Inheritance System.Object GlyphType Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class GlyphType : Enum Fields ColrLayer Declaration public const GlyphType ColrLayer Field Value Type Description GlyphType Fallback Declaration public const GlyphType Fallback Field Value Type Description GlyphType Standard Declaration public const GlyphType Standard Field Value Type Description GlyphType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.HintingMode.html": {
    "href": "api/SixLabors.Fonts.HintingMode.html",
    "title": "Class HintingMode | C# Excel API | IronXL",
    "keywords": "Class HintingMode Inheritance System.Object HintingMode Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class HintingMode : Enum Fields None Declaration public const HintingMode None Field Value Type Description HintingMode Standard Declaration public const HintingMode Standard Field Value Type Description HintingMode value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.HorizontalAlignment.html": {
    "href": "api/SixLabors.Fonts.HorizontalAlignment.html",
    "title": "Class HorizontalAlignment | C# Excel API | IronXL",
    "keywords": "Class HorizontalAlignment Inheritance System.Object HorizontalAlignment Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class HorizontalAlignment : Enum Fields Center Declaration public const HorizontalAlignment Center Field Value Type Description HorizontalAlignment Left Declaration public const HorizontalAlignment Left Field Value Type Description HorizontalAlignment Right Declaration public const HorizontalAlignment Right Field Value Type Description HorizontalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.html": {
    "href": "api/SixLabors.Fonts.html",
    "title": "Namespace SixLabors.Fonts | C# Excel API | IronXL",
    "keywords": "Namespace SixLabors.Fonts Classes ColorFontSupport Font FontCollection FontCollectionExtensions FontDescription FontException FontFamily FontFamilyNotFoundException FontMetrics FontRectangle FontStyle Glyph GlyphBounds GlyphColor GlyphMetrics GlyphMissingException GlyphRendererParameters GlyphType HintingMode HorizontalAlignment IGlyphRendererExtensions InvalidFontFileException InvalidFontTableException KerningMode LayoutMode MissingFontTableException SystemFonts TextAlignment TextAttributes TextDecorations TextDirection TextJustification TextMeasurer TextOptions TextRenderer TextRun VerticalAlignment WordBreaking Interfaces IColorGlyphRenderer IFontCollection IGlyphDecorationRenderer IGlyphRenderer IReadOnlyFontCollection IReadOnlySystemFontCollection"
  },
  "api/SixLabors.Fonts.IColorGlyphRenderer.html": {
    "href": "api/SixLabors.Fonts.IColorGlyphRenderer.html",
    "title": "Interface IColorGlyphRenderer | C# Excel API | IronXL",
    "keywords": "Interface IColorGlyphRenderer Inherited Members IGlyphRenderer.BeginFigure() IGlyphRenderer.MoveTo(fkgnpb) IGlyphRenderer.QuadraticBezierTo(fkgnpb, fkgnpb) IGlyphRenderer.CubicBezierTo(fkgnpb, fkgnpb, fkgnpb) IGlyphRenderer.LineTo(fkgnpb) IGlyphRenderer.EndFigure() IGlyphRenderer.EndGlyph() IGlyphRenderer.BeginGlyph(FontRectangle, GlyphRendererParameters) IGlyphRenderer.EndText() IGlyphRenderer.BeginText(FontRectangle) Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public interface IColorGlyphRenderer : IGlyphRenderer Methods SetColor(GlyphColor) Declaration void SetColor(GlyphColor color) Parameters Type Name Description GlyphColor color Extension Methods IGlyphRendererExtensions.Render(IGlyphRenderer, fkgnnf<Char>, TextOptions) Inherited members BeginFigure() MoveTo(fkgnpb) QuadraticBezierTo(fkgnpb, fkgnpb) CubicBezierTo(fkgnpb, fkgnpb, fkgnpb) LineTo(fkgnpb) EndFigure() EndGlyph() BeginGlyph(FontRectangle, GlyphRendererParameters) EndText() BeginText(FontRectangle)"
  },
  "api/SixLabors.Fonts.IFontCollection.html": {
    "href": "api/SixLabors.Fonts.IFontCollection.html",
    "title": "Interface IFontCollection | C# Excel API | IronXL",
    "keywords": "Interface IFontCollection Inherited Members IReadOnlyFontCollection.Get(String) IReadOnlyFontCollection.TryGet(String, FontFamily) IReadOnlyFontCollection.GetByCulture(CultureInfo) IReadOnlyFontCollection.Get(String, CultureInfo) IReadOnlyFontCollection.TryGet(String, CultureInfo, FontFamily) IReadOnlyFontCollection.Families Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public interface IFontCollection : IReadOnlyFontCollection Methods Add(Stream) Declaration FontFamily Add(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description FontFamily Add(Stream, out FontDescription) Declaration FontFamily Add(Stream stream, out FontDescription description) Parameters Type Name Description System.IO.Stream stream FontDescription description Returns Type Description FontFamily Add(Stream, CultureInfo) Declaration FontFamily Add(Stream stream, CultureInfo culture) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture Returns Type Description FontFamily Add(Stream, CultureInfo, out FontDescription) Declaration FontFamily Add(Stream stream, CultureInfo culture, out FontDescription description) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture FontDescription description Returns Type Description FontFamily Add(String) Declaration FontFamily Add(string path) Parameters Type Name Description System.String path Returns Type Description FontFamily Add(String, out FontDescription) Declaration FontFamily Add(string path, out FontDescription description) Parameters Type Name Description System.String path FontDescription description Returns Type Description FontFamily Add(String, CultureInfo) Declaration FontFamily Add(string path, CultureInfo culture) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture Returns Type Description FontFamily Add(String, CultureInfo, out FontDescription) Declaration FontFamily Add(string path, CultureInfo culture, out FontDescription description) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture FontDescription description Returns Type Description FontFamily AddCollection(Stream) Declaration IEnumerable<FontFamily> AddCollection(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(Stream, out IEnumerable<FontDescription>) Declaration IEnumerable<FontFamily> AddCollection(Stream stream, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.IO.Stream stream System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(Stream, CultureInfo) Declaration IEnumerable<FontFamily> AddCollection(Stream stream, CultureInfo culture) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(Stream, CultureInfo, out IEnumerable<FontDescription>) Declaration IEnumerable<FontFamily> AddCollection(Stream stream, CultureInfo culture, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.IO.Stream stream System.Globalization.CultureInfo culture System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String) Declaration IEnumerable<FontFamily> AddCollection(string path) Parameters Type Name Description System.String path Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String, out IEnumerable<FontDescription>) Declaration IEnumerable<FontFamily> AddCollection(string path, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.String path System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String, CultureInfo) Declaration IEnumerable<FontFamily> AddCollection(string path, CultureInfo culture) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > AddCollection(String, CultureInfo, out IEnumerable<FontDescription>) Declaration IEnumerable<FontFamily> AddCollection(string path, CultureInfo culture, out IEnumerable<FontDescription> descriptions) Parameters Type Name Description System.String path System.Globalization.CultureInfo culture System.Collections.Generic.IEnumerable < FontDescription > descriptions Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > Inherited members Get(String) TryGet(String, FontFamily) GetByCulture(CultureInfo) Get(String, CultureInfo) TryGet(String, CultureInfo, FontFamily) Families"
  },
  "api/SixLabors.Fonts.IGlyphDecorationRenderer.html": {
    "href": "api/SixLabors.Fonts.IGlyphDecorationRenderer.html",
    "title": "Interface IGlyphDecorationRenderer | C# Excel API | IronXL",
    "keywords": "Interface IGlyphDecorationRenderer Inherited Members IGlyphRenderer.BeginFigure() IGlyphRenderer.MoveTo(fkgnpb) IGlyphRenderer.QuadraticBezierTo(fkgnpb, fkgnpb) IGlyphRenderer.CubicBezierTo(fkgnpb, fkgnpb, fkgnpb) IGlyphRenderer.LineTo(fkgnpb) IGlyphRenderer.EndFigure() IGlyphRenderer.EndGlyph() IGlyphRenderer.BeginGlyph(FontRectangle, GlyphRendererParameters) IGlyphRenderer.EndText() IGlyphRenderer.BeginText(FontRectangle) Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public interface IGlyphDecorationRenderer : IGlyphRenderer Methods EnabledDecorations() Declaration TextDecorations EnabledDecorations() Returns Type Description TextDecorations SetDecoration(TextDecorations, fkgnpb, fkgnpb, Single) Declaration void SetDecoration(TextDecorations textDecorations, fkgnpb start, fkgnpb end, float thickness) Parameters Type Name Description TextDecorations textDecorations Iron.Excel.Extensions.fkgnpb start Iron.Excel.Extensions.fkgnpb end System.Single thickness Extension Methods IGlyphRendererExtensions.Render(IGlyphRenderer, fkgnnf<Char>, TextOptions) Inherited members BeginFigure() MoveTo(fkgnpb) QuadraticBezierTo(fkgnpb, fkgnpb) CubicBezierTo(fkgnpb, fkgnpb, fkgnpb) LineTo(fkgnpb) EndFigure() EndGlyph() BeginGlyph(FontRectangle, GlyphRendererParameters) EndText() BeginText(FontRectangle)"
  },
  "api/SixLabors.Fonts.IGlyphRenderer.html": {
    "href": "api/SixLabors.Fonts.IGlyphRenderer.html",
    "title": "Interface IGlyphRenderer | C# Excel API | IronXL",
    "keywords": "Interface IGlyphRenderer Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public interface IGlyphRenderer Methods BeginFigure() Declaration void BeginFigure() BeginGlyph(FontRectangle, GlyphRendererParameters) Declaration bool BeginGlyph(FontRectangle bounds, GlyphRendererParameters parameters) Parameters Type Name Description FontRectangle bounds GlyphRendererParameters parameters Returns Type Description System.Boolean BeginText(FontRectangle) Declaration void BeginText(FontRectangle bounds) Parameters Type Name Description FontRectangle bounds CubicBezierTo(fkgnpb, fkgnpb, fkgnpb) Declaration void CubicBezierTo(fkgnpb secondControlPoint, fkgnpb thirdControlPoint, fkgnpb point) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb secondControlPoint Iron.Excel.Extensions.fkgnpb thirdControlPoint Iron.Excel.Extensions.fkgnpb point EndFigure() Declaration void EndFigure() EndGlyph() Declaration void EndGlyph() EndText() Declaration void EndText() LineTo(fkgnpb) Declaration void LineTo(fkgnpb point) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb point MoveTo(fkgnpb) Declaration void MoveTo(fkgnpb point) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb point QuadraticBezierTo(fkgnpb, fkgnpb) Declaration void QuadraticBezierTo(fkgnpb secondControlPoint, fkgnpb point) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb secondControlPoint Iron.Excel.Extensions.fkgnpb point Extension Methods IGlyphRendererExtensions.Render(IGlyphRenderer, fkgnnf<Char>, TextOptions)"
  },
  "api/SixLabors.Fonts.IGlyphRendererExtensions.html": {
    "href": "api/SixLabors.Fonts.IGlyphRendererExtensions.html",
    "title": "Class IGlyphRendererExtensions | C# Excel API | IronXL",
    "keywords": "Class IGlyphRendererExtensions Inheritance System.Object IGlyphRendererExtensions Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public static class IGlyphRendererExtensions : Object Methods Render(IGlyphRenderer, fkgnnf<Char>, TextOptions) Declaration public static IGlyphRenderer Render(this IGlyphRenderer renderer, fkgnnf<char> text, TextOptions options) Parameters Type Name Description IGlyphRenderer renderer Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options Returns Type Description IGlyphRenderer"
  },
  "api/SixLabors.Fonts.InvalidFontFileException.html": {
    "href": "api/SixLabors.Fonts.InvalidFontFileException.html",
    "title": "Class InvalidFontFileException | C# Excel API | IronXL",
    "keywords": "Class InvalidFontFileException Inheritance System.Object InvalidFontFileException InvalidFontTableException MissingFontTableException Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class InvalidFontFileException : Exception Constructors InvalidFontFileException(String) Declaration public InvalidFontFileException(string message) Parameters Type Name Description System.String message"
  },
  "api/SixLabors.Fonts.InvalidFontTableException.html": {
    "href": "api/SixLabors.Fonts.InvalidFontTableException.html",
    "title": "Class InvalidFontTableException | C# Excel API | IronXL",
    "keywords": "Class InvalidFontTableException Inheritance System.Object InvalidFontFileException InvalidFontTableException Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class InvalidFontTableException : InvalidFontFileException Constructors InvalidFontTableException(String, String) Declaration public InvalidFontTableException(string message, string table) Parameters Type Name Description System.String message System.String table Properties Table Declaration public string Table { get; } Property Value Type Description System.String"
  },
  "api/SixLabors.Fonts.IReadOnlyFontCollection.html": {
    "href": "api/SixLabors.Fonts.IReadOnlyFontCollection.html",
    "title": "Interface IReadOnlyFontCollection | C# Excel API | IronXL",
    "keywords": "Interface IReadOnlyFontCollection Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public interface IReadOnlyFontCollection Properties Families Declaration IEnumerable<FontFamily> Families { get; } Property Value Type Description System.Collections.Generic.IEnumerable < FontFamily > Methods Get(String) Declaration FontFamily Get(string name) Parameters Type Name Description System.String name Returns Type Description FontFamily Get(String, CultureInfo) Declaration FontFamily Get(string name, CultureInfo culture) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture Returns Type Description FontFamily GetByCulture(CultureInfo) Declaration IEnumerable<FontFamily> GetByCulture(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > TryGet(String, out FontFamily) Declaration bool TryGet(string name, out FontFamily family) Parameters Type Name Description System.String name FontFamily family Returns Type Description System.Boolean TryGet(String, CultureInfo, out FontFamily) Declaration bool TryGet(string name, CultureInfo culture, out FontFamily family) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture FontFamily family Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.IReadOnlySystemFontCollection.html": {
    "href": "api/SixLabors.Fonts.IReadOnlySystemFontCollection.html",
    "title": "Interface IReadOnlySystemFontCollection | C# Excel API | IronXL",
    "keywords": "Interface IReadOnlySystemFontCollection Inherited Members IReadOnlyFontCollection.Get(String) IReadOnlyFontCollection.TryGet(String, FontFamily) IReadOnlyFontCollection.GetByCulture(CultureInfo) IReadOnlyFontCollection.Get(String, CultureInfo) IReadOnlyFontCollection.TryGet(String, CultureInfo, FontFamily) IReadOnlyFontCollection.Families Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public interface IReadOnlySystemFontCollection : IReadOnlyFontCollection Properties SearchDirectories Declaration IEnumerable<string> SearchDirectories { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Inherited members Get(String) TryGet(String, FontFamily) GetByCulture(CultureInfo) Get(String, CultureInfo) TryGet(String, CultureInfo, FontFamily) Families"
  },
  "api/SixLabors.Fonts.KerningMode.html": {
    "href": "api/SixLabors.Fonts.KerningMode.html",
    "title": "Class KerningMode | C# Excel API | IronXL",
    "keywords": "Class KerningMode Inheritance System.Object KerningMode Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class KerningMode : Enum Fields Auto Declaration public const KerningMode Auto Field Value Type Description KerningMode None Declaration public const KerningMode None Field Value Type Description KerningMode Standard Declaration public const KerningMode Standard Field Value Type Description KerningMode value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.LayoutMode.html": {
    "href": "api/SixLabors.Fonts.LayoutMode.html",
    "title": "Class LayoutMode | C# Excel API | IronXL",
    "keywords": "Class LayoutMode Inheritance System.Object LayoutMode Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class LayoutMode : Enum Fields HorizontalBottomTop Declaration public const LayoutMode HorizontalBottomTop Field Value Type Description LayoutMode HorizontalTopBottom Declaration public const LayoutMode HorizontalTopBottom Field Value Type Description LayoutMode value__ Declaration public int value__ Field Value Type Description System.Int32 VerticalLeftRight Declaration public const LayoutMode VerticalLeftRight Field Value Type Description LayoutMode VerticalRightLeft Declaration public const LayoutMode VerticalRightLeft Field Value Type Description LayoutMode"
  },
  "api/SixLabors.Fonts.MissingFontTableException.html": {
    "href": "api/SixLabors.Fonts.MissingFontTableException.html",
    "title": "Class MissingFontTableException | C# Excel API | IronXL",
    "keywords": "Class MissingFontTableException Inheritance System.Object InvalidFontFileException MissingFontTableException Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class MissingFontTableException : InvalidFontFileException Constructors MissingFontTableException(String, String) Declaration public MissingFontTableException(string message, string table) Parameters Type Name Description System.String message System.String table Properties Table Declaration public string Table { get; } Property Value Type Description System.String"
  },
  "api/SixLabors.Fonts.SystemFonts.html": {
    "href": "api/SixLabors.Fonts.SystemFonts.html",
    "title": "Class SystemFonts | C# Excel API | IronXL",
    "keywords": "Class SystemFonts Inheritance System.Object SystemFonts Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public static class SystemFonts : Object Properties Collection Declaration public static IReadOnlySystemFontCollection Collection { get; } Property Value Type Description IReadOnlySystemFontCollection Families Declaration public static IEnumerable<FontFamily> Families { get; } Property Value Type Description System.Collections.Generic.IEnumerable < FontFamily > Methods CreateFont(String, CultureInfo, Single) Declaration public static Font CreateFont(string name, CultureInfo culture, float size) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture System.Single size Returns Type Description Font CreateFont(String, CultureInfo, Single, FontStyle) Declaration public static Font CreateFont(string name, CultureInfo culture, float size, FontStyle style) Parameters Type Name Description System.String name System.Globalization.CultureInfo culture System.Single size FontStyle style Returns Type Description Font CreateFont(String, Single) Declaration public static Font CreateFont(string name, float size) Parameters Type Name Description System.String name System.Single size Returns Type Description Font CreateFont(String, Single, FontStyle) Declaration public static Font CreateFont(string name, float size, FontStyle style) Parameters Type Name Description System.String name System.Single size FontStyle style Returns Type Description Font Get(String) Declaration public static FontFamily Get(string name) Parameters Type Name Description System.String name Returns Type Description FontFamily Get(String, CultureInfo) Declaration public static FontFamily Get(string fontFamily, CultureInfo culture) Parameters Type Name Description System.String fontFamily System.Globalization.CultureInfo culture Returns Type Description FontFamily GetByCulture(CultureInfo) Declaration public static IEnumerable<FontFamily> GetByCulture(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.Collections.Generic.IEnumerable < FontFamily > TryGet(String, out FontFamily) Declaration public static bool TryGet(string fontFamily, out FontFamily family) Parameters Type Name Description System.String fontFamily FontFamily family Returns Type Description System.Boolean TryGet(String, CultureInfo, out FontFamily) Declaration public static bool TryGet(string fontFamily, CultureInfo culture, out FontFamily family) Parameters Type Name Description System.String fontFamily System.Globalization.CultureInfo culture FontFamily family Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.html": {
    "href": "api/SixLabors.Fonts.Tables.AdvancedTypographic.FeatureTags.html",
    "title": "Class FeatureTags | C# Excel API | IronXL",
    "keywords": "Class FeatureTags Inheritance System.Object FeatureTags Namespace : SixLabors.Fonts.Tables.AdvancedTypographic Assembly : IronXL.dll Syntax public sealed class FeatureTags : Enum Fields AboveBaseForms Declaration public const FeatureTags AboveBaseForms Field Value Type Description FeatureTags AboveBaseMarkPositioning Declaration public const FeatureTags AboveBaseMarkPositioning Field Value Type Description FeatureTags AboveBaseSubstitutions Declaration public const FeatureTags AboveBaseSubstitutions Field Value Type Description FeatureTags AccessAllAlternates Declaration public const FeatureTags AccessAllAlternates Field Value Type Description FeatureTags Akhand Declaration public const FeatureTags Akhand Field Value Type Description FeatureTags AlternateAnnotationForms Declaration public const FeatureTags AlternateAnnotationForms Field Value Type Description FeatureTags AlternateHalfWidths Declaration public const FeatureTags AlternateHalfWidths Field Value Type Description FeatureTags AlternateVerticalHalfMetrics Declaration public const FeatureTags AlternateVerticalHalfMetrics Field Value Type Description FeatureTags AlternateVerticalMetrics Declaration public const FeatureTags AlternateVerticalMetrics Field Value Type Description FeatureTags AlternativeFractions Declaration public const FeatureTags AlternativeFractions Field Value Type Description FeatureTags BelowBaseForms Declaration public const FeatureTags BelowBaseForms Field Value Type Description FeatureTags BelowBaseMarkPositioning Declaration public const FeatureTags BelowBaseMarkPositioning Field Value Type Description FeatureTags BelowBaseSubstitutions Declaration public const FeatureTags BelowBaseSubstitutions Field Value Type Description FeatureTags CapitalSpacing Declaration public const FeatureTags CapitalSpacing Field Value Type Description FeatureTags CaseSensitiveForms Declaration public const FeatureTags CaseSensitiveForms Field Value Type Description FeatureTags CenteredCjkPunctuation Declaration public const FeatureTags CenteredCjkPunctuation Field Value Type Description FeatureTags ConjunctFormAfterRo Declaration public const FeatureTags ConjunctFormAfterRo Field Value Type Description FeatureTags ConjunctForms Declaration public const FeatureTags ConjunctForms Field Value Type Description FeatureTags ContextualAlternates Declaration public const FeatureTags ContextualAlternates Field Value Type Description FeatureTags ContextualLigatures Declaration public const FeatureTags ContextualLigatures Field Value Type Description FeatureTags ContextualSwash Declaration public const FeatureTags ContextualSwash Field Value Type Description FeatureTags CursivePositioning Declaration public const FeatureTags CursivePositioning Field Value Type Description FeatureTags Denominators Declaration public const FeatureTags Denominators Field Value Type Description FeatureTags DiscretionaryLigatures Declaration public const FeatureTags DiscretionaryLigatures Field Value Type Description FeatureTags Distances Declaration public const FeatureTags Distances Field Value Type Description FeatureTags DotlessForms Declaration public const FeatureTags DotlessForms Field Value Type Description FeatureTags ExpertForms Declaration public const FeatureTags ExpertForms Field Value Type Description FeatureTags FinalGlyphOnLineAlternates Declaration public const FeatureTags FinalGlyphOnLineAlternates Field Value Type Description FeatureTags FlattenedAscentForms Declaration public const FeatureTags FlattenedAscentForms Field Value Type Description FeatureTags Fractions Declaration public const FeatureTags Fractions Field Value Type Description FeatureTags FullWidths Declaration public const FeatureTags FullWidths Field Value Type Description FeatureTags GlyphCompositionDecomposition Declaration public const FeatureTags GlyphCompositionDecomposition Field Value Type Description FeatureTags HalantForms Declaration public const FeatureTags HalantForms Field Value Type Description FeatureTags HalfForms Declaration public const FeatureTags HalfForms Field Value Type Description FeatureTags HalfWidths Declaration public const FeatureTags HalfWidths Field Value Type Description FeatureTags Hangul Declaration public const FeatureTags Hangul Field Value Type Description FeatureTags HistoricalForms Declaration public const FeatureTags HistoricalForms Field Value Type Description FeatureTags HistoricalLigatures Declaration public const FeatureTags HistoricalLigatures Field Value Type Description FeatureTags HojoKanjiForms Declaration public const FeatureTags HojoKanjiForms Field Value Type Description FeatureTags HorizontalKanaAlternates Declaration public const FeatureTags HorizontalKanaAlternates Field Value Type Description FeatureTags InitialForms Declaration public const FeatureTags InitialForms Field Value Type Description FeatureTags IsolatedForms Declaration public const FeatureTags IsolatedForms Field Value Type Description FeatureTags Italics Declaration public const FeatureTags Italics Field Value Type Description FeatureTags Jis2004 Declaration public const FeatureTags Jis2004 Field Value Type Description FeatureTags Jis78Forms Declaration public const FeatureTags Jis78Forms Field Value Type Description FeatureTags Jis83Forms Declaration public const FeatureTags Jis83Forms Field Value Type Description FeatureTags Jis90Forms Declaration public const FeatureTags Jis90Forms Field Value Type Description FeatureTags JustificationAlternates Declaration public const FeatureTags JustificationAlternates Field Value Type Description FeatureTags Kerning Declaration public const FeatureTags Kerning Field Value Type Description FeatureTags LeadingJamoForms Declaration public const FeatureTags LeadingJamoForms Field Value Type Description FeatureTags LeftBounds Declaration public const FeatureTags LeftBounds Field Value Type Description FeatureTags LeftToRightGlyphAlternates Declaration public const FeatureTags LeftToRightGlyphAlternates Field Value Type Description FeatureTags LeftToRightMirroredForms Declaration public const FeatureTags LeftToRightMirroredForms Field Value Type Description FeatureTags Ligatures Declaration public const FeatureTags Ligatures Field Value Type Description FeatureTags LiningFigures Declaration public const FeatureTags LiningFigures Field Value Type Description FeatureTags LocalizedForms Declaration public const FeatureTags LocalizedForms Field Value Type Description FeatureTags MarkPositioning Declaration public const FeatureTags MarkPositioning Field Value Type Description FeatureTags MarkToMarkPositioning Declaration public const FeatureTags MarkToMarkPositioning Field Value Type Description FeatureTags MathematicalGreek Declaration public const FeatureTags MathematicalGreek Field Value Type Description FeatureTags MathScriptStyleAlternates Declaration public const FeatureTags MathScriptStyleAlternates Field Value Type Description FeatureTags MedialForms Declaration public const FeatureTags MedialForms Field Value Type Description FeatureTags MedialForms2 Declaration public const FeatureTags MedialForms2 Field Value Type Description FeatureTags Mset Declaration public const FeatureTags Mset Field Value Type Description FeatureTags NlcKanjiForms Declaration public const FeatureTags NlcKanjiForms Field Value Type Description FeatureTags NuktaForms Declaration public const FeatureTags NuktaForms Field Value Type Description FeatureTags Numerators Declaration public const FeatureTags Numerators Field Value Type Description FeatureTags OldstyleFigures Declaration public const FeatureTags OldstyleFigures Field Value Type Description FeatureTags OpticalBounds Declaration public const FeatureTags OpticalBounds Field Value Type Description FeatureTags OpticalSize Declaration public const FeatureTags OpticalSize Field Value Type Description FeatureTags Ordinals Declaration public const FeatureTags Ordinals Field Value Type Description FeatureTags Ornaments Declaration public const FeatureTags Ornaments Field Value Type Description FeatureTags PetiteCapitals Declaration public const FeatureTags PetiteCapitals Field Value Type Description FeatureTags PetiteCapitalsFromCapitals Declaration public const FeatureTags PetiteCapitalsFromCapitals Field Value Type Description FeatureTags PostBaseForms Declaration public const FeatureTags PostBaseForms Field Value Type Description FeatureTags PostBaseSubstitutions Declaration public const FeatureTags PostBaseSubstitutions Field Value Type Description FeatureTags PreBaseForms Declaration public const FeatureTags PreBaseForms Field Value Type Description FeatureTags PreBaseSubstitutions Declaration public const FeatureTags PreBaseSubstitutions Field Value Type Description FeatureTags ProportionalAlternateVerticalMetrics Declaration public const FeatureTags ProportionalAlternateVerticalMetrics Field Value Type Description FeatureTags ProportionalAlternateWidths Declaration public const FeatureTags ProportionalAlternateWidths Field Value Type Description FeatureTags ProportionalFigures Declaration public const FeatureTags ProportionalFigures Field Value Type Description FeatureTags ProportionalKana Declaration public const FeatureTags ProportionalKana Field Value Type Description FeatureTags ProportionalWidths Declaration public const FeatureTags ProportionalWidths Field Value Type Description FeatureTags QuarterWidths Declaration public const FeatureTags QuarterWidths Field Value Type Description FeatureTags RakarForms Declaration public const FeatureTags RakarForms Field Value Type Description FeatureTags Randomize Declaration public const FeatureTags Randomize Field Value Type Description FeatureTags RephForm Declaration public const FeatureTags RephForm Field Value Type Description FeatureTags RequiredContextualAlternates Declaration public const FeatureTags RequiredContextualAlternates Field Value Type Description FeatureTags RequiredLigatures Declaration public const FeatureTags RequiredLigatures Field Value Type Description FeatureTags RequiredVariationAlternates Declaration public const FeatureTags RequiredVariationAlternates Field Value Type Description FeatureTags RightBounds Declaration public const FeatureTags RightBounds Field Value Type Description FeatureTags RightToLeftAlternates Declaration public const FeatureTags RightToLeftAlternates Field Value Type Description FeatureTags RightToLeftMirroredForms Declaration public const FeatureTags RightToLeftMirroredForms Field Value Type Description FeatureTags RubyNotationForms Declaration public const FeatureTags RubyNotationForms Field Value Type Description FeatureTags ScientificInferiors Declaration public const FeatureTags ScientificInferiors Field Value Type Description FeatureTags SimplifiedForms Declaration public const FeatureTags SimplifiedForms Field Value Type Description FeatureTags SlashedZero Declaration public const FeatureTags SlashedZero Field Value Type Description FeatureTags SmallCapitals Declaration public const FeatureTags SmallCapitals Field Value Type Description FeatureTags SmallCapitalsFromCapitals Declaration public const FeatureTags SmallCapitalsFromCapitals Field Value Type Description FeatureTags StretchingGlyphDecomposition Declaration public const FeatureTags StretchingGlyphDecomposition Field Value Type Description FeatureTags StylisticAlternates Declaration public const FeatureTags StylisticAlternates Field Value Type Description FeatureTags Subscript Declaration public const FeatureTags Subscript Field Value Type Description FeatureTags Superscript Declaration public const FeatureTags Superscript Field Value Type Description FeatureTags Swash Declaration public const FeatureTags Swash Field Value Type Description FeatureTags TabularFigures Declaration public const FeatureTags TabularFigures Field Value Type Description FeatureTags TerminalForm2 Declaration public const FeatureTags TerminalForm2 Field Value Type Description FeatureTags TerminalForm3 Declaration public const FeatureTags TerminalForm3 Field Value Type Description FeatureTags TerminalForms Declaration public const FeatureTags TerminalForms Field Value Type Description FeatureTags ThirdWidths Declaration public const FeatureTags ThirdWidths Field Value Type Description FeatureTags Titling Declaration public const FeatureTags Titling Field Value Type Description FeatureTags TraditionalForms Declaration public const FeatureTags TraditionalForms Field Value Type Description FeatureTags TraditionalNameForms Declaration public const FeatureTags TraditionalNameForms Field Value Type Description FeatureTags TrailingJamoForms Declaration public const FeatureTags TrailingJamoForms Field Value Type Description FeatureTags Unicase Declaration public const FeatureTags Unicase Field Value Type Description FeatureTags value__ Declaration public uint value__ Field Value Type Description System.UInt32 VattuVariants Declaration public const FeatureTags VattuVariants Field Value Type Description FeatureTags VerticalAlternates Declaration public const FeatureTags VerticalAlternates Field Value Type Description FeatureTags VerticalAlternatesAndRotation Declaration public const FeatureTags VerticalAlternatesAndRotation Field Value Type Description FeatureTags VerticalAlternatesForRotation Declaration public const FeatureTags VerticalAlternatesForRotation Field Value Type Description FeatureTags VerticalKanaAlternates Declaration public const FeatureTags VerticalKanaAlternates Field Value Type Description FeatureTags VerticalKerning Declaration public const FeatureTags VerticalKerning Field Value Type Description FeatureTags VowelJamoForms Declaration public const FeatureTags VowelJamoForms Field Value Type Description FeatureTags"
  },
  "api/SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef.html": {
    "href": "api/SixLabors.Fonts.Tables.AdvancedTypographic.GlyphClassDef.html",
    "title": "Class GlyphClassDef | C# Excel API | IronXL",
    "keywords": "Class GlyphClassDef Inheritance System.Object GlyphClassDef Namespace : SixLabors.Fonts.Tables.AdvancedTypographic Assembly : IronXL.dll Syntax public sealed class GlyphClassDef : Enum Fields BaseGlyph Declaration public const GlyphClassDef BaseGlyph Field Value Type Description GlyphClassDef ComponentGlyph Declaration public const GlyphClassDef ComponentGlyph Field Value Type Description GlyphClassDef LigatureGlyph Declaration public const GlyphClassDef LigatureGlyph Field Value Type Description GlyphClassDef MarkGlyph Declaration public const GlyphClassDef MarkGlyph Field Value Type Description GlyphClassDef value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.Tables.AdvancedTypographic.html": {
    "href": "api/SixLabors.Fonts.Tables.AdvancedTypographic.html",
    "title": "Namespace SixLabors.Fonts.Tables.AdvancedTypographic | C# Excel API | IronXL",
    "keywords": "Namespace SixLabors.Fonts.Tables.AdvancedTypographic Classes FeatureTags GlyphClassDef Tag"
  },
  "api/SixLabors.Fonts.Tables.AdvancedTypographic.Tag.html": {
    "href": "api/SixLabors.Fonts.Tables.AdvancedTypographic.Tag.html",
    "title": "Class Tag | C# Excel API | IronXL",
    "keywords": "Class Tag Inheritance System.Object Tag Implements System.IEquatable < Tag > Namespace : SixLabors.Fonts.Tables.AdvancedTypographic Assembly : IronXL.dll Syntax public sealed class Tag : ValueType Constructors Tag(UInt32) Declaration public Tag(uint value) Parameters Type Name Description System.UInt32 value Properties Value Declaration public uint Value { get; } Property Value Type Description System.UInt32 Methods Equals(Tag) Declaration public bool Equals(Tag other) Parameters Type Name Description Tag other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Parse(String) Declaration public static Tag Parse(string value) Parameters Type Name Description System.String value Returns Type Description Tag ToString() Declaration public override string ToString() Returns Type Description System.String Operators Equality(Tag, Tag) Declaration public static bool operator ==(Tag left, Tag right) Parameters Type Name Description Tag left Tag right Returns Type Description System.Boolean Implicit(FeatureTags to Tag) Declaration public static implicit operator Tag(FeatureTags value) Parameters Type Name Description FeatureTags value Returns Type Description Tag Implicit(UInt32 to Tag) Declaration public static implicit operator Tag(uint value) Parameters Type Name Description System.UInt32 value Returns Type Description Tag Inequality(Tag, Tag) Declaration public static bool operator !=(Tag left, Tag right) Parameters Type Name Description Tag left Tag right Returns Type Description System.Boolean Implements System.IEquatable<>"
  },
  "api/SixLabors.Fonts.Tables.TrueType.Glyphs.GlyphOutline.html": {
    "href": "api/SixLabors.Fonts.Tables.TrueType.Glyphs.GlyphOutline.html",
    "title": "Class GlyphOutline | C# Excel API | IronXL",
    "keywords": "Class GlyphOutline Inheritance System.Object GlyphOutline Namespace : SixLabors.Fonts.Tables.TrueType.Glyphs Assembly : IronXL.dll Syntax public sealed class GlyphOutline : ValueType Constructors GlyphOutline(fkgnpb[], UInt16[], Boolean[]) Declaration public GlyphOutline(fkgnpb[] controlPoints, ushort[] endPoints, bool[] onCurves) Parameters Type Name Description Iron.Excel.Extensions.fkgnpb [] controlPoints System.UInt16 [] endPoints System.Boolean [] onCurves Properties ControlPoints Declaration public fkgnne<fkgnpb> ControlPoints { get; } Property Value Type Description Iron.Excel.Extensions.fkgnne < Iron.Excel.Extensions.fkgnpb > EndPoints Declaration public fkgnne<ushort> EndPoints { get; } Property Value Type Description Iron.Excel.Extensions.fkgnne < System.UInt16 > OnCurves Declaration public fkgnne<bool> OnCurves { get; } Property Value Type Description Iron.Excel.Extensions.fkgnne < System.Boolean >"
  },
  "api/SixLabors.Fonts.Tables.TrueType.Glyphs.html": {
    "href": "api/SixLabors.Fonts.Tables.TrueType.Glyphs.html",
    "title": "Namespace SixLabors.Fonts.Tables.TrueType.Glyphs | C# Excel API | IronXL",
    "keywords": "Namespace SixLabors.Fonts.Tables.TrueType.Glyphs Classes GlyphOutline"
  },
  "api/SixLabors.Fonts.Tables.TrueType.html": {
    "href": "api/SixLabors.Fonts.Tables.TrueType.html",
    "title": "Namespace SixLabors.Fonts.Tables.TrueType | C# Excel API | IronXL",
    "keywords": "Namespace SixLabors.Fonts.Tables.TrueType Classes TrueTypeGlyphMetrics"
  },
  "api/SixLabors.Fonts.Tables.TrueType.TrueTypeGlyphMetrics.html": {
    "href": "api/SixLabors.Fonts.Tables.TrueType.TrueTypeGlyphMetrics.html",
    "title": "Class TrueTypeGlyphMetrics | C# Excel API | IronXL",
    "keywords": "Class TrueTypeGlyphMetrics Inheritance System.Object GlyphMetrics TrueTypeGlyphMetrics Inherited Members GlyphMetrics.CodePoint GlyphMetrics.AdvanceWidth GlyphMetrics.AdvanceHeight GlyphMetrics.LeftSideBearing GlyphMetrics.RightSideBearing GlyphMetrics.TopSideBearing GlyphMetrics.BottomSideBearing GlyphMetrics.Width GlyphMetrics.Height GlyphMetrics.GlyphType GlyphMetrics.GlyphColor GlyphMetrics.UnitsPerEm GlyphMetrics.ScaleFactor Namespace : SixLabors.Fonts.Tables.TrueType Assembly : IronXL.dll Syntax public class TrueTypeGlyphMetrics : GlyphMetrics Methods GetOutline() Declaration public GlyphOutline GetOutline() Returns Type Description GlyphOutline Inherited members CodePoint AdvanceWidth AdvanceHeight LeftSideBearing RightSideBearing TopSideBearing BottomSideBearing Width Height GlyphType GlyphColor UnitsPerEm ScaleFactor"
  },
  "api/SixLabors.Fonts.TextAlignment.html": {
    "href": "api/SixLabors.Fonts.TextAlignment.html",
    "title": "Class TextAlignment | C# Excel API | IronXL",
    "keywords": "Class TextAlignment Inheritance System.Object TextAlignment Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class TextAlignment : Enum Fields Center Declaration public const TextAlignment Center Field Value Type Description TextAlignment End Declaration public const TextAlignment End Field Value Type Description TextAlignment Start Declaration public const TextAlignment Start Field Value Type Description TextAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.TextAttributes.html": {
    "href": "api/SixLabors.Fonts.TextAttributes.html",
    "title": "Class TextAttributes | C# Excel API | IronXL",
    "keywords": "Class TextAttributes Inheritance System.Object TextAttributes Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class TextAttributes : Enum Fields None Declaration public const TextAttributes None Field Value Type Description TextAttributes Subscript Declaration public const TextAttributes Subscript Field Value Type Description TextAttributes Superscript Declaration public const TextAttributes Superscript Field Value Type Description TextAttributes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.TextDecorations.html": {
    "href": "api/SixLabors.Fonts.TextDecorations.html",
    "title": "Class TextDecorations | C# Excel API | IronXL",
    "keywords": "Class TextDecorations Inheritance System.Object TextDecorations Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class TextDecorations : Enum Fields None Declaration public const TextDecorations None Field Value Type Description TextDecorations Overline Declaration public const TextDecorations Overline Field Value Type Description TextDecorations Strikeout Declaration public const TextDecorations Strikeout Field Value Type Description TextDecorations Underline Declaration public const TextDecorations Underline Field Value Type Description TextDecorations value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.TextDirection.html": {
    "href": "api/SixLabors.Fonts.TextDirection.html",
    "title": "Class TextDirection | C# Excel API | IronXL",
    "keywords": "Class TextDirection Inheritance System.Object TextDirection Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class TextDirection : Enum Fields Auto Declaration public const TextDirection Auto Field Value Type Description TextDirection LeftToRight Declaration public const TextDirection LeftToRight Field Value Type Description TextDirection RightToLeft Declaration public const TextDirection RightToLeft Field Value Type Description TextDirection value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.TextJustification.html": {
    "href": "api/SixLabors.Fonts.TextJustification.html",
    "title": "Class TextJustification | C# Excel API | IronXL",
    "keywords": "Class TextJustification Inheritance System.Object TextJustification Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class TextJustification : Enum Fields InterCharacter Declaration public const TextJustification InterCharacter Field Value Type Description TextJustification InterWord Declaration public const TextJustification InterWord Field Value Type Description TextJustification None Declaration public const TextJustification None Field Value Type Description TextJustification value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.TextMeasurer.html": {
    "href": "api/SixLabors.Fonts.TextMeasurer.html",
    "title": "Class TextMeasurer | C# Excel API | IronXL",
    "keywords": "Class TextMeasurer Inheritance System.Object TextMeasurer Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public static class TextMeasurer : Object Methods CountLines(fkgnnf<Char>, TextOptions) Declaration public static int CountLines(fkgnnf<char> text, TextOptions options) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options Returns Type Description System.Int32 CountLines(String, TextOptions) Declaration public static int CountLines(string text, TextOptions options) Parameters Type Name Description System.String text TextOptions options Returns Type Description System.Int32 Measure(fkgnnf<Char>, TextOptions) Declaration public static FontRectangle Measure(fkgnnf<char> text, TextOptions options) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options Returns Type Description FontRectangle Measure(String, TextOptions) Declaration public static FontRectangle Measure(string text, TextOptions options) Parameters Type Name Description System.String text TextOptions options Returns Type Description FontRectangle MeasureBounds(fkgnnf<Char>, TextOptions) Declaration public static FontRectangle MeasureBounds(fkgnnf<char> text, TextOptions options) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options Returns Type Description FontRectangle MeasureBounds(String, TextOptions) Declaration public static FontRectangle MeasureBounds(string text, TextOptions options) Parameters Type Name Description System.String text TextOptions options Returns Type Description FontRectangle TryMeasureCharacterBounds(fkgnnf<Char>, TextOptions, out GlyphBounds[]) Declaration public static bool TryMeasureCharacterBounds(fkgnnf<char> text, TextOptions options, out GlyphBounds[] characterBounds) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options GlyphBounds [] characterBounds Returns Type Description System.Boolean TryMeasureCharacterBounds(String, TextOptions, out GlyphBounds[]) Declaration public static bool TryMeasureCharacterBounds(string text, TextOptions options, out GlyphBounds[] characterBounds) Parameters Type Name Description System.String text TextOptions options GlyphBounds [] characterBounds Returns Type Description System.Boolean TryMeasureCharacterDimensions(fkgnnf<Char>, TextOptions, out GlyphBounds[]) Declaration public static bool TryMeasureCharacterDimensions(fkgnnf<char> text, TextOptions options, out GlyphBounds[] characterBounds) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options GlyphBounds [] characterBounds Returns Type Description System.Boolean TryMeasureCharacterDimensions(String, TextOptions, out GlyphBounds[]) Declaration public static bool TryMeasureCharacterDimensions(string text, TextOptions options, out GlyphBounds[] characterBounds) Parameters Type Name Description System.String text TextOptions options GlyphBounds [] characterBounds Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.TextOptions.html": {
    "href": "api/SixLabors.Fonts.TextOptions.html",
    "title": "Class TextOptions | C# Excel API | IronXL",
    "keywords": "Class TextOptions Inheritance System.Object TextOptions Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class TextOptions : Object Constructors TextOptions(Font) Declaration public TextOptions(Font font) Parameters Type Name Description Font font TextOptions(TextOptions) Declaration public TextOptions(TextOptions options) Parameters Type Name Description TextOptions options Properties ColorFontSupport Declaration public ColorFontSupport ColorFontSupport { get; set; } Property Value Type Description ColorFontSupport Dpi Declaration public float Dpi { get; set; } Property Value Type Description System.Single FallbackFontFamilies Declaration public IReadOnlyList<FontFamily> FallbackFontFamilies { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < FontFamily > FeatureTags Declaration public IReadOnlyList<Tag> FeatureTags { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Tag > Font Declaration public Font Font { get; set; } Property Value Type Description Font HintingMode Declaration public HintingMode HintingMode { get; set; } Property Value Type Description HintingMode HorizontalAlignment Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment KerningMode Declaration public KerningMode KerningMode { get; set; } Property Value Type Description KerningMode LayoutMode Declaration public LayoutMode LayoutMode { get; set; } Property Value Type Description LayoutMode LineSpacing Declaration public float LineSpacing { get; set; } Property Value Type Description System.Single Origin Declaration public fkgnpb Origin { get; set; } Property Value Type Description Iron.Excel.Extensions.fkgnpb TabWidth Declaration public float TabWidth { get; set; } Property Value Type Description System.Single TextAlignment Declaration public TextAlignment TextAlignment { get; set; } Property Value Type Description TextAlignment TextDirection Declaration public TextDirection TextDirection { get; set; } Property Value Type Description TextDirection TextJustification Declaration public TextJustification TextJustification { get; set; } Property Value Type Description TextJustification TextRuns Declaration public IReadOnlyList<TextRun> TextRuns { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < TextRun > VerticalAlignment Declaration public VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment WordBreaking Declaration public WordBreaking WordBreaking { get; set; } Property Value Type Description WordBreaking WrappingLength Declaration public float WrappingLength { get; set; } Property Value Type Description System.Single"
  },
  "api/SixLabors.Fonts.TextRenderer.html": {
    "href": "api/SixLabors.Fonts.TextRenderer.html",
    "title": "Class TextRenderer | C# Excel API | IronXL",
    "keywords": "Class TextRenderer Inheritance System.Object TextRenderer Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class TextRenderer : Object Constructors TextRenderer(IGlyphRenderer) Declaration public TextRenderer(IGlyphRenderer renderer) Parameters Type Name Description IGlyphRenderer renderer Methods RenderText(fkgnnf<Char>, TextOptions) Declaration public void RenderText(fkgnnf<char> text, TextOptions options) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options RenderText(String, TextOptions) Declaration public void RenderText(string text, TextOptions options) Parameters Type Name Description System.String text TextOptions options RenderTextTo(IGlyphRenderer, fkgnnf<Char>, TextOptions) Declaration public static void RenderTextTo(IGlyphRenderer renderer, fkgnnf<char> text, TextOptions options) Parameters Type Name Description IGlyphRenderer renderer Iron.Excel.Extensions.fkgnnf < System.Char > text TextOptions options RenderTextTo(IGlyphRenderer, String, TextOptions) Declaration public static void RenderTextTo(IGlyphRenderer renderer, string text, TextOptions options) Parameters Type Name Description IGlyphRenderer renderer System.String text TextOptions options"
  },
  "api/SixLabors.Fonts.TextRun.html": {
    "href": "api/SixLabors.Fonts.TextRun.html",
    "title": "Class TextRun | C# Excel API | IronXL",
    "keywords": "Class TextRun Inheritance System.Object TextRun Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public class TextRun : Object Constructors TextRun() Declaration public TextRun() Properties End Declaration public int End { get; set; } Property Value Type Description System.Int32 Font Declaration public Font Font { get; set; } Property Value Type Description Font Start Declaration public int Start { get; set; } Property Value Type Description System.Int32 TextAttributes Declaration public TextAttributes TextAttributes { get; set; } Property Value Type Description TextAttributes TextDecorations Declaration public TextDecorations TextDecorations { get; set; } Property Value Type Description TextDecorations Methods Slice(fkgnnf<Char>) Declaration public fkgnnf<char> Slice(fkgnnf<char> text) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > text Returns Type Description Iron.Excel.Extensions.fkgnnf < System.Char > ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/SixLabors.Fonts.Unicode.BidiCharacterType.html": {
    "href": "api/SixLabors.Fonts.Unicode.BidiCharacterType.html",
    "title": "Class BidiCharacterType | C# Excel API | IronXL",
    "keywords": "Class BidiCharacterType Inheritance System.Object BidiCharacterType Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class BidiCharacterType : Enum Fields ArabicLetter Declaration public const BidiCharacterType ArabicLetter Field Value Type Description BidiCharacterType ArabicNumber Declaration public const BidiCharacterType ArabicNumber Field Value Type Description BidiCharacterType BoundaryNeutral Declaration public const BidiCharacterType BoundaryNeutral Field Value Type Description BidiCharacterType CommonSeparator Declaration public const BidiCharacterType CommonSeparator Field Value Type Description BidiCharacterType EuropeanNumber Declaration public const BidiCharacterType EuropeanNumber Field Value Type Description BidiCharacterType EuropeanSeparator Declaration public const BidiCharacterType EuropeanSeparator Field Value Type Description BidiCharacterType EuropeanTerminator Declaration public const BidiCharacterType EuropeanTerminator Field Value Type Description BidiCharacterType FirstStrongIsolate Declaration public const BidiCharacterType FirstStrongIsolate Field Value Type Description BidiCharacterType LeftToRight Declaration public const BidiCharacterType LeftToRight Field Value Type Description BidiCharacterType LeftToRightEmbedding Declaration public const BidiCharacterType LeftToRightEmbedding Field Value Type Description BidiCharacterType LeftToRightIsolate Declaration public const BidiCharacterType LeftToRightIsolate Field Value Type Description BidiCharacterType LeftToRightOverride Declaration public const BidiCharacterType LeftToRightOverride Field Value Type Description BidiCharacterType NonspacingMark Declaration public const BidiCharacterType NonspacingMark Field Value Type Description BidiCharacterType OtherNeutral Declaration public const BidiCharacterType OtherNeutral Field Value Type Description BidiCharacterType ParagraphSeparator Declaration public const BidiCharacterType ParagraphSeparator Field Value Type Description BidiCharacterType PopDirectionalFormat Declaration public const BidiCharacterType PopDirectionalFormat Field Value Type Description BidiCharacterType PopDirectionalIsolate Declaration public const BidiCharacterType PopDirectionalIsolate Field Value Type Description BidiCharacterType RightToLeft Declaration public const BidiCharacterType RightToLeft Field Value Type Description BidiCharacterType RightToLeftEmbedding Declaration public const BidiCharacterType RightToLeftEmbedding Field Value Type Description BidiCharacterType RightToLeftIsolate Declaration public const BidiCharacterType RightToLeftIsolate Field Value Type Description BidiCharacterType RightToLeftOverride Declaration public const BidiCharacterType RightToLeftOverride Field Value Type Description BidiCharacterType SegmentSeparator Declaration public const BidiCharacterType SegmentSeparator Field Value Type Description BidiCharacterType value__ Declaration public int value__ Field Value Type Description System.Int32 Whitespace Declaration public const BidiCharacterType Whitespace Field Value Type Description BidiCharacterType"
  },
  "api/SixLabors.Fonts.Unicode.BidiClass.html": {
    "href": "api/SixLabors.Fonts.Unicode.BidiClass.html",
    "title": "Class BidiClass | C# Excel API | IronXL",
    "keywords": "Class BidiClass Inheritance System.Object BidiClass Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class BidiClass : ValueType Constructors BidiClass(CodePoint) Declaration public BidiClass(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Properties CharacterType Declaration public BidiCharacterType CharacterType { get; } Property Value Type Description BidiCharacterType PairedBracketType Declaration public BidiPairedBracketType PairedBracketType { get; } Property Value Type Description BidiPairedBracketType Methods TryGetPairedBracket(out CodePoint) Declaration public bool TryGetPairedBracket(out CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.Unicode.BidiPairedBracketType.html": {
    "href": "api/SixLabors.Fonts.Unicode.BidiPairedBracketType.html",
    "title": "Class BidiPairedBracketType | C# Excel API | IronXL",
    "keywords": "Class BidiPairedBracketType Inheritance System.Object BidiPairedBracketType Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class BidiPairedBracketType : Enum Fields Close Declaration public const BidiPairedBracketType Close Field Value Type Description BidiPairedBracketType None Declaration public const BidiPairedBracketType None Field Value Type Description BidiPairedBracketType Open Declaration public const BidiPairedBracketType Open Field Value Type Description BidiPairedBracketType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.Unicode.CodePoint.html": {
    "href": "api/SixLabors.Fonts.Unicode.CodePoint.html",
    "title": "Class CodePoint | C# Excel API | IronXL",
    "keywords": "Class CodePoint Inheritance System.Object CodePoint Implements System.IComparable System.IComparable < CodePoint > System.IEquatable < CodePoint > Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class CodePoint : ValueType Constructors CodePoint(Char) Declaration public CodePoint(char value) Parameters Type Name Description System.Char value CodePoint(Char, Char) Declaration public CodePoint(char highSurrogate, char lowSurrogate) Parameters Type Name Description System.Char highSurrogate System.Char lowSurrogate CodePoint(Int32) Declaration public CodePoint(int value) Parameters Type Name Description System.Int32 value CodePoint(UInt32) Declaration public CodePoint(uint value) Parameters Type Name Description System.UInt32 value Properties IsAscii Declaration public bool IsAscii { get; } Property Value Type Description System.Boolean IsBmp Declaration public bool IsBmp { get; } Property Value Type Description System.Boolean Plane Declaration public int Plane { get; } Property Value Type Description System.Int32 ReplacementChar Declaration public static CodePoint ReplacementChar { get; } Property Value Type Description CodePoint Utf16SequenceLength Declaration public int Utf16SequenceLength { get; } Property Value Type Description System.Int32 Utf8SequenceLength Declaration public int Utf8SequenceLength { get; } Property Value Type Description System.Int32 Value Declaration public int Value { get; } Property Value Type Description System.Int32 Methods CompareTo(CodePoint) Declaration public int CompareTo(CodePoint other) Parameters Type Name Description CodePoint other Returns Type Description System.Int32 Equals(CodePoint) Declaration public bool Equals(CodePoint other) Parameters Type Name Description CodePoint other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetBidiClass(CodePoint) Declaration public static BidiClass GetBidiClass(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description BidiClass GetCodePointCount(fkgnnf<Char>) Declaration public static int GetCodePointCount(fkgnnf<char> source) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > source Returns Type Description System.Int32 GetGeneralCategory(CodePoint) Declaration public static UnicodeCategory GetGeneralCategory(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Globalization.UnicodeCategory GetGraphemeClusterClass(CodePoint) Declaration public static GraphemeClusterClass GetGraphemeClusterClass(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description GraphemeClusterClass GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 GetLineBreakClass(CodePoint) Declaration public static LineBreakClass GetLineBreakClass(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description LineBreakClass IsControl(CodePoint) Declaration public static bool IsControl(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsDigit(CodePoint) Declaration public static bool IsDigit(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsLetter(CodePoint) Declaration public static bool IsLetter(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsLetterOrDigit(CodePoint) Declaration public static bool IsLetterOrDigit(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsLower(CodePoint) Declaration public static bool IsLower(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsMark(CodePoint) Declaration public static bool IsMark(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsNewLine(CodePoint) Declaration public static bool IsNewLine(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsNonBreakingSpace(CodePoint) Declaration public static bool IsNonBreakingSpace(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsNumber(CodePoint) Declaration public static bool IsNumber(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsPunctuation(CodePoint) Declaration public static bool IsPunctuation(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsSeparator(CodePoint) Declaration public static bool IsSeparator(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsSymbol(CodePoint) Declaration public static bool IsSymbol(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsTabulation(CodePoint) Declaration public static bool IsTabulation(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsUpper(CodePoint) Declaration public static bool IsUpper(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsValid(Int32) Declaration public static bool IsValid(int value) Parameters Type Name Description System.Int32 value Returns Type Description System.Boolean IsValid(UInt32) Declaration public static bool IsValid(uint value) Parameters Type Name Description System.UInt32 value Returns Type Description System.Boolean IsVariationSelector(CodePoint) Declaration public static bool IsVariationSelector(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsWhiteSpace(CodePoint) Declaration public static bool IsWhiteSpace(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsZeroWidthJoiner(CodePoint) Declaration public static bool IsZeroWidthJoiner(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean IsZeroWidthNonJoiner(CodePoint) Declaration public static bool IsZeroWidthNonJoiner(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String TryGetBidiMirror(CodePoint, out CodePoint) Declaration public static bool TryGetBidiMirror(CodePoint codePoint, out CodePoint mirror) Parameters Type Name Description CodePoint codePoint CodePoint mirror Returns Type Description System.Boolean TryGetVerticalMirror(CodePoint, out CodePoint) Declaration public static bool TryGetVerticalMirror(CodePoint codePoint, out CodePoint mirror) Parameters Type Name Description CodePoint codePoint CodePoint mirror Returns Type Description System.Boolean Operators Equality(CodePoint, CodePoint) Declaration public static bool operator ==(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left CodePoint right Returns Type Description System.Boolean Explicit(Char to CodePoint) Declaration public static explicit operator CodePoint(char ch) Parameters Type Name Description System.Char ch Returns Type Description CodePoint Explicit(Int32 to CodePoint) Declaration public static explicit operator CodePoint(int value) Parameters Type Name Description System.Int32 value Returns Type Description CodePoint Explicit(UInt32 to CodePoint) Declaration public static explicit operator CodePoint(uint value) Parameters Type Name Description System.UInt32 value Returns Type Description CodePoint GreaterThan(CodePoint, CodePoint) Declaration public static bool operator>(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left CodePoint right Returns Type Description System.Boolean GreaterThanOrEqual(CodePoint, CodePoint) Declaration public static bool operator >=(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left CodePoint right Returns Type Description System.Boolean Inequality(CodePoint, CodePoint) Declaration public static bool operator !=(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left CodePoint right Returns Type Description System.Boolean LessThan(CodePoint, CodePoint) Declaration public static bool operator <(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left CodePoint right Returns Type Description System.Boolean LessThanOrEqual(CodePoint, CodePoint) Declaration public static bool operator <=(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left CodePoint right Returns Type Description System.Boolean Implements System.IComparable System.IComparable<> System.IEquatable<>"
  },
  "api/SixLabors.Fonts.Unicode.GraphemeClusterClass.html": {
    "href": "api/SixLabors.Fonts.Unicode.GraphemeClusterClass.html",
    "title": "Class GraphemeClusterClass | C# Excel API | IronXL",
    "keywords": "Class GraphemeClusterClass Inheritance System.Object GraphemeClusterClass Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class GraphemeClusterClass : Enum Fields Any Declaration public const GraphemeClusterClass Any Field Value Type Description GraphemeClusterClass CarriageReturn Declaration public const GraphemeClusterClass CarriageReturn Field Value Type Description GraphemeClusterClass Control Declaration public const GraphemeClusterClass Control Field Value Type Description GraphemeClusterClass Extend Declaration public const GraphemeClusterClass Extend Field Value Type Description GraphemeClusterClass ExtendedPictographic Declaration public const GraphemeClusterClass ExtendedPictographic Field Value Type Description GraphemeClusterClass HangulLead Declaration public const GraphemeClusterClass HangulLead Field Value Type Description GraphemeClusterClass HangulLeadVowel Declaration public const GraphemeClusterClass HangulLeadVowel Field Value Type Description GraphemeClusterClass HangulLeadVowelTail Declaration public const GraphemeClusterClass HangulLeadVowelTail Field Value Type Description GraphemeClusterClass HangulTail Declaration public const GraphemeClusterClass HangulTail Field Value Type Description GraphemeClusterClass HangulVowel Declaration public const GraphemeClusterClass HangulVowel Field Value Type Description GraphemeClusterClass LineFeed Declaration public const GraphemeClusterClass LineFeed Field Value Type Description GraphemeClusterClass Prepend Declaration public const GraphemeClusterClass Prepend Field Value Type Description GraphemeClusterClass RegionalIndicator Declaration public const GraphemeClusterClass RegionalIndicator Field Value Type Description GraphemeClusterClass SpacingMark Declaration public const GraphemeClusterClass SpacingMark Field Value Type Description GraphemeClusterClass value__ Declaration public int value__ Field Value Type Description System.Int32 ZeroWidthJoiner Declaration public const GraphemeClusterClass ZeroWidthJoiner Field Value Type Description GraphemeClusterClass"
  },
  "api/SixLabors.Fonts.Unicode.html": {
    "href": "api/SixLabors.Fonts.Unicode.html",
    "title": "Namespace SixLabors.Fonts.Unicode | C# Excel API | IronXL",
    "keywords": "Namespace SixLabors.Fonts.Unicode Classes BidiCharacterType BidiClass BidiPairedBracketType CodePoint GraphemeClusterClass JoiningClass JoiningGroup JoiningType LineBreakClass MemoryExtensions ScriptClass SpanCodePointEnumerator SpanGraphemeEnumerator"
  },
  "api/SixLabors.Fonts.Unicode.JoiningClass.html": {
    "href": "api/SixLabors.Fonts.Unicode.JoiningClass.html",
    "title": "Class JoiningClass | C# Excel API | IronXL",
    "keywords": "Class JoiningClass Inheritance System.Object JoiningClass Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class JoiningClass : ValueType Constructors JoiningClass(CodePoint) Declaration public JoiningClass(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint Properties JoiningGroup Declaration public JoiningGroup JoiningGroup { get; } Property Value Type Description JoiningGroup JoiningType Declaration public JoiningType JoiningType { get; } Property Value Type Description JoiningType"
  },
  "api/SixLabors.Fonts.Unicode.JoiningGroup.html": {
    "href": "api/SixLabors.Fonts.Unicode.JoiningGroup.html",
    "title": "Class JoiningGroup | C# Excel API | IronXL",
    "keywords": "Class JoiningGroup Inheritance System.Object JoiningGroup Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class JoiningGroup : Enum Fields AfricanFeh Declaration public const JoiningGroup AfricanFeh Field Value Type Description JoiningGroup AfricanNoon Declaration public const JoiningGroup AfricanNoon Field Value Type Description JoiningGroup AfricanQaf Declaration public const JoiningGroup AfricanQaf Field Value Type Description JoiningGroup Ain Declaration public const JoiningGroup Ain Field Value Type Description JoiningGroup Alaph Declaration public const JoiningGroup Alaph Field Value Type Description JoiningGroup Alef Declaration public const JoiningGroup Alef Field Value Type Description JoiningGroup Beh Declaration public const JoiningGroup Beh Field Value Type Description JoiningGroup Beth Declaration public const JoiningGroup Beth Field Value Type Description JoiningGroup BurushaskiYehBarree Declaration public const JoiningGroup BurushaskiYehBarree Field Value Type Description JoiningGroup Dal Declaration public const JoiningGroup Dal Field Value Type Description JoiningGroup DalathRish Declaration public const JoiningGroup DalathRish Field Value Type Description JoiningGroup E Declaration public const JoiningGroup E Field Value Type Description JoiningGroup FarsiYeh Declaration public const JoiningGroup FarsiYeh Field Value Type Description JoiningGroup Fe Declaration public const JoiningGroup Fe Field Value Type Description JoiningGroup Feh Declaration public const JoiningGroup Feh Field Value Type Description JoiningGroup FinalSemkath Declaration public const JoiningGroup FinalSemkath Field Value Type Description JoiningGroup Gaf Declaration public const JoiningGroup Gaf Field Value Type Description JoiningGroup Gamal Declaration public const JoiningGroup Gamal Field Value Type Description JoiningGroup Hah Declaration public const JoiningGroup Hah Field Value Type Description JoiningGroup HanifiRohingyaKinnaYa Declaration public const JoiningGroup HanifiRohingyaKinnaYa Field Value Type Description JoiningGroup HanifiRohingyaPa Declaration public const JoiningGroup HanifiRohingyaPa Field Value Type Description JoiningGroup He Declaration public const JoiningGroup He Field Value Type Description JoiningGroup Heh Declaration public const JoiningGroup Heh Field Value Type Description JoiningGroup HehGoal Declaration public const JoiningGroup HehGoal Field Value Type Description JoiningGroup Heth Declaration public const JoiningGroup Heth Field Value Type Description JoiningGroup Kaf Declaration public const JoiningGroup Kaf Field Value Type Description JoiningGroup Kaph Declaration public const JoiningGroup Kaph Field Value Type Description JoiningGroup Khaph Declaration public const JoiningGroup Khaph Field Value Type Description JoiningGroup KnottedHeh Declaration public const JoiningGroup KnottedHeh Field Value Type Description JoiningGroup Lam Declaration public const JoiningGroup Lam Field Value Type Description JoiningGroup Lamadh Declaration public const JoiningGroup Lamadh Field Value Type Description JoiningGroup MalayalamBha Declaration public const JoiningGroup MalayalamBha Field Value Type Description JoiningGroup MalayalamJa Declaration public const JoiningGroup MalayalamJa Field Value Type Description JoiningGroup MalayalamLla Declaration public const JoiningGroup MalayalamLla Field Value Type Description JoiningGroup MalayalamLlla Declaration public const JoiningGroup MalayalamLlla Field Value Type Description JoiningGroup MalayalamNga Declaration public const JoiningGroup MalayalamNga Field Value Type Description JoiningGroup MalayalamNna Declaration public const JoiningGroup MalayalamNna Field Value Type Description JoiningGroup MalayalamNnna Declaration public const JoiningGroup MalayalamNnna Field Value Type Description JoiningGroup MalayalamNya Declaration public const JoiningGroup MalayalamNya Field Value Type Description JoiningGroup MalayalamRa Declaration public const JoiningGroup MalayalamRa Field Value Type Description JoiningGroup MalayalamSsa Declaration public const JoiningGroup MalayalamSsa Field Value Type Description JoiningGroup MalayalamTta Declaration public const JoiningGroup MalayalamTta Field Value Type Description JoiningGroup ManichaeanAleph Declaration public const JoiningGroup ManichaeanAleph Field Value Type Description JoiningGroup ManichaeanAyin Declaration public const JoiningGroup ManichaeanAyin Field Value Type Description JoiningGroup ManichaeanBeth Declaration public const JoiningGroup ManichaeanBeth Field Value Type Description JoiningGroup ManichaeanDaleth Declaration public const JoiningGroup ManichaeanDaleth Field Value Type Description JoiningGroup ManichaeanDhamedh Declaration public const JoiningGroup ManichaeanDhamedh Field Value Type Description JoiningGroup ManichaeanFive Declaration public const JoiningGroup ManichaeanFive Field Value Type Description JoiningGroup ManichaeanGimel Declaration public const JoiningGroup ManichaeanGimel Field Value Type Description JoiningGroup ManichaeanHeth Declaration public const JoiningGroup ManichaeanHeth Field Value Type Description JoiningGroup ManichaeanHundred Declaration public const JoiningGroup ManichaeanHundred Field Value Type Description JoiningGroup ManichaeanKaph Declaration public const JoiningGroup ManichaeanKaph Field Value Type Description JoiningGroup ManichaeanLamedh Declaration public const JoiningGroup ManichaeanLamedh Field Value Type Description JoiningGroup ManichaeanMem Declaration public const JoiningGroup ManichaeanMem Field Value Type Description JoiningGroup ManichaeanNun Declaration public const JoiningGroup ManichaeanNun Field Value Type Description JoiningGroup ManichaeanOne Declaration public const JoiningGroup ManichaeanOne Field Value Type Description JoiningGroup ManichaeanPe Declaration public const JoiningGroup ManichaeanPe Field Value Type Description JoiningGroup ManichaeanQoph Declaration public const JoiningGroup ManichaeanQoph Field Value Type Description JoiningGroup ManichaeanResh Declaration public const JoiningGroup ManichaeanResh Field Value Type Description JoiningGroup ManichaeanSadhe Declaration public const JoiningGroup ManichaeanSadhe Field Value Type Description JoiningGroup ManichaeanSamekh Declaration public const JoiningGroup ManichaeanSamekh Field Value Type Description JoiningGroup ManichaeanTaw Declaration public const JoiningGroup ManichaeanTaw Field Value Type Description JoiningGroup ManichaeanTen Declaration public const JoiningGroup ManichaeanTen Field Value Type Description JoiningGroup ManichaeanTeth Declaration public const JoiningGroup ManichaeanTeth Field Value Type Description JoiningGroup ManichaeanThamedh Declaration public const JoiningGroup ManichaeanThamedh Field Value Type Description JoiningGroup ManichaeanTwenty Declaration public const JoiningGroup ManichaeanTwenty Field Value Type Description JoiningGroup ManichaeanWaw Declaration public const JoiningGroup ManichaeanWaw Field Value Type Description JoiningGroup ManichaeanYodh Declaration public const JoiningGroup ManichaeanYodh Field Value Type Description JoiningGroup ManichaeanZayin Declaration public const JoiningGroup ManichaeanZayin Field Value Type Description JoiningGroup Meem Declaration public const JoiningGroup Meem Field Value Type Description JoiningGroup Mim Declaration public const JoiningGroup Mim Field Value Type Description JoiningGroup NoJoiningGroup Declaration public const JoiningGroup NoJoiningGroup Field Value Type Description JoiningGroup Noon Declaration public const JoiningGroup Noon Field Value Type Description JoiningGroup Nun Declaration public const JoiningGroup Nun Field Value Type Description JoiningGroup Nya Declaration public const JoiningGroup Nya Field Value Type Description JoiningGroup Pe Declaration public const JoiningGroup Pe Field Value Type Description JoiningGroup Qaf Declaration public const JoiningGroup Qaf Field Value Type Description JoiningGroup Qaph Declaration public const JoiningGroup Qaph Field Value Type Description JoiningGroup Reh Declaration public const JoiningGroup Reh Field Value Type Description JoiningGroup ReversedPe Declaration public const JoiningGroup ReversedPe Field Value Type Description JoiningGroup RohingyaYeh Declaration public const JoiningGroup RohingyaYeh Field Value Type Description JoiningGroup Sad Declaration public const JoiningGroup Sad Field Value Type Description JoiningGroup Sadhe Declaration public const JoiningGroup Sadhe Field Value Type Description JoiningGroup Seen Declaration public const JoiningGroup Seen Field Value Type Description JoiningGroup Semkath Declaration public const JoiningGroup Semkath Field Value Type Description JoiningGroup Shin Declaration public const JoiningGroup Shin Field Value Type Description JoiningGroup StraightWaw Declaration public const JoiningGroup StraightWaw Field Value Type Description JoiningGroup SwashKaf Declaration public const JoiningGroup SwashKaf Field Value Type Description JoiningGroup SyriacWaw Declaration public const JoiningGroup SyriacWaw Field Value Type Description JoiningGroup Tah Declaration public const JoiningGroup Tah Field Value Type Description JoiningGroup Taw Declaration public const JoiningGroup Taw Field Value Type Description JoiningGroup TehMarbuta Declaration public const JoiningGroup TehMarbuta Field Value Type Description JoiningGroup TehMarbutaGoal Declaration public const JoiningGroup TehMarbutaGoal Field Value Type Description JoiningGroup Teth Declaration public const JoiningGroup Teth Field Value Type Description JoiningGroup ThinYeh Declaration public const JoiningGroup ThinYeh Field Value Type Description JoiningGroup value__ Declaration public int value__ Field Value Type Description System.Int32 VerticalTail Declaration public const JoiningGroup VerticalTail Field Value Type Description JoiningGroup Waw Declaration public const JoiningGroup Waw Field Value Type Description JoiningGroup Yeh Declaration public const JoiningGroup Yeh Field Value Type Description JoiningGroup YehBarree Declaration public const JoiningGroup YehBarree Field Value Type Description JoiningGroup YehWithTail Declaration public const JoiningGroup YehWithTail Field Value Type Description JoiningGroup Yudh Declaration public const JoiningGroup Yudh Field Value Type Description JoiningGroup YudhHe Declaration public const JoiningGroup YudhHe Field Value Type Description JoiningGroup Zain Declaration public const JoiningGroup Zain Field Value Type Description JoiningGroup Zhain Declaration public const JoiningGroup Zhain Field Value Type Description JoiningGroup"
  },
  "api/SixLabors.Fonts.Unicode.JoiningType.html": {
    "href": "api/SixLabors.Fonts.Unicode.JoiningType.html",
    "title": "Class JoiningType | C# Excel API | IronXL",
    "keywords": "Class JoiningType Inheritance System.Object JoiningType Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class JoiningType : Enum Fields DualJoining Declaration public const JoiningType DualJoining Field Value Type Description JoiningType JoinCausing Declaration public const JoiningType JoinCausing Field Value Type Description JoiningType LeftJoining Declaration public const JoiningType LeftJoining Field Value Type Description JoiningType NonJoining Declaration public const JoiningType NonJoining Field Value Type Description JoiningType RightJoining Declaration public const JoiningType RightJoining Field Value Type Description JoiningType Transparent Declaration public const JoiningType Transparent Field Value Type Description JoiningType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.Unicode.LineBreakClass.html": {
    "href": "api/SixLabors.Fonts.Unicode.LineBreakClass.html",
    "title": "Class LineBreakClass | C# Excel API | IronXL",
    "keywords": "Class LineBreakClass Inheritance System.Object LineBreakClass Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class LineBreakClass : Enum Fields AI Declaration public const LineBreakClass AI Field Value Type Description LineBreakClass AL Declaration public const LineBreakClass AL Field Value Type Description LineBreakClass B2 Declaration public const LineBreakClass B2 Field Value Type Description LineBreakClass BA Declaration public const LineBreakClass BA Field Value Type Description LineBreakClass BB Declaration public const LineBreakClass BB Field Value Type Description LineBreakClass BK Declaration public const LineBreakClass BK Field Value Type Description LineBreakClass CB Declaration public const LineBreakClass CB Field Value Type Description LineBreakClass CJ Declaration public const LineBreakClass CJ Field Value Type Description LineBreakClass CL Declaration public const LineBreakClass CL Field Value Type Description LineBreakClass CM Declaration public const LineBreakClass CM Field Value Type Description LineBreakClass CP Declaration public const LineBreakClass CP Field Value Type Description LineBreakClass CR Declaration public const LineBreakClass CR Field Value Type Description LineBreakClass EB Declaration public const LineBreakClass EB Field Value Type Description LineBreakClass EM Declaration public const LineBreakClass EM Field Value Type Description LineBreakClass EX Declaration public const LineBreakClass EX Field Value Type Description LineBreakClass GL Declaration public const LineBreakClass GL Field Value Type Description LineBreakClass H2 Declaration public const LineBreakClass H2 Field Value Type Description LineBreakClass H3 Declaration public const LineBreakClass H3 Field Value Type Description LineBreakClass HL Declaration public const LineBreakClass HL Field Value Type Description LineBreakClass HY Declaration public const LineBreakClass HY Field Value Type Description LineBreakClass ID Declaration public const LineBreakClass ID Field Value Type Description LineBreakClass IN Declaration public const LineBreakClass IN Field Value Type Description LineBreakClass IS Declaration public const LineBreakClass IS Field Value Type Description LineBreakClass JL Declaration public const LineBreakClass JL Field Value Type Description LineBreakClass JT Declaration public const LineBreakClass JT Field Value Type Description LineBreakClass JV Declaration public const LineBreakClass JV Field Value Type Description LineBreakClass LF Declaration public const LineBreakClass LF Field Value Type Description LineBreakClass NL Declaration public const LineBreakClass NL Field Value Type Description LineBreakClass NS Declaration public const LineBreakClass NS Field Value Type Description LineBreakClass NU Declaration public const LineBreakClass NU Field Value Type Description LineBreakClass OP Declaration public const LineBreakClass OP Field Value Type Description LineBreakClass PO Declaration public const LineBreakClass PO Field Value Type Description LineBreakClass PR Declaration public const LineBreakClass PR Field Value Type Description LineBreakClass QU Declaration public const LineBreakClass QU Field Value Type Description LineBreakClass RI Declaration public const LineBreakClass RI Field Value Type Description LineBreakClass SA Declaration public const LineBreakClass SA Field Value Type Description LineBreakClass SG Declaration public const LineBreakClass SG Field Value Type Description LineBreakClass SP Declaration public const LineBreakClass SP Field Value Type Description LineBreakClass SY Declaration public const LineBreakClass SY Field Value Type Description LineBreakClass value__ Declaration public uint value__ Field Value Type Description System.UInt32 WJ Declaration public const LineBreakClass WJ Field Value Type Description LineBreakClass XX Declaration public const LineBreakClass XX Field Value Type Description LineBreakClass ZW Declaration public const LineBreakClass ZW Field Value Type Description LineBreakClass ZWJ Declaration public const LineBreakClass ZWJ Field Value Type Description LineBreakClass"
  },
  "api/SixLabors.Fonts.Unicode.MemoryExtensions.html": {
    "href": "api/SixLabors.Fonts.Unicode.MemoryExtensions.html",
    "title": "Class MemoryExtensions | C# Excel API | IronXL",
    "keywords": "Class MemoryExtensions Inheritance System.Object MemoryExtensions Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public static class MemoryExtensions : Object Methods EnumerateCodePoints(fkgnnf<Char>) Declaration public static SpanCodePointEnumerator EnumerateCodePoints(this fkgnnf<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > span Returns Type Description SpanCodePointEnumerator EnumerateCodePoints(fkgnng<Char>) Declaration public static SpanCodePointEnumerator EnumerateCodePoints(this fkgnng<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnng < System.Char > span Returns Type Description SpanCodePointEnumerator EnumerateGraphemes(fkgnnf<Char>) Declaration public static SpanGraphemeEnumerator EnumerateGraphemes(this fkgnnf<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > span Returns Type Description SpanGraphemeEnumerator EnumerateGraphemes(fkgnng<Char>) Declaration public static SpanGraphemeEnumerator EnumerateGraphemes(this fkgnng<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnng < System.Char > span Returns Type Description SpanGraphemeEnumerator GetCodePointCount(fkgnnf<Char>) Declaration public static int GetCodePointCount(this fkgnnf<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > span Returns Type Description System.Int32 GetCodePointCount(fkgnng<Char>) Declaration public static int GetCodePointCount(this fkgnng<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnng < System.Char > span Returns Type Description System.Int32 GetCodePointCount(String) Declaration public static int GetCodePointCount(this string text) Parameters Type Name Description System.String text Returns Type Description System.Int32 GetGraphemeCount(fkgnnf<Char>) Declaration public static int GetGraphemeCount(this fkgnnf<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > span Returns Type Description System.Int32 GetGraphemeCount(fkgnng<Char>) Declaration public static int GetGraphemeCount(this fkgnng<char> span) Parameters Type Name Description Iron.Excel.Extensions.fkgnng < System.Char > span Returns Type Description System.Int32 GetGraphemeCount(String) Declaration public static int GetGraphemeCount(this string text) Parameters Type Name Description System.String text Returns Type Description System.Int32"
  },
  "api/SixLabors.Fonts.Unicode.ScriptClass.html": {
    "href": "api/SixLabors.Fonts.Unicode.ScriptClass.html",
    "title": "Class ScriptClass | C# Excel API | IronXL",
    "keywords": "Class ScriptClass Inheritance System.Object ScriptClass Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class ScriptClass : Enum Fields Adlam Declaration public const ScriptClass Adlam Field Value Type Description ScriptClass Ahom Declaration public const ScriptClass Ahom Field Value Type Description ScriptClass AnatolianHieroglyphs Declaration public const ScriptClass AnatolianHieroglyphs Field Value Type Description ScriptClass Arabic Declaration public const ScriptClass Arabic Field Value Type Description ScriptClass Armenian Declaration public const ScriptClass Armenian Field Value Type Description ScriptClass Avestan Declaration public const ScriptClass Avestan Field Value Type Description ScriptClass Balinese Declaration public const ScriptClass Balinese Field Value Type Description ScriptClass Bamum Declaration public const ScriptClass Bamum Field Value Type Description ScriptClass BassaVah Declaration public const ScriptClass BassaVah Field Value Type Description ScriptClass Batak Declaration public const ScriptClass Batak Field Value Type Description ScriptClass Bengali Declaration public const ScriptClass Bengali Field Value Type Description ScriptClass Bhaiksuki Declaration public const ScriptClass Bhaiksuki Field Value Type Description ScriptClass Bopomofo Declaration public const ScriptClass Bopomofo Field Value Type Description ScriptClass Brahmi Declaration public const ScriptClass Brahmi Field Value Type Description ScriptClass Braille Declaration public const ScriptClass Braille Field Value Type Description ScriptClass Buginese Declaration public const ScriptClass Buginese Field Value Type Description ScriptClass Buhid Declaration public const ScriptClass Buhid Field Value Type Description ScriptClass CanadianAboriginal Declaration public const ScriptClass CanadianAboriginal Field Value Type Description ScriptClass Carian Declaration public const ScriptClass Carian Field Value Type Description ScriptClass CaucasianAlbanian Declaration public const ScriptClass CaucasianAlbanian Field Value Type Description ScriptClass Chakma Declaration public const ScriptClass Chakma Field Value Type Description ScriptClass Cham Declaration public const ScriptClass Cham Field Value Type Description ScriptClass Cherokee Declaration public const ScriptClass Cherokee Field Value Type Description ScriptClass Chorasmian Declaration public const ScriptClass Chorasmian Field Value Type Description ScriptClass Common Declaration public const ScriptClass Common Field Value Type Description ScriptClass Coptic Declaration public const ScriptClass Coptic Field Value Type Description ScriptClass Cuneiform Declaration public const ScriptClass Cuneiform Field Value Type Description ScriptClass Cypriot Declaration public const ScriptClass Cypriot Field Value Type Description ScriptClass CyproMinoan Declaration public const ScriptClass CyproMinoan Field Value Type Description ScriptClass Cyrillic Declaration public const ScriptClass Cyrillic Field Value Type Description ScriptClass Deseret Declaration public const ScriptClass Deseret Field Value Type Description ScriptClass Devanagari Declaration public const ScriptClass Devanagari Field Value Type Description ScriptClass DivesAkuru Declaration public const ScriptClass DivesAkuru Field Value Type Description ScriptClass Dogra Declaration public const ScriptClass Dogra Field Value Type Description ScriptClass Duployan Declaration public const ScriptClass Duployan Field Value Type Description ScriptClass EgyptianHieroglyphs Declaration public const ScriptClass EgyptianHieroglyphs Field Value Type Description ScriptClass Elbasan Declaration public const ScriptClass Elbasan Field Value Type Description ScriptClass Elymaic Declaration public const ScriptClass Elymaic Field Value Type Description ScriptClass Ethiopic Declaration public const ScriptClass Ethiopic Field Value Type Description ScriptClass Georgian Declaration public const ScriptClass Georgian Field Value Type Description ScriptClass Glagolitic Declaration public const ScriptClass Glagolitic Field Value Type Description ScriptClass Gothic Declaration public const ScriptClass Gothic Field Value Type Description ScriptClass Grantha Declaration public const ScriptClass Grantha Field Value Type Description ScriptClass Greek Declaration public const ScriptClass Greek Field Value Type Description ScriptClass Gujarati Declaration public const ScriptClass Gujarati Field Value Type Description ScriptClass GunjalaGondi Declaration public const ScriptClass GunjalaGondi Field Value Type Description ScriptClass Gurmukhi Declaration public const ScriptClass Gurmukhi Field Value Type Description ScriptClass Han Declaration public const ScriptClass Han Field Value Type Description ScriptClass Hangul Declaration public const ScriptClass Hangul Field Value Type Description ScriptClass HanifiRohingya Declaration public const ScriptClass HanifiRohingya Field Value Type Description ScriptClass Hanunoo Declaration public const ScriptClass Hanunoo Field Value Type Description ScriptClass Hatran Declaration public const ScriptClass Hatran Field Value Type Description ScriptClass Hebrew Declaration public const ScriptClass Hebrew Field Value Type Description ScriptClass Hiragana Declaration public const ScriptClass Hiragana Field Value Type Description ScriptClass ImperialAramaic Declaration public const ScriptClass ImperialAramaic Field Value Type Description ScriptClass Inherited Declaration public const ScriptClass Inherited Field Value Type Description ScriptClass InscriptionalPahlavi Declaration public const ScriptClass InscriptionalPahlavi Field Value Type Description ScriptClass InscriptionalParthian Declaration public const ScriptClass InscriptionalParthian Field Value Type Description ScriptClass Javanese Declaration public const ScriptClass Javanese Field Value Type Description ScriptClass Kaithi Declaration public const ScriptClass Kaithi Field Value Type Description ScriptClass Kannada Declaration public const ScriptClass Kannada Field Value Type Description ScriptClass Katakana Declaration public const ScriptClass Katakana Field Value Type Description ScriptClass KatakanaOrHiragana Declaration public const ScriptClass KatakanaOrHiragana Field Value Type Description ScriptClass KayahLi Declaration public const ScriptClass KayahLi Field Value Type Description ScriptClass Kharoshthi Declaration public const ScriptClass Kharoshthi Field Value Type Description ScriptClass KhitanSmallScript Declaration public const ScriptClass KhitanSmallScript Field Value Type Description ScriptClass Khmer Declaration public const ScriptClass Khmer Field Value Type Description ScriptClass Khojki Declaration public const ScriptClass Khojki Field Value Type Description ScriptClass Khudawadi Declaration public const ScriptClass Khudawadi Field Value Type Description ScriptClass Lao Declaration public const ScriptClass Lao Field Value Type Description ScriptClass Latin Declaration public const ScriptClass Latin Field Value Type Description ScriptClass Lepcha Declaration public const ScriptClass Lepcha Field Value Type Description ScriptClass Limbu Declaration public const ScriptClass Limbu Field Value Type Description ScriptClass LinearA Declaration public const ScriptClass LinearA Field Value Type Description ScriptClass LinearB Declaration public const ScriptClass LinearB Field Value Type Description ScriptClass Lisu Declaration public const ScriptClass Lisu Field Value Type Description ScriptClass Lycian Declaration public const ScriptClass Lycian Field Value Type Description ScriptClass Lydian Declaration public const ScriptClass Lydian Field Value Type Description ScriptClass Mahajani Declaration public const ScriptClass Mahajani Field Value Type Description ScriptClass Makasar Declaration public const ScriptClass Makasar Field Value Type Description ScriptClass Malayalam Declaration public const ScriptClass Malayalam Field Value Type Description ScriptClass Mandaic Declaration public const ScriptClass Mandaic Field Value Type Description ScriptClass Manichaean Declaration public const ScriptClass Manichaean Field Value Type Description ScriptClass Marchen Declaration public const ScriptClass Marchen Field Value Type Description ScriptClass MasaramGondi Declaration public const ScriptClass MasaramGondi Field Value Type Description ScriptClass Medefaidrin Declaration public const ScriptClass Medefaidrin Field Value Type Description ScriptClass MeeteiMayek Declaration public const ScriptClass MeeteiMayek Field Value Type Description ScriptClass MendeKikakui Declaration public const ScriptClass MendeKikakui Field Value Type Description ScriptClass MeroiticCursive Declaration public const ScriptClass MeroiticCursive Field Value Type Description ScriptClass MeroiticHieroglyphs Declaration public const ScriptClass MeroiticHieroglyphs Field Value Type Description ScriptClass Miao Declaration public const ScriptClass Miao Field Value Type Description ScriptClass Modi Declaration public const ScriptClass Modi Field Value Type Description ScriptClass Mongolian Declaration public const ScriptClass Mongolian Field Value Type Description ScriptClass Mro Declaration public const ScriptClass Mro Field Value Type Description ScriptClass Multani Declaration public const ScriptClass Multani Field Value Type Description ScriptClass Myanmar Declaration public const ScriptClass Myanmar Field Value Type Description ScriptClass Nabataean Declaration public const ScriptClass Nabataean Field Value Type Description ScriptClass Nandinagari Declaration public const ScriptClass Nandinagari Field Value Type Description ScriptClass Newa Declaration public const ScriptClass Newa Field Value Type Description ScriptClass NewTaiLue Declaration public const ScriptClass NewTaiLue Field Value Type Description ScriptClass Nko Declaration public const ScriptClass Nko Field Value Type Description ScriptClass Nushu Declaration public const ScriptClass Nushu Field Value Type Description ScriptClass NyiakengPuachueHmong Declaration public const ScriptClass NyiakengPuachueHmong Field Value Type Description ScriptClass Ogham Declaration public const ScriptClass Ogham Field Value Type Description ScriptClass OlChiki Declaration public const ScriptClass OlChiki Field Value Type Description ScriptClass OldHungarian Declaration public const ScriptClass OldHungarian Field Value Type Description ScriptClass OldItalic Declaration public const ScriptClass OldItalic Field Value Type Description ScriptClass OldNorthArabian Declaration public const ScriptClass OldNorthArabian Field Value Type Description ScriptClass OldPermic Declaration public const ScriptClass OldPermic Field Value Type Description ScriptClass OldPersian Declaration public const ScriptClass OldPersian Field Value Type Description ScriptClass OldSogdian Declaration public const ScriptClass OldSogdian Field Value Type Description ScriptClass OldSouthArabian Declaration public const ScriptClass OldSouthArabian Field Value Type Description ScriptClass OldTurkic Declaration public const ScriptClass OldTurkic Field Value Type Description ScriptClass OldUyghur Declaration public const ScriptClass OldUyghur Field Value Type Description ScriptClass Oriya Declaration public const ScriptClass Oriya Field Value Type Description ScriptClass Osage Declaration public const ScriptClass Osage Field Value Type Description ScriptClass Osmanya Declaration public const ScriptClass Osmanya Field Value Type Description ScriptClass PahawhHmong Declaration public const ScriptClass PahawhHmong Field Value Type Description ScriptClass Palmyrene Declaration public const ScriptClass Palmyrene Field Value Type Description ScriptClass PauCinHau Declaration public const ScriptClass PauCinHau Field Value Type Description ScriptClass PhagsPa Declaration public const ScriptClass PhagsPa Field Value Type Description ScriptClass Phoenician Declaration public const ScriptClass Phoenician Field Value Type Description ScriptClass PsalterPahlavi Declaration public const ScriptClass PsalterPahlavi Field Value Type Description ScriptClass Rejang Declaration public const ScriptClass Rejang Field Value Type Description ScriptClass Runic Declaration public const ScriptClass Runic Field Value Type Description ScriptClass Samaritan Declaration public const ScriptClass Samaritan Field Value Type Description ScriptClass Saurashtra Declaration public const ScriptClass Saurashtra Field Value Type Description ScriptClass Sharada Declaration public const ScriptClass Sharada Field Value Type Description ScriptClass Shavian Declaration public const ScriptClass Shavian Field Value Type Description ScriptClass Siddham Declaration public const ScriptClass Siddham Field Value Type Description ScriptClass SignWriting Declaration public const ScriptClass SignWriting Field Value Type Description ScriptClass Sinhala Declaration public const ScriptClass Sinhala Field Value Type Description ScriptClass Sogdian Declaration public const ScriptClass Sogdian Field Value Type Description ScriptClass SoraSompeng Declaration public const ScriptClass SoraSompeng Field Value Type Description ScriptClass Soyombo Declaration public const ScriptClass Soyombo Field Value Type Description ScriptClass Sundanese Declaration public const ScriptClass Sundanese Field Value Type Description ScriptClass SylotiNagri Declaration public const ScriptClass SylotiNagri Field Value Type Description ScriptClass Syriac Declaration public const ScriptClass Syriac Field Value Type Description ScriptClass Tagalog Declaration public const ScriptClass Tagalog Field Value Type Description ScriptClass Tagbanwa Declaration public const ScriptClass Tagbanwa Field Value Type Description ScriptClass TaiLe Declaration public const ScriptClass TaiLe Field Value Type Description ScriptClass TaiTham Declaration public const ScriptClass TaiTham Field Value Type Description ScriptClass TaiViet Declaration public const ScriptClass TaiViet Field Value Type Description ScriptClass Takri Declaration public const ScriptClass Takri Field Value Type Description ScriptClass Tamil Declaration public const ScriptClass Tamil Field Value Type Description ScriptClass Tangsa Declaration public const ScriptClass Tangsa Field Value Type Description ScriptClass Tangut Declaration public const ScriptClass Tangut Field Value Type Description ScriptClass Telugu Declaration public const ScriptClass Telugu Field Value Type Description ScriptClass Thaana Declaration public const ScriptClass Thaana Field Value Type Description ScriptClass Thai Declaration public const ScriptClass Thai Field Value Type Description ScriptClass Tibetan Declaration public const ScriptClass Tibetan Field Value Type Description ScriptClass Tifinagh Declaration public const ScriptClass Tifinagh Field Value Type Description ScriptClass Tirhuta Declaration public const ScriptClass Tirhuta Field Value Type Description ScriptClass Toto Declaration public const ScriptClass Toto Field Value Type Description ScriptClass Ugaritic Declaration public const ScriptClass Ugaritic Field Value Type Description ScriptClass Unknown Declaration public const ScriptClass Unknown Field Value Type Description ScriptClass Vai Declaration public const ScriptClass Vai Field Value Type Description ScriptClass value__ Declaration public int value__ Field Value Type Description System.Int32 Vithkuqi Declaration public const ScriptClass Vithkuqi Field Value Type Description ScriptClass Wancho Declaration public const ScriptClass Wancho Field Value Type Description ScriptClass WarangCiti Declaration public const ScriptClass WarangCiti Field Value Type Description ScriptClass Yezidi Declaration public const ScriptClass Yezidi Field Value Type Description ScriptClass Yi Declaration public const ScriptClass Yi Field Value Type Description ScriptClass ZanabazarSquare Declaration public const ScriptClass ZanabazarSquare Field Value Type Description ScriptClass"
  },
  "api/SixLabors.Fonts.Unicode.SpanCodePointEnumerator.html": {
    "href": "api/SixLabors.Fonts.Unicode.SpanCodePointEnumerator.html",
    "title": "Class SpanCodePointEnumerator | C# Excel API | IronXL",
    "keywords": "Class SpanCodePointEnumerator Inheritance System.Object SpanCodePointEnumerator Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class SpanCodePointEnumerator : ValueType Constructors SpanCodePointEnumerator(fkgnnf<Char>) Declaration public SpanCodePointEnumerator(fkgnnf<char> source) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > source Properties Current Declaration public CodePoint Current { get; } Property Value Type Description CodePoint Methods GetEnumerator() Declaration public SpanCodePointEnumerator GetEnumerator() Returns Type Description SpanCodePointEnumerator MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.Unicode.SpanGraphemeEnumerator.html": {
    "href": "api/SixLabors.Fonts.Unicode.SpanGraphemeEnumerator.html",
    "title": "Class SpanGraphemeEnumerator | C# Excel API | IronXL",
    "keywords": "Class SpanGraphemeEnumerator Inheritance System.Object SpanGraphemeEnumerator Namespace : SixLabors.Fonts.Unicode Assembly : IronXL.dll Syntax public sealed class SpanGraphemeEnumerator : ValueType Constructors SpanGraphemeEnumerator(fkgnnf<Char>) Declaration public SpanGraphemeEnumerator(fkgnnf<char> source) Parameters Type Name Description Iron.Excel.Extensions.fkgnnf < System.Char > source Properties Current Declaration public fkgnnf<char> Current { get; } Property Value Type Description Iron.Excel.Extensions.fkgnnf < System.Char > Methods GetEnumerator() Declaration public SpanGraphemeEnumerator GetEnumerator() Returns Type Description SpanGraphemeEnumerator MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean"
  },
  "api/SixLabors.Fonts.VerticalAlignment.html": {
    "href": "api/SixLabors.Fonts.VerticalAlignment.html",
    "title": "Class VerticalAlignment | C# Excel API | IronXL",
    "keywords": "Class VerticalAlignment Inheritance System.Object VerticalAlignment Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class VerticalAlignment : Enum Fields Bottom Declaration public const VerticalAlignment Bottom Field Value Type Description VerticalAlignment Center Declaration public const VerticalAlignment Center Field Value Type Description VerticalAlignment Top Declaration public const VerticalAlignment Top Field Value Type Description VerticalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/SixLabors.Fonts.WellKnownIds.html": {
    "href": "api/SixLabors.Fonts.WellKnownIds.html",
    "title": "Namespace SixLabors.Fonts.WellKnownIds | C# Excel API | IronXL",
    "keywords": "Namespace SixLabors.Fonts.WellKnownIds Classes KnownNameIds"
  },
  "api/SixLabors.Fonts.WellKnownIds.KnownNameIds.html": {
    "href": "api/SixLabors.Fonts.WellKnownIds.KnownNameIds.html",
    "title": "Class KnownNameIds | C# Excel API | IronXL",
    "keywords": "Class KnownNameIds Inheritance System.Object KnownNameIds Namespace : SixLabors.Fonts.WellKnownIds Assembly : IronXL.dll Syntax public sealed class KnownNameIds : Enum Fields CopyrightNotice Declaration public const KnownNameIds CopyrightNotice Field Value Type Description KnownNameIds Description Declaration public const KnownNameIds Description Field Value Type Description KnownNameIds Designer Declaration public const KnownNameIds Designer Field Value Type Description KnownNameIds DesignerUrl Declaration public const KnownNameIds DesignerUrl Field Value Type Description KnownNameIds FontFamilyName Declaration public const KnownNameIds FontFamilyName Field Value Type Description KnownNameIds FontSubfamilyName Declaration public const KnownNameIds FontSubfamilyName Field Value Type Description KnownNameIds FullFontName Declaration public const KnownNameIds FullFontName Field Value Type Description KnownNameIds LicenseDescription Declaration public const KnownNameIds LicenseDescription Field Value Type Description KnownNameIds LicenseInfoUrl Declaration public const KnownNameIds LicenseInfoUrl Field Value Type Description KnownNameIds Manufacturer Declaration public const KnownNameIds Manufacturer Field Value Type Description KnownNameIds PostscriptName Declaration public const KnownNameIds PostscriptName Field Value Type Description KnownNameIds SampleText Declaration public const KnownNameIds SampleText Field Value Type Description KnownNameIds Trademark Declaration public const KnownNameIds Trademark Field Value Type Description KnownNameIds TypographicFamilyName Declaration public const KnownNameIds TypographicFamilyName Field Value Type Description KnownNameIds TypographicSubfamilyName Declaration public const KnownNameIds TypographicSubfamilyName Field Value Type Description KnownNameIds UniqueFontID Declaration public const KnownNameIds UniqueFontID Field Value Type Description KnownNameIds value__ Declaration public ushort value__ Field Value Type Description System.UInt16 VendorUrl Declaration public const KnownNameIds VendorUrl Field Value Type Description KnownNameIds Version Declaration public const KnownNameIds Version Field Value Type Description KnownNameIds"
  },
  "api/SixLabors.Fonts.WordBreaking.html": {
    "href": "api/SixLabors.Fonts.WordBreaking.html",
    "title": "Class WordBreaking | C# Excel API | IronXL",
    "keywords": "Class WordBreaking Inheritance System.Object WordBreaking Namespace : SixLabors.Fonts Assembly : IronXL.dll Syntax public sealed class WordBreaking : Enum Fields BreakAll Declaration public const WordBreaking BreakAll Field Value Type Description WordBreaking KeepAll Declaration public const WordBreaking KeepAll Field Value Type Description WordBreaking Standard Declaration public const WordBreaking Standard Field Value Type Description WordBreaking value__ Declaration public int value__ Field Value Type Description System.Int32"
  }
}
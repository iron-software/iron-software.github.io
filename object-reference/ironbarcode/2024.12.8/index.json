{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronBarCode - The BarCode and QR Library for .NET | C# BarCode API | IronBarCode",
    "keywords": "IronBarCode - The BarCode and QR Library for .NET IronBarcode allows developers to read & write Barcodes and QR Codes within .NET Applications & websites. The .NET Barcode Library reads and writes most Barcode and QR standards. These include code 39/93/128, UPC A/E, EAN 8/13, ITF, RSS 14 / Expanded, Databar, CodaBar, Aztec, Data Matrix, MaxiCode, PDF417, MSI, Plessey, USPS, and QR. The barcode result data includes type, text, binary data, page, and image file. Barcode reading engine includes automatic image correction and barcode detection technology to take the pain out of locating and reading from imperfect scans. Multithreading, cropping, and batch scanning provides fast and accurate scanning of multi page documents. The barcode writing API checks and verifys format, length, number, checksum to automatically avoid encoding errors. Barcode writer allows for styling, resizing, margins, borders, recoloring, and adding text annotations. Barcodes can be written to image, PDF or HTML file. Key library features include: Read single or multiple Barcodes and QR Codes from images or PDFs. Image correction for skewing, orientation, noise, low resolution, contrast etc. Create barcodes and apply to images or PDF documents. Embed barcodes into html documents. Style Barcodes and add annotation text. QR Code Writing allows adding of logos, colors, and advanced QR alignment. IronBarcode can be used within C#, Visual Basic .NET, ASP .NET projects, MVC, Web Services, Console & Desktop Applications. Get Started Reading and writing barcodes only requires a single line of code with IronBarCode. Quickstart Guide: https://ironsoftware.com/csharp/barcode/ Install with NuGet: https://www.nuget.org/packages/BarCode/ Compatibility Supports applications and websites developed in: .NET 6 & .NET 5 for Windows, Linux, macOs, Docker, Azure, and AWS .NET Core 3x & 2x for Windows, Linux, MacOs and Azure .NET Standard 2 .NET Framework 4x for Windows, and Azure C# Code Examples using IronBarCode; // Create a Barcode in 1 Line of Code var myBarcode = BarcodeWriter.CreateBarcode(\"12345\", BarcodeWriterEncoding.EAN8); // Save in 1 Line of Code myBarcode.SaveAsImage(\"EAN8.jpeg\") using IronBarCode; // Read a Barcode in 1 Line of Code. var resultFromFile = BarcodeReader.Read(@\"file/barcode.png\"); var resultFromPdf = BarcodeReader.ReadPdf(@\"file/mydocument.pdf\"); // From PDF Documentation More Code Samples : https://ironsoftware.com/csharp/barcode/examples/barcode-quickstart/ API Reference : https://ironsoftware.com/csharp/barcode/object-reference/ Tutorials : https://ironsoftware.com/csharp/barcode/tutorials/reading-barcodes/ Support : developers@ironsoftware.com"
  },
  "api/IronBarCode.AdaptiveThresholdFilter.html": {
    "href": "api/IronBarCode.AdaptiveThresholdFilter.html",
    "title": "Class AdaptiveThresholdFilter | C# BarCode API | IronBarCode",
    "keywords": "Class AdaptiveThresholdFilter A filter to apply adaptive thresholding to an image. Inheritance System.Object AdaptiveThresholdFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class AdaptiveThresholdFilter : Object, IImageFilter Constructors AdaptiveThresholdFilter() Initializes a new instance of the AdaptiveThresholdFilter class. Declaration public AdaptiveThresholdFilter() AdaptiveThresholdFilter(Color, Color, Single) Initializes a new instance of the AdaptiveThresholdFilter class. Declaration public AdaptiveThresholdFilter(Color upper, Color lower, float threshold) Parameters Type Name Description IronSoftware.Drawing.Color upper The color to use for pixels that are above the threshold. IronSoftware.Drawing.Color lower The color to use for pixels that are below the threshold. System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. AdaptiveThresholdFilter(Single) Initializes a new instance of the AdaptiveThresholdFilter class. Declaration public AdaptiveThresholdFilter(float threshold) Parameters Type Name Description System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. AdaptiveThresholdFilter(Single, Color, Color, Rectangle) Initializes a new instance of the AdaptiveThresholdFilter class. Declaration public AdaptiveThresholdFilter(float threshold, Color upper, Color lower, Rectangle rectangle) Parameters Type Name Description System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. IronSoftware.Drawing.Color upper The color to use for pixels that are above the threshold. IronSoftware.Drawing.Color lower The color to use for pixels that are below the threshold. IronSoftware.Drawing.Rectangle rectangle Rectangular region to apply the threshold. AdaptiveThresholdFilter(Single, Rectangle) Initializes a new instance of the AdaptiveThresholdFilter class. Declaration public AdaptiveThresholdFilter(float threshold, Rectangle rectangle) Parameters Type Name Description System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. IronSoftware.Drawing.Rectangle rectangle Rectangular region to apply the adaptive threshold. Properties Lower The color to use for pixels that are below the threshold. Default = Black. Declaration public Color Lower { get; set; } Property Value Type Description IronSoftware.Drawing.Color Rectangle Rectangle region to apply the filter on. Declaration public Rectangle Rectangle { get; set; } Property Value Type Description IronSoftware.Drawing.Rectangle Threshold Threshold limit (0.0-1.0) to consider for binarization. Default = 1.0. Declaration public float Threshold { get; set; } Property Value Type Description System.Single Upper The color to use for pixels that are above the threshold. Default = White. Declaration public Color Upper { get; set; } Property Value Type Description IronSoftware.Drawing.Color Implements IImageFilter"
  },
  "api/IronBarCode.BarCodeAspectSide.html": {
    "href": "api/IronBarCode.BarCodeAspectSide.html",
    "title": "Class BarCodeAspectSide | C# BarCode API | IronBarCode",
    "keywords": "Class BarCodeAspectSide Chooses the side of barcode to keep aspect size using IronBarCode. This enum is related to BarCodeAspectSide with the side to keep. Inheritance System.Object BarCodeAspectSide Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class BarCodeAspectSide : Enum Fields Horizontal Keep width to the default ratio and will stretch height. Declaration public const BarCodeAspectSide Horizontal Field Value Type Description BarCodeAspectSide value__ Declaration public int value__ Field Value Type Description System.Int32 Vertical Keep height to the default ratio and will stretch width. Declaration public const BarCodeAspectSide Vertical Field Value Type Description BarCodeAspectSide"
  },
  "api/IronBarCode.BarcodeEncoding.html": {
    "href": "api/IronBarCode.BarcodeEncoding.html",
    "title": "Class BarcodeEncoding | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeEncoding Barcode Encoding Types. Setting a BarcodeEncoding when reading Barcodes improves performance by only looking for expected barcode types. Setting a BarcodeEncoding when rendering Barcodes chooses the type and design of barcode to be generated. For barcode creation please also see the BarcodeWriterEncoding Enum which omits barcode formats which are not writable with IronBarCode. Inheritance System.Object BarcodeEncoding Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class BarcodeEncoding : Enum Fields All Read any type of Barcode within the BarcodeEncoding enum. Declaration public const BarcodeEncoding All Field Value Type Description BarcodeEncoding AllOneDimensional Read all one-dimensional (linear) types of Barcodes, including stacked one-dimensional barcodes. Declaration public const BarcodeEncoding AllOneDimensional Field Value Type Description BarcodeEncoding AllTwoDimensional Read all two-dimensional types of barcodes (grid, matrix and stacked). Declaration public const BarcodeEncoding AllTwoDimensional Field Value Type Description BarcodeEncoding Aztec Aztec 2D barcode format. Declaration public const BarcodeEncoding Aztec Field Value Type Description BarcodeEncoding Codabar Codabar 1D barcode format. Please note: Codabar encodes numerical data (digits) only. Declaration public const BarcodeEncoding Codabar Field Value Type Description BarcodeEncoding Code128 Code 128 1D format. Declaration public const BarcodeEncoding Code128 Field Value Type Description BarcodeEncoding Code128GS1 Code 128 GS1 1D Barcode format. Declaration public const BarcodeEncoding Code128GS1 Field Value Type Description BarcodeEncoding Code39 Code 39 1D barcode format. Declaration public const BarcodeEncoding Code39 Field Value Type Description BarcodeEncoding Code93 Code 93 1D barcode format. Declaration public const BarcodeEncoding Code93 Field Value Type Description BarcodeEncoding Databar GS1 Databar 1D barcode format. Formerly known as RSS-14. Declaration public const BarcodeEncoding Databar Field Value Type Description BarcodeEncoding DatabarExpanded GS1 Data Expanded 1D barcode format. Formerly known as RSS Expanded. Declaration public const BarcodeEncoding DatabarExpanded Field Value Type Description BarcodeEncoding DataMatrix Data Matrix 2D barcode format. Declaration public const BarcodeEncoding DataMatrix Field Value Type Description BarcodeEncoding EAN13 EAN-13 1D barcode format. Declaration public const BarcodeEncoding EAN13 Field Value Type Description BarcodeEncoding EAN8 EAN-8 1D barcode format. Declaration public const BarcodeEncoding EAN8 Field Value Type Description BarcodeEncoding IntelligentMail Intelligent Mail 1D Barcode format. Declaration public const BarcodeEncoding IntelligentMail Field Value Type Description BarcodeEncoding ITF Interleaved Two of Five (ITF) 1D Barcode format. Declaration public const BarcodeEncoding ITF Field Value Type Description BarcodeEncoding MaxiCode Maxicode 2D Barcode format. Declaration public const BarcodeEncoding MaxiCode Field Value Type Description BarcodeEncoding MicroQRCode Micro QR Code 2D Barcode format. Declaration public const BarcodeEncoding MicroQRCode Field Value Type Description BarcodeEncoding MSI MSI (a.k.a Modified Plessey) 1D Barcode format. Declaration public const BarcodeEncoding MSI Field Value Type Description BarcodeEncoding None Represents invalid barcode format or absence of one. Declaration public const BarcodeEncoding None Field Value Type Description BarcodeEncoding PDF417 PDF417 2D Barcode format. Declaration public const BarcodeEncoding PDF417 Field Value Type Description BarcodeEncoding Plessey Plessey 1D Barcode format. Declaration public const BarcodeEncoding Plessey Field Value Type Description BarcodeEncoding QRCode QR Code 2D Barcode format. Declaration public const BarcodeEncoding QRCode Field Value Type Description BarcodeEncoding RMQRCode Rectangular Micro QR Code (rMQR) 2D Barcode format. Declaration public const BarcodeEncoding RMQRCode Field Value Type Description BarcodeEncoding UPCA UPC-A 1D Barcode format. Declaration public const BarcodeEncoding UPCA Field Value Type Description BarcodeEncoding UPCE UPC-E 1D Barcode format. Declaration public const BarcodeEncoding UPCE Field Value Type Description BarcodeEncoding value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.BarcodeOrientation.html": {
    "href": "api/IronBarCode.BarcodeOrientation.html",
    "title": "Class BarcodeOrientation | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeOrientation Specifies the orientation of a Barcode. Inheritance System.Object BarcodeOrientation Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class BarcodeOrientation : Enum Fields Horizontal Barcode is aligned Horizontally Declaration public const BarcodeOrientation Horizontal Field Value Type Description BarcodeOrientation value__ Declaration public int value__ Field Value Type Description System.Int32 Vertical Barcode is aligned Vertically Declaration public const BarcodeOrientation Vertical Field Value Type Description BarcodeOrientation"
  },
  "api/IronBarCode.BarcodeReader.html": {
    "href": "api/IronBarCode.BarcodeReader.html",
    "title": "Class BarcodeReader | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeReader A versatile static class for reading many popular barcode formats from Images and PDFs. IronBarCode.BarcodeReader supports barcode reading from Bitmaps, Image Objects, Image Files, Image Streams, MultiFrame Tiff Images and also PDFs. Features: Crop-area support, Image filters, and preprocessing for improved accuracy including and the ability to automatically un-rotate, deskew and clean barcode image input. Inheritance System.Object BarcodeReader Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public static class BarcodeReader : Object Methods Read(AnyBitmap, BarcodeReaderOptions) Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IronSoftware.Drawing.AnyBitmap as well as System.String file paths, array of System.Byte and System.IO.Stream types. Declaration public static BarcodeResults Read(AnyBitmap inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap inputImage The input image as a IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description BarcodeResults A BarcodeResults . Read(Byte[], BarcodeReaderOptions) Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as array of System.Byte as well as IronSoftware.Drawing.AnyBitmap , string file paths and System.IO.Stream types. IEnumerable of Binary data of Image as a System.Byte array. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. A BarcodeResults . Declaration public static BarcodeResults Read(byte[] inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Byte [] inputImage BarcodeReaderOptions barcodeReaderOptions Returns Type Description BarcodeResults Read(IEnumerable<AnyBitmap>, BarcodeReaderOptions) Reads barcodes from multiple images. Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IEnumerable of System.String file paths as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.IO.Stream types. Declaration public static BarcodeResults Read(IEnumerable<AnyBitmap> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < IronSoftware.Drawing.AnyBitmap > inputImages The input images as an IEnumerable of IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description BarcodeResults An Array of . Array length will be zero if no barcodes were found. Read(IEnumerable<Byte[]>, BarcodeReaderOptions) Reads barcodes from multiple images. Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Overloads of this method accept InputImage as IEnumerable of array of System.Byte as well as IronSoftware.Drawing.AnyBitmap , string file paths and System.IO.Stream types. IEnumerable of Binary data of Image as a System.Byte array. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. A BarcodeResults . Declaration public static BarcodeResults Read(IEnumerable<byte[]> inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Byte []> inputImage BarcodeReaderOptions barcodeReaderOptions Returns Type Description BarcodeResults Read(IEnumerable<Stream>, BarcodeReaderOptions) Reads barcodes from multiple images. Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IEnumerable of System.IO.Stream as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.String file paths types. Declaration public static BarcodeResults Read(IEnumerable<Stream> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IO.Stream > inputImages The input images as an IEnumerable of System.IO.Stream . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description BarcodeResults A BarcodeResults . Read(IEnumerable<String>, BarcodeReaderOptions) Reads barcodes from multiple images. Reading in parallel should set by BarcodeReaderOptions.Multithreaded = true and multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IEnumerable of System.String file paths as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.IO.Stream types. Declaration public static BarcodeResults Read(IEnumerable<string> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > inputImages The input images as an IEnumerable of string file paths. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description BarcodeResults A BarcodeResults . Read(Stream, BarcodeReaderOptions) Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as System.IO.Stream as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.String file paths types. Declaration public static BarcodeResults Read(Stream inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.IO.Stream inputImage The input image as a System.IO.Stream . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description BarcodeResults A BarcodeResults . Read(String, BarcodeReaderOptions) Reads all barcodes from an image with granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as System.String file paths as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.IO.Stream types. Declaration public static BarcodeResults Read(string inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.String inputImage The input image as a System.String file path to an image or PDF. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description BarcodeResults A BarcodeResults . ReadAsync(AnyBitmap, BarcodeReaderOptions) Reads a barcode from an image. Features granular settings for developer control to balance performance against accuracy for their given use case. Declaration public static Task<BarcodeResults> ReadAsync(AnyBitmap inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap inputImage The input image as an IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description System.Threading.Tasks.Task < BarcodeResults > A BarcodeResults . ReadAsync(Byte[], BarcodeReaderOptions) Reads barcode from an image Features granular settings for developer control to balance performance against accuracy for their given use case. Binary data of Image as a System.Byte array. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported.. An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. A BarcodeResults . Declaration public static Task<BarcodeResults> ReadAsync(byte[] inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Byte [] inputImage BarcodeReaderOptions barcodeReaderOptions Returns Type Description System.Threading.Tasks.Task < BarcodeResults > ReadAsync(IEnumerable<AnyBitmap>, BarcodeReaderOptions) Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Declaration public static Task<BarcodeResults> ReadAsync(IEnumerable<AnyBitmap> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < IronSoftware.Drawing.AnyBitmap > inputImages The input images as an IEnumerable of IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description System.Threading.Tasks.Task < BarcodeResults > A BarcodeResults . ReadAsync(IEnumerable<Byte[]>, BarcodeReaderOptions) Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IEnumerable of array of System.Byte as well as IronSoftware.Drawing.AnyBitmap , string file paths and System.IO.Stream types. IEnumerable of Binary data of Image as a System.Byte array. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported.. An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. A BarcodeResults . Declaration public static Task<BarcodeResults> ReadAsync(IEnumerable<byte[]> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Byte []> inputImages BarcodeReaderOptions barcodeReaderOptions Returns Type Description System.Threading.Tasks.Task < BarcodeResults > ReadAsync(IEnumerable<Stream>, BarcodeReaderOptions) Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IEnumerable of System.IO.Stream as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.String file paths types. Declaration public static Task<BarcodeResults> ReadAsync(IEnumerable<Stream> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IO.Stream > inputImages The input images as an IEnumerable of System.IO.Stream . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description System.Threading.Tasks.Task < BarcodeResults > A BarcodeResults . ReadAsync(IEnumerable<String>, BarcodeReaderOptions) Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept InputImage as IEnumerable of System.String file paths as well as IronSoftware.Drawing.AnyBitmap , array of System.Byte and System.IO.Stream types. Declaration public static Task<BarcodeResults> ReadAsync(IEnumerable<string> inputImages, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > inputImages The input images as an IEnumerable of System.String file paths. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description System.Threading.Tasks.Task < BarcodeResults > A BarcodeResults . ReadAsync(Stream, BarcodeReaderOptions) Reads barcode from an image Features granular settings for developer control to balance performance against accuracy for their given use case. Declaration public static Task<BarcodeResults> ReadAsync(Stream inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.IO.Stream inputImage The input image as a System.IO.Stream . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description System.Threading.Tasks.Task < BarcodeResults > A BarcodeResults . ReadAsync(String, BarcodeReaderOptions) Reads a barcode from an image Features granular settings for developer control to balance performance against accuracy for their given use case. Declaration public static Task<BarcodeResults> ReadAsync(string inputImage, BarcodeReaderOptions barcodeReaderOptions = null) Parameters Type Name Description System.String inputImage The input image file paths. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. BarcodeReaderOptions barcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs in expected behavior. Returns Type Description System.Threading.Tasks.Task < BarcodeResults > A BarcodeResults . ReadPdf(Byte[], PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as array of System.Byte as well as System.String and System.IO.Stream types. Declaration public static BarcodeResults ReadPdf(byte[] pdfData, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Byte [] pdfData Binary data of PDF document as a System.Byte array. PdfBarcodeReaderOptions pdfBarcodeReaderOptions An Options class of PdfBarcodeReader for reading barcode from pdf. Returns Type Description BarcodeResults A BarcodeResults . ReadPdf(IEnumerable<Byte[]>, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as IEnumerable of array of System.Byte as well as System.String and System.IO.Stream types. An enumerable of Binary data of PDF document as a System.Byte array. An Options class of PdfBarcodeReader for reading barcode from pdf. A BarcodeResults . Declaration public static BarcodeResults ReadPdf(IEnumerable<byte[]> pdfData, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Byte []> pdfData PdfBarcodeReaderOptions pdfBarcodeReaderOptions Returns Type Description BarcodeResults ReadPdf(IEnumerable<Stream>, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as IEnumerable of System.IO.Stream as well as array of System.Byte and System.String file paths types. An enumerable of Binary data of PDF document as a System.IO.Stream . An Options class of PdfBarcodeReader for reading barcode from pdf. A BarcodeResults . Declaration public static BarcodeResults ReadPdf(IEnumerable<Stream> pdfStreams, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IO.Stream > pdfStreams PdfBarcodeReaderOptions pdfBarcodeReaderOptions Returns Type Description BarcodeResults ReadPdf(IEnumerable<String>, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as IEnumerable of System.String file paths as well as array of System.Byte and System.IO.Stream types. An enumerable of System.String file path to a PDF document. An Options class of PdfBarcodeReader for reading barcode from pdf. A BarcodeResults . Declaration public static BarcodeResults ReadPdf(IEnumerable<string> pdfPaths, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > pdfPaths PdfBarcodeReaderOptions pdfBarcodeReaderOptions Returns Type Description BarcodeResults ReadPdf(Stream, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as System.IO.Stream as well as array of System.Byte and System.String file paths types. Declaration public static BarcodeResults ReadPdf(Stream pdfStream, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.IO.Stream pdfStream Binary data of PDF document as a System.IO.Stream . PdfBarcodeReaderOptions pdfBarcodeReaderOptions An Options class of PdfBarcodeReader for reading barcode from pdf. Returns Type Description BarcodeResults A BarcodeResults . ReadPdf(String, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as System.String file paths as well as array of System.Byte and System.IO.Stream types. Declaration public static BarcodeResults ReadPdf(string pdfPath, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.String pdfPath System.String file path to a PDF document. PdfBarcodeReaderOptions pdfBarcodeReaderOptions An Options class of PdfBarcodeReader for reading barcode from pdf. Returns Type Description BarcodeResults A BarcodeResults . ReadPdfAsync(IEnumerable<Byte[]>, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as IEnumerable of array of System.Byte as well as System.String and System.IO.Stream types. An enumerable of Binary data of PDF document as a System.Byte array. An Options class of PdfBarcodeReader for reading barcode from pdf. A BarcodeResults . Declaration public static Task<BarcodeResults> ReadPdfAsync(IEnumerable<byte[]> pdfData, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Byte []> pdfData PdfBarcodeReaderOptions pdfBarcodeReaderOptions Returns Type Description System.Threading.Tasks.Task < BarcodeResults > ReadPdfAsync(IEnumerable<Stream>, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as IEnumerable of System.IO.Stream as well as array of System.Byte and System.String file paths types. An enumerable of Binary data of PDF document as a System.IO.Stream . An Options class of PdfBarcodeReader for reading barcode from pdf. A BarcodeResults . Declaration public static Task<BarcodeResults> ReadPdfAsync(IEnumerable<Stream> pdfStreams, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IO.Stream > pdfStreams PdfBarcodeReaderOptions pdfBarcodeReaderOptions Returns Type Description System.Threading.Tasks.Task < BarcodeResults > ReadPdfAsync(IEnumerable<String>, PdfBarcodeReaderOptions) Reads barcodes from every image embedded in every page of a PDF document. Features granular settings for developer control to balance performance against accuracy for their given use case. Overloads of this method accept PdfData as IEnumerable of System.String file paths as well as array of System.Byte and System.IO.Stream types. An enumerable of string file path to a PDF document. An Options class of PdfBarcodeReader for reading barcode from pdf. A BarcodeResults . Declaration public static Task<BarcodeResults> ReadPdfAsync(IEnumerable<string> pdfPaths, PdfBarcodeReaderOptions pdfBarcodeReaderOptions = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > pdfPaths PdfBarcodeReaderOptions pdfBarcodeReaderOptions Returns Type Description System.Threading.Tasks.Task < BarcodeResults >"
  },
  "api/IronBarCode.BarcodeReaderOptions.html": {
    "href": "api/IronBarCode.BarcodeReaderOptions.html",
    "title": "Class BarcodeReaderOptions | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs. Inheritance System.Object BarcodeReaderOptions PdfBarcodeReaderOptions Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class BarcodeReaderOptions : Object Constructors BarcodeReaderOptions() Initializes a new instance of the BarcodeReader class. Declaration public BarcodeReaderOptions() Properties AutoRotate Toggle whether to automatically rotate barcodes or not in an ML detection. Default = true. Declaration public bool AutoRotate { get; set; } Property Value Type Description System.Boolean ConfidenceThreshold Minimum confidence level for ML model detection to be considered valid. The value is between (0.0, 1.0). Default value is 0.7 Declaration public double ConfidenceThreshold { get; set; } Property Value Type Description System.Double CropArea The area of each image frame in which to scan for barcodes. A IronSoftware.Drawing.Rectangle measured in pixels. Declaration public Rectangle CropArea { get; set; } Property Value Type Description IronSoftware.Drawing.Rectangle ExpectBarcodeTypes The barcode encoding types to read from the InputImage. By default all supported barcodes types are scanned for. Declaration public BarcodeEncoding ExpectBarcodeTypes { get; set; } Property Value Type Description BarcodeEncoding ExpectMultipleBarcodes If set to false the barcode reader will stop scanning a given image once a barcode has been found to increase performance. Default = true. Declaration public bool ExpectMultipleBarcodes { get; set; } Property Value Type Description System.Boolean ImageFilters A collection of image filters for image pre-processing. Declaration public ImageFilterCollection ImageFilters { get; set; } Property Value Type Description ImageFilterCollection MaxParallelThreads Max Threads for parallel. Default 4 Declaration public int MaxParallelThreads { get; set; } Property Value Type Description System.Int32 Multithreaded Reads barcodes from multiple images in parallel. Multiple threads will automatically be started and managed to improve performance for batch barcode reading tasks. Declaration public bool Multithreaded { get; set; } Property Value Type Description System.Boolean RemoveFalsePositive Attempt to remove false positive barcode reads. This can be disabled to improve performance at the cost of accuracy. Default = true. Declaration public bool RemoveFalsePositive { get; set; } Property Value Type Description System.Boolean ScanMode Define how IronBarcode scans and detects barcodes in an image to read. Declaration public BarcodeScanMode ScanMode { get; set; } Property Value Type Description BarcodeScanMode Speed Barcode reading speed. Default = Balanced. Declaration public ReadingSpeed Speed { get; set; } Property Value Type Description ReadingSpeed UseCode39ExtendedMode If a Code39 barcode is detected, use the extended mode for the full ASCII character set. Declaration public bool UseCode39ExtendedMode { get; set; } Property Value Type Description System.Boolean"
  },
  "api/IronBarCode.BarcodeResult.html": {
    "href": "api/IronBarCode.BarcodeResult.html",
    "title": "Class BarcodeResult | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeResult Result from reading a barcode using IronBarCode Inheritance System.Object BarcodeResult Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class BarcodeResult : Object Constructors BarcodeResult() Initializes a new instance of the BarcodeResults class. Declaration public BarcodeResult() BarcodeResult(PointF[], String) Initializes a new instance of the BarcodeResults class. Declaration public BarcodeResult(PointF[] points, string value) Parameters Type Name Description IronSoftware.Drawing.PointF [] points System.String value Properties BarcodeImage An image of the scanned barcode image as a IronSoftware.Drawing.AnyBitmap . This IronSoftware.Drawing.AnyBitmap will be disposed when the BarcodeResult finalizes. If you wish to keep a permanent copy of the BarcodeImage use the (Bitmap)BarcodeResult.BarcodeImage.Clone() method. Declaration public AnyBitmap BarcodeImage { get; } Property Value Type Description IronSoftware.Drawing.AnyBitmap An image of the barcode which was read. BarcodeType The BarcodeEncoding (barcode type) which was detected Declaration public BarcodeEncoding BarcodeType { get; } Property Value Type Description BarcodeEncoding BinaryValue The binary value of the barcode as a byte array. Declaration public byte[] BinaryValue { get; } Property Value Type Description System.Byte [] Height A Barcode Height Declaration public Nullable<int> Height { get; } Property Value Type Description System.Nullable < System.Int32 > PageNumber The page number of the PDF or Image in which the barcode was discovered. The page numbers are 1-based indexed, meaning the first page is '1' rather than '0'. Declaration public int PageNumber { get; } Property Value Type Description System.Int32 PageOrientation A Page orientation of input image. Declaration public PageOrientation PageOrientation { get; } Property Value Type Description PageOrientation Points Points defining the corners of the detected barcode code. Declaration public PointF[] Points { get; } Property Value Type Description IronSoftware.Drawing.PointF [] Rotation Clockwise rotation of the barcode from a horizontal position. Setting AutoRotate to true in BarcodeReaderOptions gives the angle in multiples of 15, while setting it to false gives it in multiples of 90. Null signifies the orientation was not found. Declaration public Nullable<int> Rotation { get; } Property Value Type Description System.Nullable < System.Int32 > Text The value of the barcode as a string. Synonym for BarcodeResult.Value Declaration public string Text { get; } Property Value Type Description System.String Url Gets the URI if the Value is a valid URI. Declaration public Uri Url { get; } Property Value Type Description System.Uri Value The value of the barcode as a string. Declaration public string Value { get; } Property Value Type Description System.String Width A Barcode Width Declaration public Nullable<int> Width { get; } Property Value Type Description System.Nullable < System.Int32 > Methods ToString() Returns a System.String that represents the value of the barcode as a string; Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance."
  },
  "api/IronBarCode.BarcodeResultPosition.html": {
    "href": "api/IronBarCode.BarcodeResultPosition.html",
    "title": "Class BarcodeResultPosition | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeResultPosition Represents the position of the detected barcode code in the image. Inheritance System.Object BarcodeResultPosition Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class BarcodeResultPosition : ValueType Constructors BarcodeResultPosition(PointF[]) Initializes a new instance of the BarcodeResultPosition structure. Declaration public BarcodeResultPosition(PointF[] points) Parameters Type Name Description IronSoftware.Drawing.PointF [] points An array of points that define the position. Fields Points An array of points that define the position. Declaration public readonly PointF[] Points Field Value Type Description IronSoftware.Drawing.PointF []"
  },
  "api/IronBarCode.BarcodeResults.html": {
    "href": "api/IronBarCode.BarcodeResults.html",
    "title": "Class BarcodeResults | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeResults Result from reading a barcode as IList using IronBarCode Inheritance System.Object BarcodeResults Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class BarcodeResults : List<BarcodeResult> Methods ExportFilterImagesToDisk(String) Export the processed image from a collection of ImageFilter to the specified file. Declaration public void ExportFilterImagesToDisk(string filename) Parameters Type Name Description System.String filename A string that contains the name of the file to which to save this Image. FilterImages() Return all images that applies the filter. Declaration public AnyBitmap[] FilterImages() Returns Type Description IronSoftware.Drawing.AnyBitmap [] Values() Return all values of the collection of BarcodeResult. Declaration public string[] Values() Returns Type Description System.String []"
  },
  "api/IronBarCode.BarcodeScanMode.html": {
    "href": "api/IronBarCode.BarcodeScanMode.html",
    "title": "Class BarcodeScanMode | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeScanMode Define how IronBarcode scans and detects barcodes in an image to read. Inheritance System.Object BarcodeScanMode Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class BarcodeScanMode : Enum Fields Auto Reads barcodes with most optimal reader configurations automatically applied. Recommended for the best results and performance. Declaration public const BarcodeScanMode Auto Field Value Type Description BarcodeScanMode MachineLearningScan Scan image for barcodes with machine learning detection and read them. Declaration public const BarcodeScanMode MachineLearningScan Field Value Type Description BarcodeScanMode OnlyBasicScan Read barcodes without machine learning detection or automatic image pre-processing and reader option configuration. This option can be used with IronBarCode.Slim alone. Declaration public const BarcodeScanMode OnlyBasicScan Field Value Type Description BarcodeScanMode OnlyDetectionModel Scan image for barcodes and return their positions as an array of IronSoftware.Drawing.PointF . This mode does not read the detected barcodes, it only returns the positions of each barcode. Declaration public const BarcodeScanMode OnlyDetectionModel Field Value Type Description BarcodeScanMode value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.BarcodeWriter.html": {
    "href": "api/IronBarCode.BarcodeWriter.html",
    "title": "Class BarcodeWriter | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeWriter A static class allowing for barcode images of many types to be generated dynamically. Generated Barcodes can be exported as Images, Bitmaps, Files, PDFs and Streams. Inheritance System.Object BarcodeWriter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public static class BarcodeWriter : Object Fields DefaultCharacterEncoding The default character encoding for binary data. Declaration public static string DefaultCharacterEncoding Field Value Type Description System.String DefaultHeight The default max height of a rendered barcode in pixels. 250px Declaration public static int DefaultHeight Field Value Type Description System.Int32 DefaultWidth The default max width of a rendered barcode in pixels. 250px Declaration public static int DefaultWidth Field Value Type Description System.Int32 Methods CreateBarcode(Byte[], BarcodeEncoding) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(byte[] binaryData, BarcodeEncoding barcodeType) Parameters Type Name Description System.Byte [] binaryData The binary data which the barcode will represent. BarcodeEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Byte[], BarcodeEncoding, Int32, Int32) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(byte[] binaryData, BarcodeEncoding barcodeType, int maxWidth, int maxHeight) Parameters Type Name Description System.Byte [] binaryData The binary data which the barcode will represent. BarcodeEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. System.Int32 maxWidth The maximum width (in pixels) of the barcode image which will be rendered. System.Int32 maxHeight The maximum height (in pixels) of the barcode image which will be rendered. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Byte[], BarcodeWriterEncoding) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(byte[] binaryData, BarcodeWriterEncoding barcodeType) Parameters Type Name Description System.Byte [] binaryData The binary data which the barcode will represent. BarcodeWriterEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Byte[], BarcodeWriterEncoding, Int32, Int32) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(byte[] binaryData, BarcodeWriterEncoding barcodeType, int maxWidth, int maxHeight) Parameters Type Name Description System.Byte [] binaryData The binary data which the barcode will represent. BarcodeWriterEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. System.Int32 maxWidth The maximum width (in pixels) of the barcode image which will be rendered. System.Int32 maxHeight The maximum height (in pixels) of the barcode image which will be rendered. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Stream, BarcodeEncoding) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(Stream binaryDataStream, BarcodeEncoding barcodeType) Parameters Type Name Description System.IO.Stream binaryDataStream The binary data stream which the barcode will represent. BarcodeEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Stream, BarcodeEncoding, Int32, Int32) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(Stream binaryDataStream, BarcodeEncoding barcodeType, int maxWidth, int maxHeight) Parameters Type Name Description System.IO.Stream binaryDataStream The binary data stream which the barcode will represent. BarcodeEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. System.Int32 maxWidth The maximum width (in pixels) of the barcode image which will be rendered. System.Int32 maxHeight The maximum height (in pixels) of the barcode image which will be rendered. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Stream, BarcodeWriterEncoding) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(Stream binaryDataStream, BarcodeWriterEncoding barcodeType) Parameters Type Name Description System.IO.Stream binaryDataStream The binary data stream which the barcode will represent. BarcodeWriterEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(Stream, BarcodeWriterEncoding, Int32, Int32) Creates (renders) a barcode representing a binary value. Declaration public static GeneratedBarcode CreateBarcode(Stream binaryDataStream, BarcodeWriterEncoding barcodeType, int maxWidth, int maxHeight) Parameters Type Name Description System.IO.Stream binaryDataStream The binary data stream which the barcode will represent. BarcodeWriterEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. System.Int32 maxWidth The maximum width (in pixels) of the barcode image which will be rendered. System.Int32 maxHeight The maximum height (in pixels) of the barcode image which will be rendered. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(String, BarcodeEncoding) Creates (renders) a barcode representing a string value. Declaration public static GeneratedBarcode CreateBarcode(string value, BarcodeEncoding barcodeType) Parameters Type Name Description System.String value The value of the barcode as a string. BarcodeEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(String, BarcodeEncoding, Int32, Int32) Creates (renders) a barcode representing a string value. Declaration public static GeneratedBarcode CreateBarcode(string value, BarcodeEncoding barcodeType, int maxWidth, int maxHeight) Parameters Type Name Description System.String value The value of the barcode as a string. BarcodeEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. System.Int32 maxWidth The maximum width (in pixels) of the barcode image which will be rendered. System.Int32 maxHeight The maximum height (in pixels) of the barcode image which will be rendered. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(String, BarcodeWriterEncoding) Creates (renders) a barcode representing a string value. Declaration public static GeneratedBarcode CreateBarcode(string value, BarcodeWriterEncoding barcodeType) Parameters Type Name Description System.String value The value of the barcode as a string. BarcodeWriterEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream. CreateBarcode(String, BarcodeWriterEncoding, Int32, Int32) Creates (renders) a barcode representing a string value. Declaration public static GeneratedBarcode CreateBarcode(string value, BarcodeWriterEncoding barcodeType, int maxWidth, int maxHeight) Parameters Type Name Description System.String value The value of the barcode as a string. BarcodeWriterEncoding barcodeType Type of the barcode encoding type. Supports many popular barcode formats including QR Codes. System.Int32 maxWidth The maximum width (in pixels) of the barcode image which will be rendered. System.Int32 maxHeight The maximum height (in pixels) of the barcode image which will be rendered. Returns Type Description GeneratedBarcode A GeneratedBarcode object which can be manipulated, annotated and saved to a IronSoftware.Drawing.AnyBitmap, an object, image file, PDF, MediaURL or data stream."
  },
  "api/IronBarCode.BarcodeWriterEncoding.html": {
    "href": "api/IronBarCode.BarcodeWriterEncoding.html",
    "title": "Class BarcodeWriterEncoding | C# BarCode API | IronBarCode",
    "keywords": "Class BarcodeWriterEncoding Chooses the style of barcode to render as an image using IronBarCode. This enum is related to BarcodeEncoding with the exception that only encodable barcode formats are mentioned. As this Enum is not of the Flags type, only one BarcodeWriterEncoding can be used to generate a barcode. Inheritance System.Object BarcodeWriterEncoding Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class BarcodeWriterEncoding : Enum Fields Aztec Aztec 2D barcode format. Declaration public const BarcodeWriterEncoding Aztec Field Value Type Description BarcodeWriterEncoding Codabar Codabar 1D barcode format. Please note: Codabar encodes numerical data (digits) only. Declaration public const BarcodeWriterEncoding Codabar Field Value Type Description BarcodeWriterEncoding Code128 Code 128 1D format. Declaration public const BarcodeWriterEncoding Code128 Field Value Type Description BarcodeWriterEncoding Code128GS1 Code 128 GS1 1D Barcode format. Declaration public const BarcodeWriterEncoding Code128GS1 Field Value Type Description BarcodeWriterEncoding Code39 Code 39 1D barcode format. Declaration public const BarcodeWriterEncoding Code39 Field Value Type Description BarcodeWriterEncoding Code93 Code 93 1D barcode format. Code 93 supports encoding with only the following ASCII characters: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9 - . $ / + % SPACE Declaration public const BarcodeWriterEncoding Code93 Field Value Type Description BarcodeWriterEncoding DataBar GS1 Databar 1D barcode format. Formerly known as RSS-14. Declaration public const BarcodeWriterEncoding DataBar Field Value Type Description BarcodeWriterEncoding DataBarExpanded GS1 Data Expanded 1D barcode format. Formerly known as RSS Expanded. Declaration public const BarcodeWriterEncoding DataBarExpanded Field Value Type Description BarcodeWriterEncoding DataMatrix Data Matrix 2D barcode format. Declaration public const BarcodeWriterEncoding DataMatrix Field Value Type Description BarcodeWriterEncoding EAN13 EAN-13 1D barcode format. Declaration public const BarcodeWriterEncoding EAN13 Field Value Type Description BarcodeWriterEncoding EAN8 EAN-8 1D barcode format. Please Note: EAN-8 may only encode numerical (digits) content of length 7 or 8 digits long. Shorter Barcodes will have trailing zeros (000) prepended to the start of the number automatically. Declaration public const BarcodeWriterEncoding EAN8 Field Value Type Description BarcodeWriterEncoding IntelligentMail Intelligent Mail 1D Barcode format. Declaration public const BarcodeWriterEncoding IntelligentMail Field Value Type Description BarcodeWriterEncoding ITF Interleaved Two of Five (ITF) 1D Barcode format. Declaration public const BarcodeWriterEncoding ITF Field Value Type Description BarcodeWriterEncoding MaxiCode Maxicode 2D Barcode format. Declaration public const BarcodeWriterEncoding MaxiCode Field Value Type Description BarcodeWriterEncoding MicroQRCode Micro QR Code 2D Barcode format. Declaration public const BarcodeWriterEncoding MicroQRCode Field Value Type Description BarcodeWriterEncoding MSI MSI (a.k.a Modified Plessey) 1D Barcode format. Declaration public const BarcodeWriterEncoding MSI Field Value Type Description BarcodeWriterEncoding PDF417 PDF417 2D Barcode format. Declaration public const BarcodeWriterEncoding PDF417 Field Value Type Description BarcodeWriterEncoding Plessey Plessey 1D Barcode format. Declaration public const BarcodeWriterEncoding Plessey Field Value Type Description BarcodeWriterEncoding QRCode QR Code 2D Barcode format. Declaration public const BarcodeWriterEncoding QRCode Field Value Type Description BarcodeWriterEncoding RMQRCode Rectangular Micro QR Code (rMQR) 2D Barcode format. Declaration public const BarcodeWriterEncoding RMQRCode Field Value Type Description BarcodeWriterEncoding UPCA UPC-A 1D Barcode format. Declaration public const BarcodeWriterEncoding UPCA Field Value Type Description BarcodeWriterEncoding UPCE UPC-E 1D Barcode format. Declaration public const BarcodeWriterEncoding UPCE Field Value Type Description BarcodeWriterEncoding value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.BilateralFilter.html": {
    "href": "api/IronBarCode.BilateralFilter.html",
    "title": "Class BilateralFilter | C# BarCode API | IronBarCode",
    "keywords": "Class BilateralFilter A filter to apply bilateral smoothing to an image. Inheritance System.Object BilateralFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class BilateralFilter : Object, IImageFilter Constructors BilateralFilter() Initializes a new instance of the BilateralFilter class. Declaration public BilateralFilter() BilateralFilter(Int32, Single, Single) Initializes a new instance of the BilateralFilter class. Declaration public BilateralFilter(int neighborhoodDiameter, float sigmaColor, float sigmaSpace) Parameters Type Name Description System.Int32 neighborhoodDiameter Diameter of the pixel neighborhood used for filtering. System.Single sigmaColor 'Sigma' value representing the \"weight\" of how pixels will influence each other, based on color. System.Single sigmaSpace 'Sigma' value representing the \"weight\" of how pixels will influence each other, based on distance. Properties NeighborhoodDiameter Diameter of the pixel neighborhood used for filtering. Default = 5. Declaration public int NeighborhoodDiameter { get; set; } Property Value Type Description System.Int32 SigmaColor 'Sigma' value representing the \"weight\" of how pixels will influence each other, based on color. Default = 75.0. A higher value means colors that colors that are more different will influence each other more. Declaration public float SigmaColor { get; set; } Property Value Type Description System.Single SigmaSpace 'Sigma' value representing the \"weight\" of how pixels will influence each other, based on distance. Default = 75.0. A higher value means that pixels that are farther apart will influence each other more. Declaration public float SigmaSpace { get; set; } Property Value Type Description System.Single Implements IImageFilter"
  },
  "api/IronBarCode.BinaryThresholdFilter.html": {
    "href": "api/IronBarCode.BinaryThresholdFilter.html",
    "title": "Class BinaryThresholdFilter | C# BarCode API | IronBarCode",
    "keywords": "Class BinaryThresholdFilter A filter to binarize an image. Inheritance System.Object BinaryThresholdFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class BinaryThresholdFilter : Object, IImageFilter Constructors BinaryThresholdFilter() Initializes a new instance of the BinaryThresholdFilter class. Declaration public BinaryThresholdFilter() BinaryThresholdFilter(BinarizationMethod) Initializes a new instance of the BinaryThresholdFilter class with the specified threshold and binarization method to use. Declaration public BinaryThresholdFilter(BinarizationMethod binarizationMethod) Parameters Type Name Description BinarizationMethod binarizationMethod Binarization method to use. BinaryThresholdFilter(Color, Color, Single) Initializes a new instance of the BinaryThresholdFilter class with the specified upper and lower colors, and threshold. Declaration public BinaryThresholdFilter(Color upper, Color lower, float threshold) Parameters Type Name Description IronSoftware.Drawing.Color upper The color to use for pixels that are above the threshold. IronSoftware.Drawing.Color lower The color to use for pixels that are below the threshold. System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. BinaryThresholdFilter(Color, Color, Single, BinarizationMethod) Initializes a new instance of the BinaryThresholdFilter class with the specified upper and lower colors, threshold, and binarization method. Declaration public BinaryThresholdFilter(Color upper, Color lower, float threshold, BinarizationMethod binarizationMethod) Parameters Type Name Description IronSoftware.Drawing.Color upper The color to use for pixels that are above the threshold. IronSoftware.Drawing.Color lower The color to use for pixels that are below the threshold. System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. BinarizationMethod binarizationMethod Binarization method to use. BinaryThresholdFilter(Color, Color, Single, Rectangle) Initializes a new instance of the BinaryThresholdFilter class with the specified Upper, Lower, Threshold and Rectangle. Declaration public BinaryThresholdFilter(Color upper, Color lower, float threshold, Rectangle rectangle) Parameters Type Name Description IronSoftware.Drawing.Color upper The color to use for pixels that are above the threshold. IronSoftware.Drawing.Color lower The color to use for pixels that are below the threshold. System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. IronSoftware.Drawing.Rectangle rectangle Rectangle region to apply the filter on. BinaryThresholdFilter(Color, Color, Single, Rectangle, BinarizationMethod) Initializes a new instance of the BinaryThresholdFilter class with the specified upper and lower colors, threshold, rectangle, and binarization method. Declaration public BinaryThresholdFilter(Color upper, Color lower, float threshold, Rectangle rectangle, BinarizationMethod binarizationMethod) Parameters Type Name Description IronSoftware.Drawing.Color upper The color to use for pixels that are above the threshold. IronSoftware.Drawing.Color lower The color to use for pixels that are below the threshold. System.Single threshold Threshold limit (0.0-1.0) to consider for binarization. IronSoftware.Drawing.Rectangle rectangle Rectangle region to apply the filter on. BinarizationMethod binarizationMethod Binarization method to use. BinaryThresholdFilter(Single) Initializes a new instance of the BinaryThresholdFilter class with the specified threshold. Declaration public BinaryThresholdFilter(float threshold) Parameters Type Name Description System.Single threshold Threshold to apply for binarization. Must be between [0.0-1.0]. BinaryThresholdFilter(Single, BinarizationMethod) Initializes a new instance of the BinaryThresholdFilter class with the specified threshold and binarization. Declaration public BinaryThresholdFilter(float threshold, BinarizationMethod binarizationMethod) Parameters Type Name Description System.Single threshold Threshold to apply for binarization. Must be between [0.0-1.0]. BinarizationMethod binarizationMethod Binarization method to use. Properties BinarizationMethod Binarization method to use. Default = Otsu's Method. Declaration public BinarizationMethod BinarizationMethod { get; set; } Property Value Type Description BinarizationMethod Lower The color to use for pixels that are below the threshold. Declaration public Color Lower { get; set; } Property Value Type Description IronSoftware.Drawing.Color Rectangle Rectangle region to apply the filter on. Declaration public Rectangle Rectangle { get; set; } Property Value Type Description IronSoftware.Drawing.Rectangle Threshold The threshold to apply binarization of the image. Must be between [0.0-1.0]. Default = 0.4. With Otsu's method, this value is not used. Declaration public float Threshold { get; set; } Property Value Type Description System.Single Upper The color to use for pixels that are above the threshold. Declaration public Color Upper { get; set; } Property Value Type Description IronSoftware.Drawing.Color Implements IImageFilter"
  },
  "api/IronBarCode.BrightnessFilter.html": {
    "href": "api/IronBarCode.BrightnessFilter.html",
    "title": "Class BrightnessFilter | C# BarCode API | IronBarCode",
    "keywords": "Class BrightnessFilter A filter to adjust image brightness. Inheritance System.Object BrightnessFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class BrightnessFilter : Object, IImageFilter Constructors BrightnessFilter() Initializes a new instance of the BrightnessFilter class. Declaration public BrightnessFilter() BrightnessFilter(Single) Initializes a new instance of the BrightnessFilter class with the specified amount. Declaration public BrightnessFilter(float amount) Parameters Type Name Description System.Single amount The proportion of the conversion. Value must be between [-1, 1]. Positive values increase brightness, negative values decrease brightness. A value of 0 leaves the image unchanged. Properties Amount The proportion of the conversion. Value must be between [-1, 1]. Default = 0. Positive values increase brightness, negative values decrease brightness. A value of 0 leaves the image unchanged. Declaration public float Amount { get; set; } Property Value Type Description System.Single Implements IImageFilter"
  },
  "api/IronBarCode.ContrastFilter.html": {
    "href": "api/IronBarCode.ContrastFilter.html",
    "title": "Class ContrastFilter | C# BarCode API | IronBarCode",
    "keywords": "Class ContrastFilter A filter to adjust image contrast. Inheritance System.Object ContrastFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class ContrastFilter : Object, IImageFilter Constructors ContrastFilter() Initializes a new instance of the ContrastFilter class. Declaration public ContrastFilter() ContrastFilter(Single) Initializes a new instance of the ContrastFilter class with the specified amount. Declaration public ContrastFilter(float amount) Parameters Type Name Description System.Single amount The proportion of the conversion. Value must be between [0, 10]. Properties Amount The proportion of the conversion. Value must be between [0, 10]. Default = 1.0. Declaration public float Amount { get; set; } Property Value Type Description System.Single Implements IImageFilter"
  },
  "api/IronBarCode.DataMatrixWriter.DataMatrixShape.html": {
    "href": "api/IronBarCode.DataMatrixWriter.DataMatrixShape.html",
    "title": "Class DataMatrixWriter.DataMatrixShape | C# BarCode API | IronBarCode",
    "keywords": "Class DataMatrixWriter.DataMatrixShape Enumeration for DataMatrix shape. Can specify if you would like a Square (equal width and height) or Rectangular . Inheritance System.Object DataMatrixWriter.DataMatrixShape Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class DataMatrixShape : Enum Fields Automatic Default behavior. Allows IronBarcode to decide the dimensions of the DataMatrix. Declaration public const DataMatrixWriter.DataMatrixShape Automatic Field Value Type Description DataMatrixWriter.DataMatrixShape Rectangular Rectangular Shape. Width and Height may be different. Declaration public const DataMatrixWriter.DataMatrixShape Rectangular Field Value Type Description DataMatrixWriter.DataMatrixShape Square Square Shape. Width and Height of the generated Datamatrix will be equal. Declaration public const DataMatrixWriter.DataMatrixShape Square Field Value Type Description DataMatrixWriter.DataMatrixShape value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.DataMatrixWriter.html": {
    "href": "api/IronBarCode.DataMatrixWriter.html",
    "title": "Class DataMatrixWriter | C# BarCode API | IronBarCode",
    "keywords": "Class DataMatrixWriter A class allowing for advanced control on the generation of DataMatrix type barcodes. DataMatrixWriter allows setting of the DataMatrix shape. Generated Barcodes can be exported as Images, Bitmaps, Files, or Streams. Inheritance System.Object DataMatrixWriter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public static class DataMatrixWriter : Object Methods CreateDataMatrix(Byte[], DataMatrixWriter.DataMatrixShape, Int32, Int32) Renders a DataMatrix. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. Declaration public static GeneratedBarcode CreateDataMatrix(byte[] binaryData, DataMatrixWriter.DataMatrixShape shape, int width = 500, int height = 500) Parameters Type Name Description System.Byte [] binaryData The value of the DataMatrix as a byte array. DataMatrixWriter.DataMatrixShape shape The shape of the DataMatrix. System.Int32 width The width of the DataMatrix in pixels. System.Int32 height The height of the DataMatrix in pixels. Returns Type Description GeneratedBarcode A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream. CreateDataMatrix(Byte[], Int32) Renders a Square DataMatrix. For rendering of a rectangular DataMatrix, please find another overload of this method that supports width and height. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. See method overloads for rectangular DataMatrix shapes. Declaration public static GeneratedBarcode CreateDataMatrix(byte[] binaryData, int size = 500) Parameters Type Name Description System.Byte [] binaryData The value of the DataMatrix as a byte array. System.Int32 size The width and height of the DataMatrix in pixels. Returns Type Description GeneratedBarcode A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream. CreateDataMatrix(Stream, DataMatrixWriter.DataMatrixShape, Int32, Int32) Renders a DataMatrix. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. Declaration public static GeneratedBarcode CreateDataMatrix(Stream binaryDataStream, DataMatrixWriter.DataMatrixShape shape, int width = 500, int height = 500) Parameters Type Name Description System.IO.Stream binaryDataStream The value of the DataMatrix as a stream. DataMatrixWriter.DataMatrixShape shape The shape of the DataMatrix. System.Int32 width The width of the DataMatrix in pixels. System.Int32 height The height of the DataMatrix in pixels. Returns Type Description GeneratedBarcode A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream. CreateDataMatrix(Stream, Int32) Renders a Square DataMatrix. For rendering of a rectangular DataMatrix, please find another overload of this method that supports width and height. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. See method overloads for rectangular DataMatrix shapes. Declaration public static GeneratedBarcode CreateDataMatrix(Stream binaryDataStream, int size = 500) Parameters Type Name Description System.IO.Stream binaryDataStream The value of the DataMatrix as a stream. System.Int32 size The width and height of the DataMatrix in pixels. Returns Type Description GeneratedBarcode A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream. CreateDataMatrix(String, DataMatrixWriter.DataMatrixShape, Int32, Int32) Renders a DataMatrix from a String of data. UTF-8 fully supported. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. Declaration public static GeneratedBarcode CreateDataMatrix(string value, DataMatrixWriter.DataMatrixShape shape, int width = 500, int height = 500) Parameters Type Name Description System.String value The value of the DataMatrix as a string. Also suitable for URLS. DataMatrixWriter.DataMatrixShape shape The shape of the DataMatrix. System.Int32 width The width of the DataMatrix in pixels. System.Int32 height The height of the DataMatrix in pixels. Returns Type Description GeneratedBarcode A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream. CreateDataMatrix(String, Int32) Renders a Square DataMatrix from a string of data. UTF-8 fully supported. For rendering of a rectangular DataMatrix, please find another overload of this method that supports width and height. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. See method overloads for rectangular DataMatrix shapes. Declaration public static GeneratedBarcode CreateDataMatrix(string value, int size = 500) Parameters Type Name Description System.String value The value of the DataMatrix as a string. Also suitable for URLS. System.Int32 size The width and height of the DataMatrix in pixels. Returns Type Description GeneratedBarcode A GeneratedBarcode object for the DataMatrix which can be manipulated, annotated, and saved to an IronDrawing object, an image file, a PDF, a MediaURL, or a data stream."
  },
  "api/IronBarCode.Exceptions.html": {
    "href": "api/IronBarCode.Exceptions.html",
    "title": "Namespace IronBarCode.Exceptions | C# BarCode API | IronBarCode",
    "keywords": "Namespace IronBarCode.Exceptions Classes IronBarCodeConfidenceThresholdException Class for argument exception of confidence threshold IronBarCodeContentTooLongEncodingException A specific Exception raised when the Value of a barcode is too long for the selected BarcodeEncoding IronBarCodeEncodingException A generic Exception raised during the encoding of a barcode by IronBarCode IronBarCodeException A generic Exception raised by IronBarCode IronBarCodeFileException A generic Exception raised by IronBarCode when a file can not be read or written IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException A specific Exception raised when the Value of a barcode contains non numeric characters for a BarcodeEncoding which only accepts digits. IronBarCodeNativeException Exception raised for exceptions in native-level code. IronBarCodePdfPasswordException Represents errors that occur during PDF processing in IronBarCode due to incorrect or missing password. IronBarCodeUnsupportedException A generic Exception raised by IronBarCode IronBarCodeUnsupportedRendererEncodingException A specific Exception raised when IronBarCode does not yet support the selected BarcodeEncoding format. We suggest using the BarcodeWriterEncoding Enum to specify your barcode encoding format to avoid this Exception in future."
  },
  "api/IronBarCode.Exceptions.IronBarCodeConfidenceThresholdException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeConfidenceThresholdException.html",
    "title": "Class IronBarCodeConfidenceThresholdException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeConfidenceThresholdException Class for argument exception of confidence threshold Inheritance System.Object IronBarCodeConfidenceThresholdException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeConfidenceThresholdException : ArgumentException Constructors IronBarCodeConfidenceThresholdException(String, Double) Create confidence threshold exception message Declaration public IronBarCodeConfidenceThresholdException(string paramName, double threshold) Parameters Type Name Description System.String paramName name of parameter that contains confidence threshold System.Double threshold value of confidence threshold"
  },
  "api/IronBarCode.Exceptions.IronBarCodeContentTooLongEncodingException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeContentTooLongEncodingException.html",
    "title": "Class IronBarCodeContentTooLongEncodingException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeContentTooLongEncodingException A specific Exception raised when the Value of a barcode is too long for the selected BarcodeEncoding Inheritance System.Object IronBarCodeException IronBarCodeEncodingException IronBarCodeContentTooLongEncodingException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeContentTooLongEncodingException : IronBarCodeEncodingException"
  },
  "api/IronBarCode.Exceptions.IronBarCodeEncodingException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeEncodingException.html",
    "title": "Class IronBarCodeEncodingException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeEncodingException A generic Exception raised during the encoding of a barcode by IronBarCode Inheritance System.Object IronBarCodeException IronBarCodeEncodingException IronBarCodeContentTooLongEncodingException IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException IronBarCodeUnsupportedRendererEncodingException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeEncodingException : IronBarCodeException See Also IronBarCodeException"
  },
  "api/IronBarCode.Exceptions.IronBarCodeException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeException.html",
    "title": "Class IronBarCodeException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeException A generic Exception raised by IronBarCode Inheritance System.Object IronBarCodeException IronBarCodeEncodingException IronBarCodeFileException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeException : Exception See Also System.Exception"
  },
  "api/IronBarCode.Exceptions.IronBarCodeFileException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeFileException.html",
    "title": "Class IronBarCodeFileException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeFileException A generic Exception raised by IronBarCode when a file can not be read or written Inheritance System.Object IronBarCodeException IronBarCodeFileException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeFileException : IronBarCodeException See Also IronBarCodeException"
  },
  "api/IronBarCode.Exceptions.IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException.html",
    "title": "Class IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException A specific Exception raised when the Value of a barcode contains non numeric characters for a BarcodeEncoding which only accepts digits. Inheritance System.Object IronBarCodeException IronBarCodeEncodingException IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeFormatOnlyAcceptsNumericValuesEncodingException : IronBarCodeEncodingException"
  },
  "api/IronBarCode.Exceptions.IronBarCodeNativeException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeNativeException.html",
    "title": "Class IronBarCodeNativeException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeNativeException Exception raised for exceptions in native-level code. Inheritance System.Object IronBarCodeNativeException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeNativeException : Exception"
  },
  "api/IronBarCode.Exceptions.IronBarCodePdfPasswordException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodePdfPasswordException.html",
    "title": "Class IronBarCodePdfPasswordException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodePdfPasswordException Represents errors that occur during PDF processing in IronBarCode due to incorrect or missing password. Inheritance System.Object IronBarCodePdfPasswordException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodePdfPasswordException : Exception Remarks This exception is thrown when a PDF document cannot be read due to password issues. Constructors IronBarCodePdfPasswordException() Initializes a new instance of the IronBarCodePdfPasswordException class. Declaration public IronBarCodePdfPasswordException() IronBarCodePdfPasswordException(String) Initializes a new instance of the IronBarCodePdfPasswordException class with a specified error message. Declaration public IronBarCodePdfPasswordException(string message) Parameters Type Name Description System.String message The message that describes the error. IronBarCodePdfPasswordException(String, Exception) Initializes a new instance of the IronBarCodePdfPasswordException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronBarCodePdfPasswordException(string message, Exception inner) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception inner The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronBarCode.Exceptions.IronBarCodeUnsupportedException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeUnsupportedException.html",
    "title": "Class IronBarCodeUnsupportedException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeUnsupportedException A generic Exception raised by IronBarCode Inheritance System.Object IronBarCodeUnsupportedException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeUnsupportedException : Exception See Also System.Exception"
  },
  "api/IronBarCode.Exceptions.IronBarCodeUnsupportedRendererEncodingException.html": {
    "href": "api/IronBarCode.Exceptions.IronBarCodeUnsupportedRendererEncodingException.html",
    "title": "Class IronBarCodeUnsupportedRendererEncodingException | C# BarCode API | IronBarCode",
    "keywords": "Class IronBarCodeUnsupportedRendererEncodingException A specific Exception raised when IronBarCode does not yet support the selected BarcodeEncoding format. We suggest using the BarcodeWriterEncoding Enum to specify your barcode encoding format to avoid this Exception in future. Inheritance System.Object IronBarCodeException IronBarCodeEncodingException IronBarCodeUnsupportedRendererEncodingException Namespace : IronBarCode.Exceptions Assembly : IronBarCode.dll Syntax public class IronBarCodeUnsupportedRendererEncodingException : IronBarCodeEncodingException"
  },
  "api/IronBarCode.GaussianBlurFilter.html": {
    "href": "api/IronBarCode.GaussianBlurFilter.html",
    "title": "Class GaussianBlurFilter | C# BarCode API | IronBarCode",
    "keywords": "Class GaussianBlurFilter A filter to apply Gaussian blur to an image. Inheritance System.Object GaussianBlurFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class GaussianBlurFilter : Object, IImageFilter Constructors GaussianBlurFilter() Initializes a new instance of the GaussianBlurFilter class. Declaration public GaussianBlurFilter() GaussianBlurFilter(Int32, Int32, Single) Initializes a new instance of the GaussianBlurFilter class. Declaration public GaussianBlurFilter(int kernelWidth, int kernelHeight, float sigma) Parameters Type Name Description System.Int32 kernelWidth Width of the kernel to apply Gaussian blur. System.Int32 kernelHeight Height of the kernel to apply Gaussian blur. System.Single sigma The 'Sigma' value representing the weight of the blur. GaussianBlurFilter(Single) Initializes a new instance of the GaussianBlurFilter class. Declaration public GaussianBlurFilter(float sigma) Parameters Type Name Description System.Single sigma The 'Sigma' value representing the weight of the blur. Properties KernelHeight Height of the kernel to apply Gaussian blur. Must be an odd value greater than 0. Default = 3. Declaration public int KernelHeight { get; set; } Property Value Type Description System.Int32 KernelWidth Width of the kernel to apply Gaussian blur. Must be an odd value greater than 0. Default = 3. Declaration public int KernelWidth { get; set; } Property Value Type Description System.Int32 Sigma The 'Sigma' value representing the weight of the blur. Default = 3.0f. Declaration public float Sigma { get; set; } Property Value Type Description System.Single Implements IImageFilter"
  },
  "api/IronBarCode.GeneratedBarcode.html": {
    "href": "api/IronBarCode.GeneratedBarcode.html",
    "title": "Class GeneratedBarcode | C# BarCode API | IronBarCode",
    "keywords": "Class GeneratedBarcode A barcode generated by IronBarCode. In addition to exporting the barcode as a graphic, we may also resize it, recolor it and annotate it with this class using fluent notation. GeneratedBarcodes may be exported as Images, Objects or PDF files. They may also be exported as HTML for use on the web. Inheritance System.Object GeneratedBarcode Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class GeneratedBarcode : Object Properties BarcodeType Gets the BarcodeEncoding type of this barcode. Declaration public BarcodeEncoding BarcodeType { get; } Property Value Type Description BarcodeEncoding The type of the barcode. BinaryStream Returns a System.IO.Stream of the barcode rendered as a Bitmap image. Declaration public Stream BinaryStream { get; } Property Value Type Description System.IO.Stream The barcode image as a binary stream. BinaryValue Gets the value of the barcode as binary data Declaration public byte[] BinaryValue { get; } Property Value Type Description System.Byte [] The barcode value as a byte array. Height Gets the final height of the generated barcode image in pixels. Includes the height of margins and annotations Declaration public int Height { get; } Property Value Type Description System.Int32 The height in px Image Returns the barcode as an IronSoftware.Drawing.AnyBitmap Declaration public AnyBitmap Image { get; } Property Value Type Description IronSoftware.Drawing.AnyBitmap A IronSoftware.Drawing.AnyBitmap Value Gets the text value if the barcode Declaration public string Value { get; } Property Value Type Description System.String The barcode value. Width Gets the final width of the generated barcode image in pixels. Includes the width of margins and annotations Declaration public int Width { get; } Property Value Type Description System.Int32 The width in px Methods AddAnnotationTextAboveBarcode(String) Annotates the barcode with any string of text. the text is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText) Parameters Type Name Description System.String annotationText The annotation text to be displayed. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, Font, Color) Annotates the barcode with any string of text. the text is rendered above the barcode. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, Font fontFace, Color fontColor) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, Font, Color, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, Font fontFace, Color fontColor, int textSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, Font, Color, String, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, Font fontFace, Color fontColor, string fontPath, int textSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, Font, Color, String, Int32, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, Font fontFace, Color fontColor, string fontPath, int topTextSpacing = 0, int bottomTextSpacing = 0) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 topTextSpacing The top margin of the annotation text in pixels. System.Int32 bottomTextSpacing The bottom of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, int textSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, Int32, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.Int32 topTextSpacing The top margin of the annotation text in pixels. System.Int32 bottomTextSpacing The bottom of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, String, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, string fontPath, int textSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextAboveBarcode(String, String, Int32, Int32) Annotates the barcode with any string of text. the text is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextAboveBarcode(string annotationText, string fontPath, int topTextSpacing = 0, int bottomTextSpacing = 0) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 topTextSpacing The top margin of the annotation text in pixels. System.Int32 bottomTextSpacing The bottom of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String) Annotates the barcode with any string of text. the text is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText) Parameters Type Name Description System.String annotationText The annotation text to be displayed. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, Font, Color) Annotates the barcode with any string of text. the text is rendered below the barcode. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, Font fontFace, Color fontColor) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, Font, Color, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, Font fontFace, Color fontColor, int textSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, Font, Color, String, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, Font fontFace, Color fontColor, string fontPath, int textSpacing = 0) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, Font, Color, String, Int32, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, Font fontFace, Color fontColor, string fontPath, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. IronSoftware.Drawing.Font fontFace The typeface of the annotation text. IronSoftware.Drawing.Color fontColor Color of the annotation text. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 topTextSpacing The top margin of the annotation text in pixels. System.Int32 bottomTextSpacing The bottom of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, int textSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, Int32, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.Int32 topTextSpacing The top margin of the annotation text in pixels. System.Int32 bottomTextSpacing The bottom of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, String, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, string fontPath, int textSpacing = 0) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 textSpacing The top and bottom spacing of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddAnnotationTextBelowBarcode(String, String, Int32, Int32) Annotates the barcode with any string of text. the text is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddAnnotationTextBelowBarcode(string annotationText, string fontPath, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.String annotationText The annotation text to be displayed. System.String fontPath Path to the Font of the annotation text. This may be a relative or a full absolute path. System.Int32 topTextSpacing The top margin of the annotation text in pixels. System.Int32 bottomTextSpacing The bottom of the annotation text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode() Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode() Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(Font, Color) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(Font fontFace, Color fontColor) Parameters Type Name Description IronSoftware.Drawing.Font fontFace The typeface of the barcode value text. IronSoftware.Drawing.Color fontColor Color of the barcode value text. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(Font, Color, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(Font fontFace, Color fontColor, int textSpacing) Parameters Type Name Description IronSoftware.Drawing.Font fontFace The typeface of the barcode value text. IronSoftware.Drawing.Color fontColor Color of the barcode value text. System.Int32 textSpacing The top and bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(Font, Color, Int32, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(Font fontFace, Color fontColor, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description IronSoftware.Drawing.Font fontFace The typeface of the barcode value text. IronSoftware.Drawing.Color fontColor Color of the barcode value text. System.Int32 topTextSpacing The top spacing of the barcode value text in pixels. System.Int32 bottomTextSpacing The bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(Int32) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(int textSpacing) Parameters Type Name Description System.Int32 textSpacing The top and bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(Int32, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.Int32 topTextSpacing The top spacing of the barcode value text in pixels. System.Int32 bottomTextSpacing The bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(String) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(string fontPath) Parameters Type Name Description System.String fontPath Path to the Font of the barcode value text. This may be a relative or a full absolute path. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(String, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(string fontPath, int textSpacing) Parameters Type Name Description System.String fontPath Path to the Font of the barcode value text. This may be a relative or a full absolute path. System.Int32 textSpacing The top and bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextAboveBarcode(String, Int32, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered above the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextAboveBarcode(string fontPath, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.String fontPath Path to the Font of the barcode value text. This may be a relative or a full absolute path. System.Int32 topTextSpacing The top spacing of the barcode value text in pixels. System.Int32 bottomTextSpacing The bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode() Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode() Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(Font, Color) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(Font fontFace, Color fontColor) Parameters Type Name Description IronSoftware.Drawing.Font fontFace The typeface of the barcode value text. IronSoftware.Drawing.Color fontColor Color of the barcode value text. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(Font, Color, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(Font fontFace, Color fontColor, int textSpacing) Parameters Type Name Description IronSoftware.Drawing.Font fontFace The typeface of the barcode value text. IronSoftware.Drawing.Color fontColor Color of the barcode value text. System.Int32 textSpacing The top and bottom spacing for barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(Font, Color, Int32, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(Font fontFace, Color fontColor, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description IronSoftware.Drawing.Font fontFace The typeface of the barcode value text. IronSoftware.Drawing.Color fontColor Color of the barcode value text. System.Int32 topTextSpacing The top margin of the barcode value text in pixels. System.Int32 bottomTextSpacing The bottom of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(Int32) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(int textSpacing) Parameters Type Name Description System.Int32 textSpacing The top and bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(Int32, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.Int32 topTextSpacing The top spacing of the barcode value text in pixels. System.Int32 bottomTextSpacing The bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(String) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(string fontPath) Parameters Type Name Description System.String fontPath Path to the Font of the barcode value text. This may be a relative or a full absolute path. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(String, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(string fontPath, int textSpacing) Parameters Type Name Description System.String fontPath Path to the Font of the barcode value text. This may be a relative or a full absolute path. System.Int32 textSpacing The top and bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . AddBarcodeValueTextBelowBarcode(String, Int32, Int32) Annotates the barcode with text showing it's value. the barcode value is rendered below the barcode. Overloads of this method allow for the typeface and font size to be specific in detail. Declaration public GeneratedBarcode AddBarcodeValueTextBelowBarcode(string fontPath, int topTextSpacing, int bottomTextSpacing) Parameters Type Name Description System.String fontPath Path to the Font of the barcode value text. This may be a relative or a full absolute path. System.Int32 topTextSpacing The top spacing of the barcode value text in pixels. System.Int32 bottomTextSpacing The bottom spacing of the barcode value text in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . ChangeBackgroundColor(Color) Sets the background color behind the barcode. Declaration public GeneratedBarcode ChangeBackgroundColor(Color backgroundColor) Parameters Type Name Description IronSoftware.Drawing.Color backgroundColor Color of the background. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . ChangeBarCodeColor(Color, Boolean) Sets the barcode color. Declaration public GeneratedBarcode ChangeBarCodeColor(Color barcodeColor, bool forcedChangeColor = false) Parameters Type Name Description IronSoftware.Drawing.Color barcodeColor Color of the barcode (foreground). System.Boolean forcedChangeColor If ForcedChangeColor is true will skip checking by reading engine. Default is false. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . KeepAspectRatio(Boolean, BarCodeAspectSide) Maintain the aspect ratio of the barcode when resizing it. Declaration public GeneratedBarcode KeepAspectRatio(bool keepAspectRatio, BarCodeAspectSide barCodeAspectSide) Parameters Type Name Description System.Boolean keepAspectRatio Is Keep Aspect Ratio. BarCodeAspectSide barCodeAspectSide Side (Horizontal / Vertical) that need to keep. (Default is Horizontal) Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . Remarks Works only for PDF417. ResizeTo(Int32, Int32) Resizes the Barcode (excluding annotations and margins). This process causes a re-render and is lossless. Declaration public GeneratedBarcode ResizeTo(int maxWidth, int maxHeight) Parameters Type Name Description System.Int32 maxWidth The maximum width of the barcode in px. May be ignored if the value is too small for the barcode to be read. System.Int32 maxHeight The maximum height of the barcode in px. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . ResizeToMil(Double, Double, Int32) Resize the barcode using the specified 'mil' width (thousandths of an inch) Declaration public GeneratedBarcode ResizeToMil(double milWidth, double inchHeight = 1, int DPI = 96) Parameters Type Name Description System.Double milWidth The width of the narrowest barcode element, in thousandths of an inch. System.Double inchHeight The height of the barcode in inch. (Default is 1 inch) System.Int32 DPI Dots-per-inch (Default is 96) Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsGif(String) Saves the barcode as a GIF image file. Declaration public GeneratedBarcode SaveAsGif(string filePath) Parameters Type Name Description System.String filePath The file path for the GIF. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsHtmlFile(String) Saves the Barcode as fully functional and self-contained HTML file. The image encoding will automatically match the file extension specified in your ImagePath. Defaults to Bitmap image encoding if ambiguous. Declaration public GeneratedBarcode SaveAsHtmlFile(string htmlFilePath) Parameters Type Name Description System.String htmlFilePath The file path where the HTML document will be saved. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . See Also ToHtmlTag() SaveAsImage(String) Saves the Barcode as an image file. The image encoding will automatically match the file extension specified in your ImagePath. Defaults to Bitmap image encoding if ambiguous. Declaration public GeneratedBarcode SaveAsImage(string imagePath) Parameters Type Name Description System.String imagePath The file path where the image will be saved to disk. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsJpeg(String) Saves the barcode as a JPEG image file. Declaration public GeneratedBarcode SaveAsJpeg(string filePath) Parameters Type Name Description System.String filePath The file path for the JPEG. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsPdf(String) Saves the barcode as a new PDF document. Declaration public GeneratedBarcode SaveAsPdf(string filePath) Parameters Type Name Description System.String filePath The file path for the PDF. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsPng(String) Saves the barcode as a PNG image file. Declaration public GeneratedBarcode SaveAsPng(string filePath) Parameters Type Name Description System.String filePath The file path for the PNG. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsTiff(String) Saves the barcode as a TIFF image file. Declaration public GeneratedBarcode SaveAsTiff(string filePath) Parameters Type Name Description System.String filePath The file path for the TIFF. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SaveAsWindowsBitmap(String) Saves the barcode as a BMP image file. Declaration public GeneratedBarcode SaveAsWindowsBitmap(string filePath) Parameters Type Name Description System.String filePath The file path for the BMP. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SetMargins(Int32) Sets whitespace margins around the barcode. Declaration public GeneratedBarcode SetMargins(int pixelWidth) Parameters Type Name Description System.Int32 pixelWidth Width of margins in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . SetMargins(Int32, Int32, Int32, Int32) Sets whitespace margins around the barcode. Declaration public GeneratedBarcode SetMargins(int top, int right, int bottom, int left) Parameters Type Name Description System.Int32 top The top margin in pixels. System.Int32 right The right margin in pixels. System.Int32 bottom The bottom in pixels. System.Int32 left The left margin in pixels. Returns Type Description GeneratedBarcode This instance of GeneratedBarcode . StampToExistingPdfPage(String, Int32, Int32, Int32, String) Stamps (draws) the Barcode onto an existing page of an existing PDF document. Declaration public GeneratedBarcode StampToExistingPdfPage(string PdfFilePath, int x, int y, int pageNumber = 1, string password = null) Parameters Type Name Description System.String PdfFilePath The file path of the PDF which will have the Barcode added to it.. System.Int32 x The horizontal position of the barcode on the PDF page in pixels System.Int32 y The vertical position of the barcode on the PDF page in pixels System.Int32 pageNumber The page of the PDF to stamp. [One Based] such that the first page is number 1 rather than 0. System.String password The PDF encryption or administrator password if this PDF is digitally protected from modification or opening. Returns Type Description GeneratedBarcode StampToExistingPdfPages(String, Int32, Int32, IEnumerable<Int32>, String) Stamps (draws) the Barcode onto multiple existing pages of an existing PDF document. Declaration public GeneratedBarcode StampToExistingPdfPages(string pdfFilePath, int x, int y, IEnumerable<int> pageNumbers, string password = null) Parameters Type Name Description System.String pdfFilePath The file path of the PDF which will have the Barcode added to it.. System.Int32 x The horizontal position of the barcode on each PDF page in pixels System.Int32 y The vertical position of the barcode on each PDF page in pixels System.Collections.Generic.IEnumerable < System.Int32 > pageNumbers The page numbers of the PDF to stamp as an enumeration, list or array. [One Based] such that the first page is number 1 rather than 0. System.String password The PDF encryption or administrator password if this PDF is digitally protected from modification or opening. Returns Type Description GeneratedBarcode ToBitmap() Returns the barcode as an IronSoftware.Drawing.AnyBitmap Declaration public AnyBitmap ToBitmap() Returns Type Description IronSoftware.Drawing.AnyBitmap A IronSoftware.Drawing.AnyBitmap ToDataUrl() Converts the barcode to a base64 data URL. The data URI scheme is a uniform resource identifier (URI) scheme that provides a way to include data in-line in web pages as if they were external resources. https://en.wikipedia.org/wiki/Data_URI_scheme Declaration public string ToDataUrl() Returns Type Description System.String The Data URL as a string. See Also ToHtmlTag() SaveAsHtmlFile(String) ToGifBinaryData() Returns the barcode as the binary data for a GIF image. Declaration public byte[] ToGifBinaryData() Returns Type Description System.Byte [] A byte array ToGifStream() Returns the barcode as a System.IO.MemoryStream of the binary data for a GIF image. Declaration public MemoryStream ToGifStream() Returns Type Description System.IO.MemoryStream System.IO.Stream ToHtmlTag() Renders the barcode as a HTML image Tag. The tag is fully formed (using a data-url> and can be injected into HTML with no JS, CSS or image dependencies. Declaration public string ToHtmlTag() Returns Type Description System.String An Html img tag as a string. ToImage() Returns the barcode as an IronSoftware.Drawing.AnyBitmap Declaration public AnyBitmap ToImage() Returns Type Description IronSoftware.Drawing.AnyBitmap A IronSoftware.Drawing.AnyBitmap ToJpegBinaryData() Returns the barcode as the binary data for a JPEG/JPG image. Declaration public byte[] ToJpegBinaryData() Returns Type Description System.Byte [] A byte array ToJpegStream() Returns the barcode as a System.IO.MemoryStream of the binary data for a JPEG/JPG image. Declaration public MemoryStream ToJpegStream() Returns Type Description System.IO.MemoryStream System.IO.Stream ToPdfBinaryData() Returns a 1 page PDF document containing the barcode, as binary data. Declaration public byte[] ToPdfBinaryData() Returns Type Description System.Byte [] A byte array. ToPdfStream() Returns a binary System.IO.MemoryStream containing a 1 page PDF document containing the barcode, as binary data. Declaration public Stream ToPdfStream() Returns Type Description System.IO.Stream A System.IO.Stream ToPngBinaryData() Returns the barcode as the binary data for a PNG image. Declaration public byte[] ToPngBinaryData() Returns Type Description System.Byte [] A byte array ToPngStream() Returns the barcode as a System.IO.MemoryStream of the binary data for a PNG image. Declaration public MemoryStream ToPngStream() Returns Type Description System.IO.MemoryStream System.IO.Stream ToStream() Renders the barcode as an image System.IO.Stream Declaration public MemoryStream ToStream() Returns Type Description System.IO.MemoryStream A System.IO.MemoryStream containing encoded image file data. The default encoding is PNG ToStream(AnyBitmap.ImageFormat) Renders the barcode as an image System.IO.Stream Declaration public MemoryStream ToStream(AnyBitmap.ImageFormat imageFormat) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap.ImageFormat imageFormat (optional) The image format as a IronSoftware.Drawing.AnyBitmap.ImageFormat . Returns Type Description System.IO.MemoryStream A System.IO.MemoryStream containing encoded image file data ToString() Returns a System.String that represents this GeneratedBarcodes value. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. ToTiffBinaryData() Returns the barcode as the binary data for a TIFF image. Declaration public byte[] ToTiffBinaryData() Returns Type Description System.Byte [] A byte array ToTiffStream() Returns the barcode as a System.IO.MemoryStream of the binary data as the binary data for a TIFF image. Declaration public MemoryStream ToTiffStream() Returns Type Description System.IO.MemoryStream System.IO.Stream ToWindowsBitmapBinaryData() Returns the barcode as the binary data for a Bitmap BMP image. Declaration public byte[] ToWindowsBitmapBinaryData() Returns Type Description System.Byte [] A byte array ToWindowsBitmapStream() Returns the barcode as a System.IO.MemoryStream of the binary data for a Bitmap BMP image. Declaration public Stream ToWindowsBitmapStream() Returns Type Description System.IO.Stream System.IO.Stream Verify(String) Verifies this barcode is still readable by IronBarCode. Resizing a barcode to a very small size using unconventional colors may make it unreadable to a machine. This method verifies that a barcode is still fully readable. Declaration public bool Verify(string expected = null) Parameters Type Name Description System.String expected Returns Type Description System.Boolean true if the barcodes is still machine-readable"
  },
  "api/IronBarCode.html": {
    "href": "api/IronBarCode.html",
    "title": "Namespace IronBarCode | C# BarCode API | IronBarCode",
    "keywords": "Namespace IronBarCode Classes AdaptiveThresholdFilter A filter to apply adaptive thresholding to an image. BarCodeAspectSide Chooses the side of barcode to keep aspect size using IronBarCode. This enum is related to BarCodeAspectSide with the side to keep. BarcodeEncoding Barcode Encoding Types. Setting a BarcodeEncoding when reading Barcodes improves performance by only looking for expected barcode types. Setting a BarcodeEncoding when rendering Barcodes chooses the type and design of barcode to be generated. For barcode creation please also see the BarcodeWriterEncoding Enum which omits barcode formats which are not writable with IronBarCode. BarcodeOrientation Specifies the orientation of a Barcode. BarcodeReader A versatile static class for reading many popular barcode formats from Images and PDFs. IronBarCode.BarcodeReader supports barcode reading from Bitmaps, Image Objects, Image Files, Image Streams, MultiFrame Tiff Images and also PDFs. Features: Crop-area support, Image filters, and preprocessing for improved accuracy including and the ability to automatically un-rotate, deskew and clean barcode image input. BarcodeReaderOptions An Options class of BarcodeReader for reading many popular barcode formats from Images and PDFs. BarcodeResult Result from reading a barcode using IronBarCode BarcodeResultPosition Represents the position of the detected barcode code in the image. BarcodeResults Result from reading a barcode as IList using IronBarCode BarcodeScanMode Define how IronBarcode scans and detects barcodes in an image to read. BarcodeWriter A static class allowing for barcode images of many types to be generated dynamically. Generated Barcodes can be exported as Images, Bitmaps, Files, PDFs and Streams. BarcodeWriterEncoding Chooses the style of barcode to render as an image using IronBarCode. This enum is related to BarcodeEncoding with the exception that only encodable barcode formats are mentioned. As this Enum is not of the Flags type, only one BarcodeWriterEncoding can be used to generate a barcode. BilateralFilter A filter to apply bilateral smoothing to an image. BinaryThresholdFilter A filter to binarize an image. BrightnessFilter A filter to adjust image brightness. ContrastFilter A filter to adjust image contrast. DataMatrixWriter A class allowing for advanced control on the generation of DataMatrix type barcodes. DataMatrixWriter allows setting of the DataMatrix shape. Generated Barcodes can be exported as Images, Bitmaps, Files, or Streams. DataMatrixWriter.DataMatrixShape Enumeration for DataMatrix shape. Can specify if you would like a Square (equal width and height) or Rectangular . GaussianBlurFilter A filter to apply Gaussian blur to an image. GeneratedBarcode A barcode generated by IronBarCode. In addition to exporting the barcode as a graphic, we may also resize it, recolor it and annotate it with this class using fluent notation. GeneratedBarcodes may be exported as Images, Objects or PDF files. They may also be exported as HTML for use on the web. ImageFilterCollection A collection of image filters for image pre-processing. Installation A directory with write-access where setup and temporary files and will be deployed when necessary. InvertFilter A filter to invert image colors. License Allows IronBarCode license keys to be applied globally across an application. MedianBlurFilter A filter to apply Median blur to an image. PageOrientation Specifies the orientation of a page. PdfBarcodeReaderOptions An Options class of PdfBarcodeReaderOptions for reading many popular barcode formats from PDFs. Features: MaxParallelThreads, Reading detail, ExpectMultipleBarcodes, Crop-area, Image filters and preprocessing for improved accuracy. QRCodeLogo A class allowing for advanced control on the logo of QR type barcodes. QRCodeLogo gives the developer access to set logo image, logo width, logo height, and rounded logo corner. Logo image can be provide as IronSoftware.Drawing.AnyBitmap , Files, Array of System.Byte and System.IO.Stream . QRCodeWriter A class allowing for advanced control on the generation of QR type barcodes. QRCodeWriter gives the developer access to set QR code error correction levels, and to add logo images to QR codes. Generated Barcodes can be exported as Images, Bitmaps, Files and Streams. QRCodeWriter.QrErrorCorrectionLevel The error correction level of a QR code. A higher QRCodeWriter.QrErrorCorrectionLevel creates more complex QR codes, which are less prone to reading errors. They may also be readable if damaged or partially obscured. ReadingSpeed Specify the reading speed of IronBarcode. Setting a more detailed option will use more CPU and take longer. Please understand that pre-processing is CPU-heavy and we recommend experimenting with different settings starting with the lowest settings first and gradually working up from there. SharpenFilter A filter to apply Gaussian sharpening to an image. Interfaces IImageFilter A collection of ImageFilterCollection for processing Images."
  },
  "api/IronBarCode.IImageFilter.html": {
    "href": "api/IronBarCode.IImageFilter.html",
    "title": "Interface IImageFilter | C# BarCode API | IronBarCode",
    "keywords": "Interface IImageFilter A collection of ImageFilterCollection for processing Images. Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public interface IImageFilter"
  },
  "api/IronBarCode.ImageFilterCollection.html": {
    "href": "api/IronBarCode.ImageFilterCollection.html",
    "title": "Class ImageFilterCollection | C# BarCode API | IronBarCode",
    "keywords": "Class ImageFilterCollection A collection of image filters for image pre-processing. Inheritance System.Object ImageFilterCollection Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class ImageFilterCollection : List<IImageFilter> Constructors ImageFilterCollection() Initializes a new instance of the ImageFilterCollection class. Declaration public ImageFilterCollection() ImageFilterCollection(Boolean) Initializes a new instance of the ImageFilterCollection class with a CacheAtEachIteration toggle. Declaration public ImageFilterCollection(bool cacheAtEachIteration) Parameters Type Name Description System.Boolean cacheAtEachIteration Properties CacheAtEachIteration Cache the image with the filters applied in each iteration of the filter applying. Default = false. Declaration public bool CacheAtEachIteration { get; set; } Property Value Type Description System.Boolean"
  },
  "api/IronBarCode.Installation.html": {
    "href": "api/IronBarCode.Installation.html",
    "title": "Class Installation | C# BarCode API | IronBarCode",
    "keywords": "Class Installation A directory with write-access where setup and temporary files and will be deployed when necessary. Inheritance System.Object Installation Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public static class Installation : Object Properties DeploymentPath A directory with write-access where setup and temporary files and will be deployed when necessary. The default location is the system temp folder which is appropriate for most use cases Declaration public static string DeploymentPath { get; set; } Property Value Type Description System.String"
  },
  "api/IronBarCode.Internals.BinarizationMethod.html": {
    "href": "api/IronBarCode.Internals.BinarizationMethod.html",
    "title": "Class BinarizationMethod | C# BarCode API | IronBarCode",
    "keywords": "Class BinarizationMethod Methods for binarizing images. Inheritance System.Object BinarizationMethod Namespace : IronBarCode.Internals Assembly : IronBarCode.dll Syntax public sealed class BinarizationMethod : Enum Fields Otsu Otsu's method for binarization. Declaration public const BinarizationMethod Otsu Field Value Type Description BinarizationMethod Simple Simple binarization based on a threshold value. Declaration public const BinarizationMethod Simple Field Value Type Description BinarizationMethod value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.Internals.html": {
    "href": "api/IronBarCode.Internals.html",
    "title": "Namespace IronBarCode.Internals | C# BarCode API | IronBarCode",
    "keywords": "Namespace IronBarCode.Internals Classes BinarizationMethod Methods for binarizing images."
  },
  "api/IronBarCode.InvertFilter.html": {
    "href": "api/IronBarCode.InvertFilter.html",
    "title": "Class InvertFilter | C# BarCode API | IronBarCode",
    "keywords": "Class InvertFilter A filter to invert image colors. Inheritance System.Object InvertFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class InvertFilter : Object, IImageFilter Constructors InvertFilter() Initializes a new instance of the InvertFilter class. Declaration public InvertFilter() InvertFilter(Rectangle) Initializes a new instance of the InvertFilter class with a specified Rectangle region. Declaration public InvertFilter(Rectangle rectangle) Parameters Type Name Description IronSoftware.Drawing.Rectangle rectangle Rectangle region to apply the filter on. Properties Rectangle Rectangle region to apply the filter on. Declaration public Rectangle Rectangle { get; set; } Property Value Type Description IronSoftware.Drawing.Rectangle Implements IImageFilter"
  },
  "api/IronBarCode.License.html": {
    "href": "api/IronBarCode.License.html",
    "title": "Class License | C# BarCode API | IronBarCode",
    "keywords": "Class License Allows IronBarCode license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronBarCode is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in LicenseKey property, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironsoftware.com/csharp/barcode/licensing/ and https://ironsoftware.com/csharp/barcode/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean true if the license key given is valid. LicenseKey Get Licensed at https://ironsoftware.com/csharp/barcode/licensing/ For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronBarCode.LicenseKey\" value=\"IRONBARCODE-LICENSE-KEY\"/> within the appSettings node. See https://ironsoftware.com/csharp/barcode/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronBarCode.LicenseKey\" and the value is a valid IronBarCode trial or full license key. See https://ironsoftware.com/csharp/barcode/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods DisableAppAnalytics() Disables AppAnalytics for IronBarCode. Limitations apply. Declaration public static void DisableAppAnalytics() IsValidLicense(String) Determines whether a string license key is valid. See https://ironsoftware.com/csharp/barcode/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string licenseKey) Parameters Type Name Description System.String licenseKey IronBarCode license key as a string Returns Type Description System.Boolean true if the license key given is valid."
  },
  "api/IronBarCode.MedianBlurFilter.html": {
    "href": "api/IronBarCode.MedianBlurFilter.html",
    "title": "Class MedianBlurFilter | C# BarCode API | IronBarCode",
    "keywords": "Class MedianBlurFilter A filter to apply Median blur to an image. Inheritance System.Object MedianBlurFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class MedianBlurFilter : Object, IImageFilter Constructors MedianBlurFilter() Initializes a new instance of the MedianBlurFilter class. Declaration public MedianBlurFilter() MedianBlurFilter(Int32) Initializes a new instance of the MedianBlurFilter class. Declaration public MedianBlurFilter(int kernelSize) Parameters Type Name Description System.Int32 kernelSize Size of the kernel to apply Median blur. Properties KernelSize Size of the kernel to apply Median blur. Must be an odd value greater than 0. Default = 5. Declaration public int KernelSize { get; set; } Property Value Type Description System.Int32 Implements IImageFilter"
  },
  "api/IronBarCode.PageOrientation.html": {
    "href": "api/IronBarCode.PageOrientation.html",
    "title": "Class PageOrientation | C# BarCode API | IronBarCode",
    "keywords": "Class PageOrientation Specifies the orientation of a page. Inheritance System.Object PageOrientation Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class PageOrientation : Enum Fields Landscape The image's width is greater than its height. Declaration public const PageOrientation Landscape Field Value Type Description PageOrientation Portrait The image's height is greater than its width. Declaration public const PageOrientation Portrait Field Value Type Description PageOrientation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.PdfBarcodeReaderOptions.html": {
    "href": "api/IronBarCode.PdfBarcodeReaderOptions.html",
    "title": "Class PdfBarcodeReaderOptions | C# BarCode API | IronBarCode",
    "keywords": "Class PdfBarcodeReaderOptions An Options class of PdfBarcodeReaderOptions for reading many popular barcode formats from PDFs. Features: MaxParallelThreads, Reading detail, ExpectMultipleBarcodes, Crop-area, Image filters and preprocessing for improved accuracy. Inheritance System.Object BarcodeReaderOptions PdfBarcodeReaderOptions Inherited Members BarcodeReaderOptions.Speed BarcodeReaderOptions.ExpectMultipleBarcodes BarcodeReaderOptions.ExpectBarcodeTypes BarcodeReaderOptions.Multithreaded BarcodeReaderOptions.MaxParallelThreads BarcodeReaderOptions.CropArea BarcodeReaderOptions.UseCode39ExtendedMode BarcodeReaderOptions.RemoveFalsePositive BarcodeReaderOptions.ImageFilters BarcodeReaderOptions.ScanMode BarcodeReaderOptions.ConfidenceThreshold BarcodeReaderOptions.AutoRotate Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class PdfBarcodeReaderOptions : BarcodeReaderOptions Constructors PdfBarcodeReaderOptions() Initializes a new instance of the PdfBarcodeReaderOptions class. Declaration public PdfBarcodeReaderOptions() PdfBarcodeReaderOptions(IEnumerable<Int32>) Initializes a new instance of the PdfBarcodeReaderOptions class with the specified pages. Declaration public PdfBarcodeReaderOptions(IEnumerable<int> pageNumbers) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageNumbers The page numbers of the PDF. PdfBarcodeReaderOptions(Int32) Initializes a new instance of the PdfBarcodeReaderOptions class with the specified page. Declaration public PdfBarcodeReaderOptions(int pageNumber) Parameters Type Name Description System.Int32 pageNumber The page number of the PDF. Properties DPI The Dots per inch to rendering each Barcode images. Declaration public int DPI { get; set; } Property Value Type Description System.Int32 PageNumbers The page numbers of the PDF to read expressed as an Array, List or IEnumerable of System.Int32 . PageNumbers are '1 based' meaning that the first page number is 1 rather than zero. Declaration public IEnumerable<int> PageNumbers { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Int32 > Password The password string to open / unencrypt the PDF. Null or \"\" assign no password. Declaration public string Password { get; set; } Property Value Type Description System.String Scale The Scale Factor for Scaling Width and Height when convert Pdf to Image. Default 3.5. Declaration public double Scale { get; set; } Property Value Type Description System.Double Inherited members Speed ExpectMultipleBarcodes ExpectBarcodeTypes Multithreaded MaxParallelThreads CropArea UseCode39ExtendedMode RemoveFalsePositive ImageFilters ScanMode ConfidenceThreshold AutoRotate"
  },
  "api/IronBarCode.QRCodeLogo.html": {
    "href": "api/IronBarCode.QRCodeLogo.html",
    "title": "Class QRCodeLogo | C# BarCode API | IronBarCode",
    "keywords": "Class QRCodeLogo A class allowing for advanced control on the logo of QR type barcodes. QRCodeLogo gives the developer access to set logo image, logo width, logo height, and rounded logo corner. Logo image can be provide as IronSoftware.Drawing.AnyBitmap , Files, Array of System.Byte and System.IO.Stream . Inheritance System.Object QRCodeLogo Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class QRCodeLogo : Object Constructors QRCodeLogo() Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo() QRCodeLogo(AnyBitmap, Int32, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(AnyBitmap logoImage, int width, int height, float roundedCornerRadius = 0F) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap logoImage The logo image as a IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 width The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Int32 height The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(AnyBitmap, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(AnyBitmap logoImage, int size = 0, float roundedCornerRadius = 0F) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap logoImage The logo image as a IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 size The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(Byte[], Int32, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(byte[] bytes, int width, int height, float roundedCornerRadius = 0F) Parameters Type Name Description System.Byte [] bytes The logo image as a array of System.Byte . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 width The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Int32 height The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(Byte[], Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(byte[] bytes, int size, float roundedCornerRadius = 0F) Parameters Type Name Description System.Byte [] bytes The logo image as a array of System.Byte . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 size The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(Stream, Int32, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(Stream stream, int width, int height, float roundedCornerRadius = 0F) Parameters Type Name Description System.IO.Stream stream The logo image as a System.IO.Stream . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 width The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Int32 height The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(Stream, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(Stream stream, int size = 0, float roundedCornerRadius = 0F) Parameters Type Name Description System.IO.Stream stream The logo image as a IronSoftware.Drawing.AnyBitmap . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 size The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(String, Int32, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(string filepath, int width, int height, float roundedCornerRadius = 0F) Parameters Type Name Description System.String filepath The logo image as a full or relative filepath. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 width The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Int32 height The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(String, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(string filepath, int size = 0, float roundedCornerRadius = 0F) Parameters Type Name Description System.String filepath The logo image as a full or relative filepath. Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 size The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(Uri, Int32, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(Uri URI, int width, int height, float roundedCornerRadius = 0F) Parameters Type Name Description System.Uri URI The logo image as a System.Uri . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 width The width of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Int32 height The height of the logo image in pixels. Use the default value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. QRCodeLogo(Uri, Int32, Single) Creates a Logo to stamp onto a QR code. File formats acceptable include: Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. Declaration public QRCodeLogo(Uri URI, int size = 0, float roundedCornerRadius = 0F) Parameters Type Name Description System.Uri URI The logo image as a System.Uri . Jpeg, Jpeg2000, Png, Bmp, Tiff & Gif Image formats are supported. System.Int32 size The desired width and height of the logo image in pixels. If this image is too large for the QR to be readable and exception will be thrown. Use the value 0 (zero) to automatically find the largest viable size. System.Single roundedCornerRadius The radius of the rounded corner of the logo image. Use the default value 0 (zero) for square corners. Properties Logo Image Logo to stamp onto a QR code as a IronSoftware.Drawing.AnyBitmap Declaration public AnyBitmap Logo { get; set; } Property Value Type Description IronSoftware.Drawing.AnyBitmap LogoHeight Desired height of Logo in px. If zero (default) IronBarcode will automatically maximize the size of your logo for you. Declaration public int LogoHeight { get; set; } Property Value Type Description System.Int32 LogoWidth Desired width of Logo in px. If zero (default) IronBarcode will automatically maximize the size of your logo for you. Declaration public int LogoWidth { get; set; } Property Value Type Description System.Int32 RoundedCornerRadius Desired rounding of Logo corners for design purposes. If zero (default) IronBarcode not round the corners of your logo. Declaration public float RoundedCornerRadius { get; set; } Property Value Type Description System.Single"
  },
  "api/IronBarCode.QRCodeWriter.html": {
    "href": "api/IronBarCode.QRCodeWriter.html",
    "title": "Class QRCodeWriter | C# BarCode API | IronBarCode",
    "keywords": "Class QRCodeWriter A class allowing for advanced control on the generation of QR type barcodes. QRCodeWriter gives the developer access to set QR code error correction levels, and to add logo images to QR codes. Generated Barcodes can be exported as Images, Bitmaps, Files and Streams. Inheritance System.Object QRCodeWriter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public static class QRCodeWriter : Object Methods CreateQrCode(Byte[], Int32, QRCodeWriter.QrErrorCorrectionLevel, Int32) Renders a QR code. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. Logos & Branding may also be added using the CreateQrCodeWithLogo method. Declaration public static GeneratedBarcode CreateQrCode(byte[] binaryData, int size = 500, QRCodeWriter.QrErrorCorrectionLevel errorCorrection, int qrVersion = 0) Parameters Type Name Description System.Byte [] binaryData The value of the QR code as a byte array. System.Int32 size The width and height of the QR code in pixels. QRCodeWriter.QrErrorCorrectionLevel errorCorrection The error correction level of the QR code. System.Int32 qrVersion The symbol version of the QR Code. The default value 0 will automatically assign an appropriate QR version for your data (highly recommended). Returns Type Description GeneratedBarcode A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream. CreateQrCode(Stream, Int32, QRCodeWriter.QrErrorCorrectionLevel, Int32) Renders a QR code. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. Logos & Branding may also be added using the CreateQrCodeWithLogo method. Declaration public static GeneratedBarcode CreateQrCode(Stream binaryDataStream, int size = 500, QRCodeWriter.QrErrorCorrectionLevel errorCorrection, int qrVersion = 0) Parameters Type Name Description System.IO.Stream binaryDataStream The value of the QR code as a stream. System.Int32 size The width and height of the QR code in pixels. QRCodeWriter.QrErrorCorrectionLevel errorCorrection The error correction level of the QR code. System.Int32 qrVersion The symbol version of the QR Code. The default value 0 will automatically assign an appropriate QR version for your data (highly recommended). Returns Type Description GeneratedBarcode A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream. CreateQrCode(String, Int32, QRCodeWriter.QrErrorCorrectionLevel, Int32) Renders a QR code from a String of data. UTF-8 fully supported. Overload methods and methods of the created GeneratedBarcode object allow for barcode sizes and colors to be customized. Logos / Branding may also be added. Declaration public static GeneratedBarcode CreateQrCode(string value, int size = 500, QRCodeWriter.QrErrorCorrectionLevel errorCorrection, int qrVersion = 0) Parameters Type Name Description System.String value The value of the QR code as a string. Also suitable for URLS. System.Int32 size The width and height of the QR code in pixels. QRCodeWriter.QrErrorCorrectionLevel errorCorrection The error correction level of the QR code. System.Int32 qrVersion The symbol version of the QR Code. The default value 0 will automatically assign an appropriate QR version for your data (highly recommended). Returns Type Description GeneratedBarcode A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream. CreateQrCodeWithLogo(Byte[], QRCodeLogo, Int32, Int32) Renders a QR code of given dimensions with a logo image at its center. Declaration public static GeneratedBarcode CreateQrCodeWithLogo(byte[] binaryData, QRCodeLogo qrCodeLogo, int size = 500, int qrVersion = 0) Parameters Type Name Description System.Byte [] binaryData The value of the QR code as a byte array. QRCodeLogo qrCodeLogo A QRCodeLogo class instance representing your desired logo image settings. System.Int32 size The width and height of the QR code in pixels. System.Int32 qrVersion The symbol version of the QR Code. The default value 0 will automatically assign an appropriate QR version for your data (highly recommended). Returns Type Description GeneratedBarcode A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream. CreateQrCodeWithLogo(Stream, QRCodeLogo, Int32, Int32) Renders a QR code of given dimensions with a logo image at its center. Declaration public static GeneratedBarcode CreateQrCodeWithLogo(Stream binaryDataStream, QRCodeLogo qrCodeLogo, int size = 500, int qrVersion = 0) Parameters Type Name Description System.IO.Stream binaryDataStream The value of the QR code as a stream. QRCodeLogo qrCodeLogo A QRCodeLogo class instance representing your desired logo image settings. System.Int32 size The width and height of the QR code in pixels. System.Int32 qrVersion The symbol version of the QR Code. The default value 0 will automatically assign an appropriate QR version for your data (highly recommended). Returns Type Description GeneratedBarcode A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream. CreateQrCodeWithLogo(String, QRCodeLogo, Int32, Int32) Renders a QR code of given dimensions with a logo image at its center. Declaration public static GeneratedBarcode CreateQrCodeWithLogo(string value, QRCodeLogo qrCodeLogo, int size = 500, int qrVersion = 0) Parameters Type Name Description System.String value The value of the QR code as a string. Also suitable for URLS. QRCodeLogo qrCodeLogo A QRCodeLogo class instance representing your desired logo image settings. System.Int32 size The width and height of the QR code in pixels. System.Int32 qrVersion The symbol version of the QR Code. The default value 0 will automatically assign an appropriate QR version for your data (highly recommended). Returns Type Description GeneratedBarcode A GeneratedBarcode object for the QR code which can be manipulated, annotated and saved to a System.Drawing.Image, an object, image file, PDF, MediaURL or data stream."
  },
  "api/IronBarCode.QRCodeWriter.QrErrorCorrectionLevel.html": {
    "href": "api/IronBarCode.QRCodeWriter.QrErrorCorrectionLevel.html",
    "title": "Class QRCodeWriter.QrErrorCorrectionLevel | C# BarCode API | IronBarCode",
    "keywords": "Class QRCodeWriter.QrErrorCorrectionLevel The error correction level of a QR code. A higher QRCodeWriter.QrErrorCorrectionLevel creates more complex QR codes, which are less prone to reading errors. They may also be readable if damaged or partially obscured. Inheritance System.Object QRCodeWriter.QrErrorCorrectionLevel Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class QrErrorCorrectionLevel : Enum Fields High QR Code error correction Level Q. Approximately 25% of QR data can be recovered. Declaration public const QRCodeWriter.QrErrorCorrectionLevel High Field Value Type Description QRCodeWriter.QrErrorCorrectionLevel Highest QR Code error correction Level H. Approximately 30% of QR data can be recovered. Level H allows sufficient capacity for logo images or graphics to be stamped into QR codes. Declaration public const QRCodeWriter.QrErrorCorrectionLevel Highest Field Value Type Description QRCodeWriter.QrErrorCorrectionLevel Low QR Code error correction Level L. Approximately 7% of QR data can be recovered. Declaration public const QRCodeWriter.QrErrorCorrectionLevel Low Field Value Type Description QRCodeWriter.QrErrorCorrectionLevel Medium QR Code error correction Level M. Approximately 15% of QR data can be recovered. Declaration public const QRCodeWriter.QrErrorCorrectionLevel Medium Field Value Type Description QRCodeWriter.QrErrorCorrectionLevel value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.ReadingSpeed.html": {
    "href": "api/IronBarCode.ReadingSpeed.html",
    "title": "Class ReadingSpeed | C# BarCode API | IronBarCode",
    "keywords": "Class ReadingSpeed Specify the reading speed of IronBarcode. Setting a more detailed option will use more CPU and take longer. Please understand that pre-processing is CPU-heavy and we recommend experimenting with different settings starting with the lowest settings first and gradually working up from there. Inheritance System.Object ReadingSpeed Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public sealed class ReadingSpeed : Enum Fields Balanced Light Processing is performed to attempt to clarify the barcode area and make it stand out more for the reader. Declaration public const ReadingSpeed Balanced Field Value Type Description ReadingSpeed Detailed Medium Processing is performed to attempt to clarify the barcode area and make it stand out more for the reader. This is a CPU-intensive operation. We recommend experimenting with all levels of processing to ensure you are using the weakest one required to improve performance. Declaration public const ReadingSpeed Detailed Field Value Type Description ReadingSpeed ExtremeDetail Heavy Processing is performed to attempt to clarify the barcode area and make it stand out more for the reader. Please use this ReadingSpeed if you are trying to read multiple barcodes with the same values in one input file. This is a very CPU-intensive operation and may still not improve blurry barcodes or noisy images. Please consider using our filters: https://ironsoftware.com/csharp/ocr/tutorials/c-sharp-ocr-image-filters/ Declaration public const ReadingSpeed ExtremeDetail Field Value Type Description ReadingSpeed Faster No processing (Default). Barcode images are not preprocessed at all. Declaration public const ReadingSpeed Faster Field Value Type Description ReadingSpeed value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronBarCode.SharpenFilter.html": {
    "href": "api/IronBarCode.SharpenFilter.html",
    "title": "Class SharpenFilter | C# BarCode API | IronBarCode",
    "keywords": "Class SharpenFilter A filter to apply Gaussian sharpening to an image. Inheritance System.Object SharpenFilter Implements IImageFilter Namespace : IronBarCode Assembly : IronBarCode.dll Syntax public class SharpenFilter : Object, IImageFilter Constructors SharpenFilter() Initializes a new instance of the SharpenFilter class. Declaration public SharpenFilter() SharpenFilter(Single) Initializes a new instance of the SharpenFilter class with the specified Sigma. Declaration public SharpenFilter(float sigma) Parameters Type Name Description System.Single sigma The 'Sigma' value representing the weight of the blur. Properties Sigma The 'Sigma' value representing the weight of the blur to remove. Default = 3.0f. Declaration public float Sigma { get; set; } Property Value Type Description System.Single Implements IImageFilter"
  }
}
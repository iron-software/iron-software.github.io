{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronOCR - The OCR & Tesseract Library for .NET | C# OCR & Tesseract API | IronOCR",
    "keywords": "IronOCR - The OCR & Tesseract Library for .NET IronOCR is an advanced OCR (Optical Character Recognition) library for C# and .NET IronOCR reads Text, Barcodes & QR from all major image and PDF formats using the latest Tesseract 5 engine. This library adds OCR functionality to Desktop, Console and Web applications in minutes. IronOCR's Unique Features: Pure .Net OCR API All OCR tasks run locally (no SAAS) 125 languages Barcode & QR Code reading Corrects low quality, noisy and distorted scans Performance tuned above and beyond any other known build of Tesseract OCR. Reads PDFs Can export searchable PDF documents from OCR Reads multi-page TIFFs Can save any OCR Scan to a searchable PDF document or XHTML Data output options include: Plain Text, Barcode Data and an OCR Result class containing paragraphs, lines, words, and characters. Language Support 125 Languages including: Arabic, Chinese, English, Finnish, French, German, Hebrew, Italian, Japanese, Korean, Portuguese, Russian, Spanish... Custom language packs can also be created. Get Started Quickstart : https://ironsoftware.com/csharp/ocr/ Install With NuGet : https://www.nuget.org/packages/IronOcr/ Compatibility IronOcr provides Tesseract OCR on Mac, Windows, Linux, Azure and Docker for: .Net Framework 4.0 + .Net Standard 2.0 + .Net Core 2.0 + .Net 5 Mono for MacOS and Linux Xamarin for MacOS C# Code Example using IronOcr; var Ocr = new IronTesseract(); Ocr.Language = OcrLanguage.English; using (var Input = new OcrInput(\"image.png\")) { // Input.Deskew(); // use if image not straight // Input.DeNoise(); // use if image contains digital noise var Result = Ocr.Read(Input); Console.WriteLine(Result.Text); } Further Documentation Code Samples : https://ironsoftware.com/csharp/ocr/examples/simple-csharp-ocr-tesseract/ API Reference : https://ironsoftware.com/csharp/ocr/object-reference/api/ Tutorials : https://ironsoftware.com/csharp/ocr/tutorials/how-to-read-text-from-an-image-in-csharp-net/ Support : developers@ironsoftware.com"
  },
  "api/IronOcr.AdvancedOcr.html": {
    "href": "api/IronOcr.AdvancedOcr.html",
    "title": "Class AdvancedOcr | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class AdvancedOcr An advanced OCR engine which gives the developer access to advanced Image pro-processing and calibration settings. See also IronOcr.AutoOcr for a fully automated OCR Class with fewer settings. Inheritance System.Object AdvancedOcr Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class AdvancedOcr Constructors AdvancedOcr() Declaration public AdvancedOcr() Fields CleanBackgroundNoise AdvancedOcr will clean background 'noise' , dust, speckles and signs of paper away from printed text. Works even scrupled, stained or damaged paper. RotateAndStraighten is a powerful tool, making imperfect scans OCR accurately. CPU/GPU intensive. Declaration public bool CleanBackgroundNoise Field Value Type Description System.Boolean ColorDepth Bits of color per channel per pixel. Lower ColorDepth can reduce scanning time for documents that also contain many colors or images. Declaration public int ColorDepth Field Value Type Description System.Int32 ColorSpace OCR documents can be scanned in GreyScale to reduce processing time. This may not work well for low-contrast text on a non-white backgrounds. Declaration public AdvancedOcr.OcrColorSpace ColorSpace Field Value Type Description AdvancedOcr.OcrColorSpace DetectWhiteTextOnDarkBackgrounds Automatically detects and adjusts white text on darker backgrounds such as found in microfilm, negatives and some styles of graphic design. Declaration public bool DetectWhiteTextOnDarkBackgrounds Field Value Type Description System.Boolean EnhanceContrast Enhances image contrast adaptively, which generally increases text readability both by humans ans machines. Declaration public bool EnhanceContrast Field Value Type Description System.Boolean EnhanceResolution Re-renders low quality images at a higher DPI. IronOcr works faster and more accurately with high resolution images. Useful for images scanned at under 250 DPI Declaration public bool EnhanceResolution Field Value Type Description System.Boolean InputImageType Hints the OCR Engine about the type of image being scanned, which can reduce OCR time and increase accuracy. Declaration public AdvancedOcr.InputTypes InputImageType Field Value Type Description AdvancedOcr.InputTypes Language Natural Language of the scanned documents. Default is English. Declaration public IOcrLanguagePack Language Field Value Type Description IronOcr.Languages.IOcrLanguagePack ReadBarCodes Enables Barcodes to be extracted from OCR documents, alongside the text content. Declaration public bool ReadBarCodes Field Value Type Description System.Boolean RotateAndStraighten AdvancedOcr will deskew and rotate images to be straight, upright, unbent and without perspective. RotateAndStraighten is a powerful tool, making imperfect scans OCR accurately. CPU/GPU intensive. Declaration public bool RotateAndStraighten Field Value Type Description System.Boolean Strategy Algorithm to be used for OCR text analysis. Declaration public AdvancedOcr.OcrStrategy Strategy Field Value Type Description AdvancedOcr.OcrStrategy Methods Read(Bitmap) Performs OCR on an Image. Declaration public OcrResult Read(Bitmap Bitmap) Parameters Type Name Description System.Drawing.Bitmap Bitmap Document to be scanned as a System.Drawing.Bitmap Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence, etc. Read(Bitmap, Rectangle) Performs OCR on an Image. Only Text and Barcodes within the CropArea will be scanned Declaration public OcrResult Read(Bitmap Bitmap, Rectangle CropArea) Parameters Type Name Description System.Drawing.Bitmap Bitmap Document to be scanned as a System.Drawing.Bitmap System.Drawing.Rectangle CropArea A rectangular area of the image to be scanned for OCR. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(Image) Performs OCR on an Image. Declaration public OcrResult Read(Image Image) Parameters Type Name Description System.Drawing.Image Image Document to be scanned as a System.Drawing.Image Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(Image, Rectangle) Performs OCR on an Image. Only Text and Barcodes within the CropArea will be scanned Declaration public OcrResult Read(Image Image, Rectangle CropArea) Parameters Type Name Description System.Drawing.Image Image Document to be scanned as a System.Drawing.Image System.Drawing.Rectangle CropArea A rectangular area of the image to be scanned for OCR. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(String) Performs OCR on an Image. Declaration public OcrResult Read(string ImageFilePath) Parameters Type Name Description System.String ImageFilePath Document to be scanned as an image file path. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(String, Rectangle) Performs OCR on an Image. Only Text and Barcodes within the CropArea will be scanned Declaration public OcrResult Read(string ImageFilePath, Rectangle CropArea) Parameters Type Name Description System.String ImageFilePath Document to be scanned as an image file path. System.Drawing.Rectangle CropArea A rectangular area of the image to be scanned for OCR. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. ReadMultiThreaded(IEnumerable<Bitmap>, Rectangle, Int32) Performs OCR on multiple images simultaneously, using multiple threads and cores for the best performance. Declaration public OcrResult ReadMultiThreaded(IEnumerable<Bitmap> Bitmaps, Rectangle CropArea, int MaximumNumberOfThreads = 4) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > Bitmaps Multiple document pages to be scanned System.Drawing.Rectangle CropArea A rectangular area of the images to be scanned for OCR. System.Int32 MaximumNumberOfThreads The maximum number of document pages to be read simultaneously. Returns Type Description OcrResult ReadMultiThreaded(IEnumerable<Bitmap>, Int32) Performs OCR on multiple images simultaneously, using multiple threads and cores for the best performance. Declaration public OcrResult ReadMultiThreaded(IEnumerable<Bitmap> Bitmaps, int MaximumNumberOfThreads = 4) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Drawing.Bitmap > Bitmaps Multiple document pages to be scanned System.Int32 MaximumNumberOfThreads The maximum number of document pages to be read simultaneously. Returns Type Description OcrResult ReadMultiThreaded(IEnumerable<Image>, Rectangle, Int32) Performs OCR on multiple images simultaneously, using multiple threads and cores for the best performance. Declaration public OcrResult ReadMultiThreaded(IEnumerable<Image> Images, Rectangle CropArea, int MaximumNumberOfThreads = 4) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Drawing.Image > Images Multiple document pages to be scanned System.Drawing.Rectangle CropArea A rectangular area of the images to be scanned for OCR. System.Int32 MaximumNumberOfThreads The maximum number of document pages to be read simultaneously. Returns Type Description OcrResult ReadMultiThreaded(IEnumerable<Image>, Int32) Performs OCR on multiple images simultaneously, using multiple threads and cores for the best performance. Declaration public OcrResult ReadMultiThreaded(IEnumerable<Image> Images, int MaximumNumberOfThreads = 4) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Drawing.Image > Images Multiple document pages to be scanned System.Int32 MaximumNumberOfThreads The maximum number of document pages to be read simultaneously. Returns Type Description OcrResult ReadMultiThreaded(IEnumerable<String>, Rectangle, Int32) Performs OCR on multiple images simultaneously, using multiple threads and cores for the best performance. Declaration public OcrResult ReadMultiThreaded(IEnumerable<string> ImageFilePaths, Rectangle CropArea, int MaximumNumberOfThreads = 4) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > ImageFilePaths File paths to multiple images System.Drawing.Rectangle CropArea A rectangular area of the images to be scanned for OCR. System.Int32 MaximumNumberOfThreads The maximum number of document pages to be read simultaneously. Returns Type Description OcrResult Returns paginated results for all pages, containing Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. ReadMultiThreaded(IEnumerable<String>, Int32) Performs OCR on multiple images simultaneously, using multiple threads and cores for the best performance. Declaration public OcrResult ReadMultiThreaded(IEnumerable<string> ImageFilePaths, int MaximumNumberOfThreads = 4) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > ImageFilePaths File paths to multiple images System.Int32 MaximumNumberOfThreads The maximum number of document pages to be read simultaneously. Returns Type Description OcrResult Returns paginated results for all pages, containing Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Inherited members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.AdvancedOcr.InputTypes.html": {
    "href": "api/IronOcr.AdvancedOcr.InputTypes.html",
    "title": "Enum AdvancedOcr.InputTypes | C# OCR & Tesseract API | IronOCR",
    "keywords": "Enum AdvancedOcr.InputTypes Types of document to expect to read. Namespace : IronOcr Assembly : IronOcr.dll Syntax public enum InputTypes Fields Name Description AutoDetect Document Snippet"
  },
  "api/IronOcr.AdvancedOcr.OcrColorSpace.html": {
    "href": "api/IronOcr.AdvancedOcr.OcrColorSpace.html",
    "title": "Enum AdvancedOcr.OcrColorSpace | C# OCR & Tesseract API | IronOCR",
    "keywords": "Enum AdvancedOcr.OcrColorSpace IronOcr can scan images in full color for greater accuracy, or in black, white and gray for speed. Namespace : IronOcr Assembly : IronOcr.dll Syntax public enum OcrColorSpace Fields Name Description Color Documents are scanned by the OCR software in full color GrayScale Documents are converted to shades of Gray"
  },
  "api/IronOcr.AdvancedOcr.OcrStrategy.html": {
    "href": "api/IronOcr.AdvancedOcr.OcrStrategy.html",
    "title": "Enum AdvancedOcr.OcrStrategy | C# OCR & Tesseract API | IronOCR",
    "keywords": "Enum AdvancedOcr.OcrStrategy IronOcr image text analysis algorithms Namespace : IronOcr Assembly : IronOcr.dll Syntax public enum OcrStrategy Fields Name Description Advanced Fast"
  },
  "api/IronOcr.AutoOcr.html": {
    "href": "api/IronOcr.AutoOcr.html",
    "title": "Class AutoOcr | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class AutoOcr A user-friendly OCR engine which extracts text and barcodes from images. AutoOcr \"looks\" at each image before scanning it, and uses meta-data and computer-vision to predict intelligent default settings for each setting. See also IronOcr.AdvancedOcr for faster, more specific OCR results. Inheritance System.Object AutoOcr Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class AutoOcr Constructors AutoOcr() Declaration public AutoOcr() Fields Language Natural Language of the scanned documents. Default is English. Declaration public IOcrLanguagePack Language Field Value Type Description IronOcr.Languages.IOcrLanguagePack ReadBarCodes Enables Barcodes to be extracted from OCR documents, alongside the text content. Declaration public bool ReadBarCodes Field Value Type Description System.Boolean Methods Read(Bitmap) Performs OCR on an Image. Declaration public OcrResult Read(Bitmap Bitmap) Parameters Type Name Description System.Drawing.Bitmap Bitmap Document to be scanned as a System.Drawing.Bitmap Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence, etc. Read(Bitmap, Rectangle) Performs OCR on an Image. Only Text and Barcodes within the CropArea will be scanned Declaration public OcrResult Read(Bitmap Bitmap, Rectangle CropArea) Parameters Type Name Description System.Drawing.Bitmap Bitmap Document to be scanned as a System.Drawing.Bitmap System.Drawing.Rectangle CropArea A rectangular area of the image to be scanned for OCR. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(Image) Performs OCR on an Image. Declaration public OcrResult Read(Image Image) Parameters Type Name Description System.Drawing.Image Image Document to be scanned as a System.Drawing.Image Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(Image, Rectangle) Performs OCR on an Image. Only Text and Barcodes within the CropArea will be scanned Declaration public OcrResult Read(Image Image, Rectangle CropArea) Parameters Type Name Description System.Drawing.Image Image Document to be scanned as a System.Drawing.Image System.Drawing.Rectangle CropArea A rectangular area of the image to be scanned for OCR. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(String) Performs OCR on an Image. Declaration public OcrResult Read(string ImageFilePath) Parameters Type Name Description System.String ImageFilePath Document to be scanned as an image file path. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Read(String, Rectangle) Performs OCR on an Image. Only Text and Barcodes within the CropArea will be scanned Declaration public OcrResult Read(string ImageFilePath, Rectangle CropArea) Parameters Type Name Description System.String ImageFilePath Document to be scanned as an image file path. System.Drawing.Rectangle CropArea A rectangular area of the image to be scanned for OCR. Returns Type Description OcrResult Returns Text, Barcodes, and an object model containing rich OCR data such as text-sizes, fonts, statistical confidence etc. Inherited members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.html": {
    "href": "api/IronOcr.html",
    "title": "Namespace IronOcr | C# OCR & Tesseract API | IronOCR",
    "keywords": "Namespace IronOcr Classes AdvancedOcr An advanced OCR engine which gives the developer access to advanced Image pro-processing and calibration settings. See also IronOcr.AutoOcr for a fully automated OCR Class with fewer settings. AutoOcr A user-friendly OCR engine which extracts text and barcodes from images. AutoOcr \"looks\" at each image before scanning it, and uses meta-data and computer-vision to predict intelligent default settings for each setting. See also IronOcr.AdvancedOcr for faster, more specific OCR results. License Allows IronOcr license keys to be applied globally across an application. Apply your license using LicenseKey in your code, or add the key IronOcr.LicenseKey to Web.Conbfig or App.Config OcrResult Detailed results from reading one or more images using IronOcr. OcrResult contains text, barcodes, images and a detailed object model for every discovered object on each page, with detailed meta-data. OcrResult.OcrBarcode Object describing a Barcode or QR code discovered by IronOcr. 20+ formats are supported. OcrResult.OcrCharacter An object representing each instance of each character (symbol) of readable text discovered with OCR. OcrResult.OcrLine An object representing each line of text discovered in an OCRResult OcrResult.OcrPage An object representing a whole page of content read by IronOcr. May contains text & barcodes alongside detailed enumerable meta-data OcrResult.OcrParagraph An object representing each paragraph of text read by IronOcr OcrResult.OcrWord An object representing each word read by IronOcr Enums AdvancedOcr.InputTypes Types of document to expect to read. AdvancedOcr.OcrColorSpace IronOcr can scan images in full color for greater accuracy, or in black, white and gray for speed. AdvancedOcr.OcrStrategy IronOcr image text analysis algorithms OcrResult.OcrBarcode.BarcodeFormat Describes types of barcode OcrResult.TextFlow The direction in which OCR text should be read. For Example English text is read \"LeftToRight\""
  },
  "api/IronOcr.License.html": {
    "href": "api/IronOcr.License.html",
    "title": "Class License | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class License Allows IronOcr license keys to be applied globally across an application. Apply your license using LicenseKey in your code, or add the key IronOcr.LicenseKey to Web.Conbfig or App.Config Inheritance System.Object License Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public static class License Fields LicenseKey License IronOcr for deployment. Get Licensed at http://ironsoftware.com/csharp/ocr/licensing/ A License key can also be added to Web.Config or App.Config as IronOcr.LicenseKey Declaration public static string LicenseKey Field Value Type Description System.String Methods IsValidLicense(String) Determines whether a license key is valid. Declaration public static bool IsValidLicense(string LicenseKey) Parameters Type Name Description System.String LicenseKey IronOcr license key as a string Returns Type Description System.Boolean Inherited members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.html": {
    "href": "api/IronOcr.OcrResult.html",
    "title": "Class OcrResult | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult Detailed results from reading one or more images using IronOcr. OcrResult contains text, barcodes, images and a detailed object model for every discovered object on each page, with detailed meta-data. Inheritance System.Object OcrResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrResult Constructors OcrResult() Declaration public OcrResult() Properties Barcodes All Barcodes and QR codes discovered within the document. Declaration public IEnumerable<OcrResult.OcrBarcode> Barcodes { get; } Property Value Type Description System.Collections.Generic.IEnumerable < OcrResult.OcrBarcode > IEnumerable< OcrResult.OcrBarcode > FontName The name of the most common font / typeface the document. If the font is unknown, a close visual match will be chosen. Declaration public string FontName { get; } Property Value Type Description System.String FontSize The most common font size within the document. In Pixels. Declaration public double FontSize { get; } Property Value Type Description System.Double Pages A detailed object model containing every paragraph, line of text, word and character in every page of the scanned document with detailed images, coordinates and meta-data. Declaration public List<OcrResult.OcrPage> Pages { get; } Property Value Type Description System.Collections.Generic.List < OcrResult.OcrPage > Text Gets the full text content for the document. Each Lines as seen on the paper document with be terminated with System.NewLine. Paragraphs are separated by 2 x System.NewLine. Pages are separated by 4 x System.NewLine Declaration public string Text { get; } Property Value Type Description System.String Plain UTF-8 text. Methods SaveAsTextFile(String) Saves the OCR Text to a file. Declaration public void SaveAsTextFile(string FilePath) Parameters Type Name Description System.String FilePath The file path. ToString() The full OCR text as a UTF-8 string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.OcrBarcode.BarcodeFormat.html": {
    "href": "api/IronOcr.OcrResult.OcrBarcode.BarcodeFormat.html",
    "title": "Enum OcrResult.OcrBarcode.BarcodeFormat | C# OCR & Tesseract API | IronOCR",
    "keywords": "Enum OcrResult.OcrBarcode.BarcodeFormat Describes types of barcode Namespace : IronOcr Assembly : IronOcr.dll Syntax public enum BarcodeFormat Fields Name Description Aztec CodaBar Code128 Code39 Code93 DataMatrix EAN13 IMB ITF MaxiCode MSI PDF417 Plessey QRCode Rss14 RssExpanded UPCA UPCE"
  },
  "api/IronOcr.OcrResult.OcrBarcode.html": {
    "href": "api/IronOcr.OcrResult.OcrBarcode.html",
    "title": "Class OcrResult.OcrBarcode | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult.OcrBarcode Object describing a Barcode or QR code discovered by IronOcr. 20+ formats are supported. Inheritance System.Object OcrResult.OcrBarcode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrBarcode Constructors OcrBarcode() Declaration public OcrBarcode() Fields BarcodeNumber The position of this barcode within an OcrResult.OcrPage . The first barcode is numbered 1, rather than zero. Declaration public int BarcodeNumber Field Value Type Description System.Int32 Format Describes the type of barcode discovered. Declaration public OcrResult.OcrBarcode.BarcodeFormat Format Field Value Type Description OcrResult.OcrBarcode.BarcodeFormat Location The location and size of this barcode as discovered in Image Declaration public Rectangle Location Field Value Type Description System.Drawing.Rectangle Value The value of this barcode as a string. It may represent numbers, a url, or UTF-8 text. Declaration public string Value Field Value Type Description System.String Properties Height Height of the barcode in Pixels. Height may be approximated for 1 dimensional barcodes. Declaration public int Height { get; } Property Value Type Description System.Int32 Image An image of this barcode Declaration public Image Image { get; } Property Value Type Description System.Drawing.Image OcrObjectId A unique name for this barcode within an OcrResult . Declaration public string OcrObjectId { get; } Property Value Type Description System.String PageNumber The OcrResult page number this barcode was found on Declaration public int PageNumber { get; } Property Value Type Description System.Int32 Width Width of the barcode in Pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 X Horizontal location of this barcode relative to the left edge of the page. Measured in pixels. Declaration public int X { get; } Property Value Type Description System.Int32 Y Vertical location of this barcode relative to the top edge of the page. Measured in pixels. Declaration public int Y { get; } Property Value Type Description System.Int32 Methods ToString() Returns the Value of this barcode as a string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.OcrCharacter.html": {
    "href": "api/IronOcr.OcrResult.OcrCharacter.html",
    "title": "Class OcrResult.OcrCharacter | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult.OcrCharacter An object representing each instance of each character (symbol) of readable text discovered with OCR. Inheritance System.Object OcrResult.OcrCharacter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrCharacter Constructors OcrCharacter() Declaration public OcrCharacter() Fields CharacterNumber The position of this character within the word it was forms a part of Declaration public int CharacterNumber Field Value Type Description System.Int32 Confidence The percentage statistical confidence that this character has been correctly identified. Declaration public double Confidence Field Value Type Description System.Double LineNumber The line number in which this character was found Declaration public int LineNumber Field Value Type Description System.Int32 Location The location and size of this character as discovered in Image Declaration public Rectangle Location Field Value Type Description System.Drawing.Rectangle ParagraphNumber The paragraph in which this character was found Declaration public int ParagraphNumber Field Value Type Description System.Int32 Text Return the characters as a single length UFT-8 string. Declaration public string Text Field Value Type Description System.String WordNumber The word number in which this character was found Declaration public int WordNumber Field Value Type Description System.Int32 Properties Height Height of the character in pixels. Declaration public int Height { get; } Property Value Type Description System.Int32 Image An image of this character Declaration public Image Image { get; } Property Value Type Description System.Drawing.Image OcrObjectId A unique name for this character instance within the OcrResults model. Declaration public string OcrObjectId { get; } Property Value Type Description System.String PageNumber The OcrResult page number this character was found on Declaration public int PageNumber { get; } Property Value Type Description System.Int32 Width Width of the character in pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 X Horizontal location of the character relative to the left edge of the page. Measured in pixels. Declaration public int X { get; } Property Value Type Description System.Int32 Y Vertical location of the character relative to the top edge of the page. Measured in pixels. Declaration public int Y { get; } Property Value Type Description System.Int32 Methods ToString() Return the characters as a single length UFT-8 string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.OcrLine.html": {
    "href": "api/IronOcr.OcrResult.OcrLine.html",
    "title": "Class OcrResult.OcrLine | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult.OcrLine An object representing each line of text discovered in an OCRResult Inheritance System.Object OcrResult.OcrLine Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrLine Constructors OcrLine() Declaration public OcrLine() Fields BaselineAngle The angle of skew (rotation) of the text, measured in counter-clockwise degrees. Declaration public double BaselineAngle Field Value Type Description System.Double BaselineOffset The displacement (signed distance) of the baseline of this text-line relative to its top edge (see Y ). For example the bottom baseline would sit at the bottom of a letter 'o', \"a\" or any number. The letters 'y' and 'g' have tails which drop below the baseline. Declaration public int BaselineOffset Field Value Type Description System.Int32 Confidence The mean (average) percentage statistical confidence IronOcr has in its analysis of this line of text. Values range from 0-100. Declaration public double Confidence Field Value Type Description System.Double LineNumber The number of this line within its enclosing paragraph. One based. Declaration public int LineNumber Field Value Type Description System.Int32 Location The location and size of this line of text as discovered in Image Declaration public Rectangle Location Field Value Type Description System.Drawing.Rectangle ParagraphNumber The paragraph in which this line was found Declaration public int ParagraphNumber Field Value Type Description System.Int32 Words Objects for word discovered within this line of text Declaration public List<OcrResult.OcrWord> Words Field Value Type Description System.Collections.Generic.List < OcrResult.OcrWord > Properties Height Height of the line of text, in pixels. Declaration public int Height { get; } Property Value Type Description System.Int32 Image An image of this entire line of text Declaration public Image Image { get; } Property Value Type Description System.Drawing.Image OcrObjectId A unique name for this line of text within an OcrResult . Declaration public string OcrObjectId { get; } Property Value Type Description System.String PageNumber The OcrResult page number this line of text was found on Declaration public int PageNumber { get; } Property Value Type Description System.Int32 Text The full text of this line of words as a UTF-8 string. EAch word is separated by a single 'space' character. Declaration public string Text { get; } Property Value Type Description System.String Width Width of the line of text, in pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 WordCount The number of words discovered within this line of text Declaration public int WordCount { get; } Property Value Type Description System.Int32 X Horizontal location of this line of text relative to the left edge of the page. Measured in pixels. Declaration public int X { get; } Property Value Type Description System.Int32 Y Vertical location of this line of text relative to the top edge of the page. Measured in pixels. Declaration public int Y { get; } Property Value Type Description System.Int32 Methods ToString() Return the line's full Text as a string Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.OcrPage.html": {
    "href": "api/IronOcr.OcrResult.OcrPage.html",
    "title": "Class OcrResult.OcrPage | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult.OcrPage An object representing a whole page of content read by IronOcr. May contains text & barcodes alongside detailed enumerable meta-data Inheritance System.Object OcrResult.OcrPage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrPage Constructors OcrPage() Declaration public OcrPage() Fields Barcodes Objects describing each barcode found in this scanned page. Declaration public List<OcrResult.OcrBarcode> Barcodes Field Value Type Description System.Collections.Generic.List < OcrResult.OcrBarcode > Image An image of this entire page Declaration public Bitmap Image Field Value Type Description System.Drawing.Bitmap Paragraphs Objects describing each paragraph found in this scanned page. Declaration public List<OcrResult.OcrParagraph> Paragraphs Field Value Type Description System.Collections.Generic.List < OcrResult.OcrParagraph > Properties FontName The name of the most common typeface discovered within this page. If a typeface is unknown, the closest match will be returned. Declaration public string FontName { get; } Property Value Type Description System.String FontSize The most common text size discovered within this page. Measured in pixels. Declaration public double FontSize { get; } Property Value Type Description System.Double Height Height of the input document image in pixels (measured after it has been unrotated and deskewed by RotateAndStraighten ) Declaration public int Height { get; } Property Value Type Description System.Int32 PageNumber The number of this page within an OcrResult . Being 1 based, the first page is numbered 1, rather than zero. Declaration public int PageNumber { get; } Property Value Type Description System.Int32 Text Full text discovered within this page as a UFT-8 string. Each paragraph of text will be separated by 2 x Environment.NewLine Declaration public string Text { get; } Property Value Type Description System.String Width Width of the input document image in pixels (measured after it has been unrotated and deskewed by RotateAndStraighten ) Declaration public int Width { get; } Property Value Type Description System.Int32 WordCount The number of words discovered by IronOcr in this page. Declaration public int WordCount { get; } Property Value Type Description System.Int32 Words Objects describing each word found in this scanned page. Declaration public IEnumerable<OcrResult.OcrWord> Words { get; } Property Value Type Description System.Collections.Generic.IEnumerable < OcrResult.OcrWord > Methods ToString() Return the pages's full Text Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.OcrParagraph.html": {
    "href": "api/IronOcr.OcrResult.OcrParagraph.html",
    "title": "Class OcrResult.OcrParagraph | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult.OcrParagraph An object representing each paragraph of text read by IronOcr Inheritance System.Object OcrResult.OcrParagraph Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrParagraph Constructors OcrParagraph() Declaration public OcrParagraph() Fields Confidence The percentage statistical confidence IronOcr has in analysis of this paragraph of text. Values range from 0-100. For higher contrast (lower Confidence scores for words which may have been read incorrectly, try setting Strategy = Advanced and looking at the confidence of each individual Word . Declaration public double Confidence Field Value Type Description System.Double Lines Objects describing each line of text in this paragraph. Declaration public List<OcrResult.OcrLine> Lines Field Value Type Description System.Collections.Generic.List < OcrResult.OcrLine > Location The location and size of this paragraph as discovered in Image Declaration public Rectangle Location Field Value Type Description System.Drawing.Rectangle ParagraphNumber The position of this word within its page Declaration public int ParagraphNumber Field Value Type Description System.Int32 TextDirection The direction in which text should be read within this paragraph. Declaration public OcrResult.TextFlow TextDirection Field Value Type Description OcrResult.TextFlow TextOrientation The clockwise rotation of this text relative to the top of the page. Measured in degrees. A value of 0 means the text is perfectly vertical. Declaration public double TextOrientation Field Value Type Description System.Double Properties FontName The name of the most common font / typeface in this the paragraph. If the font is unknown, a close visual match will be chosen. Declaration public string FontName { get; } Property Value Type Description System.String FontSize The most common font size for words within the paragraph. Measured in Pixels. Declaration public double FontSize { get; } Property Value Type Description System.Double Height Height of the paragraph in pixels. Declaration public int Height { get; } Property Value Type Description System.Int32 Image An image of this word Declaration public Image Image { get; } Property Value Type Description System.Drawing.Image OcrObjectId A unique name for this paragraph of text within the OcrResults model. Declaration public string OcrObjectId { get; } Property Value Type Description System.String PageNumber The OcrResult page number this paragraph was found on Declaration public int PageNumber { get; } Property Value Type Description System.Int32 Text Full text discovered within this paragraph as a UFT-8 string. Each line of text - as read - will be separated by one Environment.NewLine Declaration public string Text { get; } Property Value Type Description System.String Width Width of the paragraph in pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 WordCount Number of words in this paragraph Declaration public int WordCount { get; } Property Value Type Description System.Int32 Words Objects describing each word in this paragraph. Declaration public IEnumerable<OcrResult.OcrWord> Words { get; } Property Value Type Description System.Collections.Generic.IEnumerable < OcrResult.OcrWord > X Horizontal location of the paragraph relative to the left edge of the page. Measured in pixels. Declaration public int X { get; } Property Value Type Description System.Int32 Y Vertical location of the paragraph relative to the top edge of the page. Measured in pixels. Declaration public int Y { get; } Property Value Type Description System.Int32 Methods ToString() Return the paragraph's Text Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.OcrWord.html": {
    "href": "api/IronOcr.OcrResult.OcrWord.html",
    "title": "Class OcrResult.OcrWord | C# OCR & Tesseract API | IronOCR",
    "keywords": "Class OcrResult.OcrWord An object representing each word read by IronOcr Inheritance System.Object OcrResult.OcrWord Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : IronOcr Assembly : IronOcr.dll Syntax public class OcrWord Constructors OcrWord() Declaration public OcrWord() Fields Characters The individual characters which make up this word Declaration public List<OcrResult.OcrCharacter> Characters Field Value Type Description System.Collections.Generic.List < OcrResult.OcrCharacter > Confidence The percentage statistical confidence IronOcr has in analysis of this word. Values range from 0-100. For higher contrast (lower Confidence scores for words which may have been read incorrectly, try setting Strategy = Advanced Declaration public double Confidence Field Value Type Description System.Double FontIsBold Word is printed bold. Declaration public bool FontIsBold Field Value Type Description System.Boolean FontIsCaligraphic Word is written in ornate or luminary script Declaration public bool FontIsCaligraphic Field Value Type Description System.Boolean FontIsFixedWidth Word's typeface is fixed-width Declaration public bool FontIsFixedWidth Field Value Type Description System.Boolean FontIsItalic Word is italic. Declaration public bool FontIsItalic Field Value Type Description System.Boolean FontIsSerif Word has serif markings Declaration public bool FontIsSerif Field Value Type Description System.Boolean FontIsUnderlined Word is underlined Declaration public bool FontIsUnderlined Field Value Type Description System.Boolean FontName The name of the typeface this word was printed in. If a typeface is unknown, the closest match will be returned. Declaration public string FontName Field Value Type Description System.String FontSize The height of the typeface letters in this typeface. Measured in pixels. Declaration public double FontSize Field Value Type Description System.Double LanguageCode The natural language which IronOcr believes this word belongs to. Declaration public string LanguageCode Field Value Type Description System.String LineNumber The line number in which this word was found Declaration public int LineNumber Field Value Type Description System.Int32 Location The location and size of this word as discovered in Image Declaration public Rectangle Location Field Value Type Description System.Drawing.Rectangle ParagraphNumber The paragraph in which this word was found Declaration public int ParagraphNumber Field Value Type Description System.Int32 Text The word as read, rendered as a UTF-8 string with no whitespace. Declaration public string Text Field Value Type Description System.String TextDirection The direction in which this word should be read. Declaration public OcrResult.TextFlow TextDirection Field Value Type Description OcrResult.TextFlow WordNumber The position of this word within a line of text Declaration public int WordNumber Field Value Type Description System.Int32 Properties Height Height of the word in pixels. Declaration public int Height { get; } Property Value Type Description System.Int32 Image An image of this word Declaration public Image Image { get; } Property Value Type Description System.Drawing.Image OcrObjectId A unique name for this word within an OcrResult . Declaration public string OcrObjectId { get; } Property Value Type Description System.String PageNumber The OcrResult page number this word was found on Declaration public int PageNumber { get; } Property Value Type Description System.Int32 Width Width of the word in pixels. Declaration public int Width { get; } Property Value Type Description System.Int32 X Horizontal location of the word relative to the left edge of the page. Measured in pixels. Declaration public int X { get; } Property Value Type Description System.Int32 Y Vertical location of the word relative to the top edge of the page. Measured in pixels. Declaration public int Y { get; } Property Value Type Description System.Int32 Methods ToString() Return the word's Text Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Inherited members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone()"
  },
  "api/IronOcr.OcrResult.TextFlow.html": {
    "href": "api/IronOcr.OcrResult.TextFlow.html",
    "title": "Enum OcrResult.TextFlow | C# OCR & Tesseract API | IronOCR",
    "keywords": "Enum OcrResult.TextFlow The direction in which OCR text should be read. For Example English text is read \"LeftToRight\" Namespace : IronOcr Assembly : IronOcr.dll Syntax public enum TextFlow Fields Name Description BottomToTop Text is read vertically, bottom to top (upwards in columns) LeftToRight Text is read horizontally, left to right RightToLeft Text is read horizontally, right to left TopToBottom Text is read vertically, top to bottom (downwards in columns)"
  }
}
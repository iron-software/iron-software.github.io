{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronPDF | C# PDF Library Documentation | IronPDF",
    "keywords": "IronPDF IronPDF is a .NET library allowing the generation, reading, editing & saving PDF files in .NET projects. IronPDF features HTML to PDF for .NET Core, Standard, & Framework with full HTML to PDF support including CSS3 and JS. There is a quick-start guide at https://ironpdf.com/docs/ Compatibility Welcome the the cutting edge of .NET PDF rendering and manipulation technology with IronPDF now featuring Chrome identical HTML rendering with full support for: Generate PDFs in C# with HTML, MVC, ASPX, & images. Supports .NET Core 2, 3 & .NET 5, 6, 7, 8 for Windows, Linux, macOs and Azure. Supports applications and websites developed in .NET FrameWork 4+ for Windows and Azure HTML5 Bootstrap and Responsive CSS3 JavaScript including Angular and React SVG and all common image assets To Install PM> Install-Package IronPdf Remove any reference to IronPdf.Threading which is now legacy software. The IronPdf main package is threading and async compatible! Try out the new 2021 API We haven't broken the IronPDF API you are using, it will remain! However, the old style is being superseded by a better one to give you more control. For examples you now have Print options and Http Login controls specific to your renderer using IronPdf; //... ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.FitToPaperWidth = true; Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Screen; Renderer.RenderingOptions.PrintHtmlBackgrounds = true; Renderer.RenderingOptions.CreatePdfFormsFromHtml = true; var doc = Renderer.RenderHtmlAsPdf(\"<h1>Hello world!</h1>\"); //var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); //var doc = Renderer.RenderHtmlFileAsPdf(\"example.html\"); doc.SaveAs(\"google_chrome.pdf\"); Pixel perfect Chrome rendering This example will give you PDFs which are pixel perfect to the latest chrome desktop browser's \"print to pdf\" functionality: ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Print; Renderer.RenderingOptions.PrintHtmlBackgrounds = false; Renderer.RenderingOptions.CreatePdfFormsFromHtml = false; var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); However...we would recommend using improved features such as: Using screen stylesheets to print PDFs which are less fiddly to develop and more true to existing web assets. Responsive layout support Creating PDF Forms from your HTML form elements. ChromePdfRenderer Renderer = new ChromePdfRenderer(); Renderer.RenderingOptions.CssMediaType = IronPdf.Rendering.PdfCssMediaType.Screen; Renderer.RenderingOptions.PrintHtmlBackgrounds = true; Renderer.RenderingOptions.CreatePdfFormsFromHtml = true; Renderer.RenderingOptions.ViewPortWidth = 1080 ; //px var doc = Renderer.RenderUrlAsPdf(\"https://www.google.com/\"); Use every CPU core available Multithreading and Async support for our Chrome rendering engine is in a different league to all previous builds. For enterprise grade multi-threading use our Chrome in your existing threads and it will work. For web applications this also takes zero setup. For batch processing for HtmlToPdf we suggest using the built in .NET Parallel.ForEach We love async and have provided Async variants of methods such as ChromePdfRenderer.RenderHtmlAsPdf Documentation Links Code Samples : https://ironpdf.com/examples/using-html-to-create-a-pdf/ MSDN Class Reference : https://ironpdf.com/object-reference/api/ How-To Guides : https://ironpdf.com/how-to/html-file-to-pdf/ Tutorials : https://ironpdf.com/tutorials/html-to-pdf/ Support : developers@ironsoftware.com MSDN Style Class Reference Explore the IronPDF API in the left navigation of this page. Popular Links include: IronPdf Namespace Index of all IronPdf Classes IronPdf.ChromePdfRenderer Html to PDF generator IronPdf.ChromePdfRenderOptions Html to PDF generation settings IronPdf.AspxToPdf ASPX to PDF generator IronPdf.ImageToPdfConverter Image to PDF generator IronPdf.PdfDocument A class to open, manipulate, extract data and save PDF files"
  },
  "api/IronPdf.Annotations.html": {
    "href": "api/IronPdf.Annotations.html",
    "title": "Namespace IronPdf.Annotations | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Annotations Classes TextAnnotation Defines a Sticky-Note style PDF annotation. AddTextAnnotation(TextAnnotation, Int32, Int32, Int32, Int32, Int32) TextAnnotation.AnnotationIcon Icons used to interact with (open/close) the annotation with the PDF page."
  },
  "api/IronPdf.Annotations.TextAnnotation.AnnotationIcon.html": {
    "href": "api/IronPdf.Annotations.TextAnnotation.AnnotationIcon.html",
    "title": "Class TextAnnotation.AnnotationIcon | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextAnnotation.AnnotationIcon Icons used to interact with (open/close) the annotation with the PDF page. Inheritance System.Object TextAnnotation.AnnotationIcon Namespace : IronPdf.Annotations Assembly : IronPdf.dll Syntax public sealed class AnnotationIcon : Enum Fields Comment A Comment Icon Declaration public const TextAnnotation.AnnotationIcon Comment Field Value Type Description TextAnnotation.AnnotationIcon Help A Help Icon Declaration public const TextAnnotation.AnnotationIcon Help Field Value Type Description TextAnnotation.AnnotationIcon Insert An 'Insert' Icon Declaration public const TextAnnotation.AnnotationIcon Insert Field Value Type Description TextAnnotation.AnnotationIcon Key A Key Icon Declaration public const TextAnnotation.AnnotationIcon Key Field Value Type Description TextAnnotation.AnnotationIcon NewParagraph A New Paragraph Icon Declaration public const TextAnnotation.AnnotationIcon NewParagraph Field Value Type Description TextAnnotation.AnnotationIcon NoIcon No icon, this is useful when an annotation will be signified by an existing graphic or object. Declaration public const TextAnnotation.AnnotationIcon NoIcon Field Value Type Description TextAnnotation.AnnotationIcon Note A Note Icon Declaration public const TextAnnotation.AnnotationIcon Note Field Value Type Description TextAnnotation.AnnotationIcon Paragraph A 'Paragraph of Text' Icon Declaration public const TextAnnotation.AnnotationIcon Paragraph Field Value Type Description TextAnnotation.AnnotationIcon value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Annotations.TextAnnotation.html": {
    "href": "api/IronPdf.Annotations.TextAnnotation.html",
    "title": "Class TextAnnotation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextAnnotation Defines a Sticky-Note style PDF annotation. AddTextAnnotation(TextAnnotation, Int32, Int32, Int32, Int32, Int32) Inheritance System.Object TextAnnotation Namespace : IronPdf.Annotations Assembly : IronPdf.dll Syntax public class TextAnnotation : Object Constructors TextAnnotation() Declaration public TextAnnotation() Properties Color The color of the annotation's 'Sticky Note' Declaration public Color Color { get; set; } Property Value Type Description IronSoftware.Drawing.Color Contents The contents of the 'sticky note' annotation Declaration public string Contents { get; set; } Property Value Type Description System.String Hidden Hides the annotation from users Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean Icon An icon to visually represent the 'sticky note' annotation Declaration public TextAnnotation.AnnotationIcon Icon { get; set; } Property Value Type Description TextAnnotation.AnnotationIcon Opacity The opacity of the annotation (valid values are from 0.0 to 1.0) Declaration public double Opacity { get; set; } Property Value Type Description System.Double OpenByDefault Sets the annotation to be opened and readable by default, without user interaction Declaration public bool OpenByDefault { get; set; } Property Value Type Description System.Boolean Printable Allows the annotation to be printed when users print the PDF Declaration public bool Printable { get; set; } Property Value Type Description System.Boolean ReadOnly Allows the annotation to be printed when users print the PDF Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean Rotateable Allows the annotation to be rotated. E.g. when the containing page os rotated Declaration public bool Rotateable { get; set; } Property Value Type Description System.Boolean Subject The sub title of the annotation as displayed in the header of the 'sticky note' Declaration public string Subject { get; set; } Property Value Type Description System.String Title The main title of the annotation as displayed in the header of the 'sticky note' Declaration public string Title { get; set; } Property Value Type Description System.String Methods ToString() Returns a System.String that represents this annotation. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance."
  },
  "api/IronPdf.Bookmarks.BookmarkDestinations.html": {
    "href": "api/IronPdf.Bookmarks.BookmarkDestinations.html",
    "title": "Class BookmarkDestinations | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BookmarkDestinations Bookmark destinations Inheritance System.Object BookmarkDestinations Namespace : IronPdf.Bookmarks Assembly : IronPdf.dll Syntax public sealed class BookmarkDestinations : Enum Fields Page Declaration public const BookmarkDestinations Page Field Value Type Description BookmarkDestinations value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Bookmarks.html": {
    "href": "api/IronPdf.Bookmarks.html",
    "title": "Namespace IronPdf.Bookmarks | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Bookmarks Classes BookmarkDestinations Bookmark destinations PdfBookMark Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. PdfBookMarkCollection Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. Interfaces IPdfBookMark Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate."
  },
  "api/IronPdf.Bookmarks.IPdfBookMark.html": {
    "href": "api/IronPdf.Bookmarks.IPdfBookMark.html",
    "title": "Interface IPdfBookMark | C# PDF Library Documentation | IronPDF",
    "keywords": "Interface IPdfBookMark Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. Namespace : IronPdf.Bookmarks Assembly : IronPdf.dll Syntax public interface IPdfBookMark Properties Children Bookmarks contained under this bookmark Declaration PdfBookMarkCollection Children { get; } Property Value Type Description PdfBookMarkCollection DestinationType Type of destination represented by the bookmark Declaration BookmarkDestinations DestinationType { get; } Property Value Type Description BookmarkDestinations NextBookmark Next bookmark at the current level, if any Declaration IPdfBookMark NextBookmark { get; } Property Value Type Description IPdfBookMark PageIndex The zero based page number that the bookmark links to. Declaration int PageIndex { get; set; } Property Value Type Description System.Int32 The index of the page. Parent Bookmark which contains this bookmark Declaration IPdfBookMark Parent { get; } Property Value Type Description IPdfBookMark PreviousBookmark Previous bookmark at the current level, if any Declaration IPdfBookMark PreviousBookmark { get; } Property Value Type Description IPdfBookMark Siblings Bookmarks contained at the same level and under the same parent as this bookmark Declaration PdfBookMarkCollection Siblings { get; } Property Value Type Description PdfBookMarkCollection Text The display text of the bookmark Declaration string Text { get; set; } Property Value Type Description System.String Methods InsertBookMarkAfter(String, Int32) Insert a new bookmark after the specified bookmark Declaration IPdfBookMark InsertBookMarkAfter(string Text, int PageIndex) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 Returns Type Description IPdfBookMark InsertBookMarkBefore(String, Int32) Insert a new bookmark after the specified bookmark Declaration IPdfBookMark InsertBookMarkBefore(string Text, int PageIndex) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 Returns Type Description IPdfBookMark"
  },
  "api/IronPdf.Bookmarks.PdfBookMark.html": {
    "href": "api/IronPdf.Bookmarks.PdfBookMark.html",
    "title": "Class PdfBookMark | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfBookMark Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. Inheritance System.Object PdfBookMark Implements IPdfBookMark Namespace : IronPdf.Bookmarks Assembly : IronPdf.dll Syntax public class PdfBookMark : Object, IPdfBookMark Properties Children Bookmarks contained under this bookmark Declaration public PdfBookMarkCollection Children { get; } Property Value Type Description PdfBookMarkCollection DestinationType Type of destination represented by the bookmark Declaration public virtual BookmarkDestinations DestinationType { get; } Property Value Type Description BookmarkDestinations NextBookmark Next bookmark at the current level, if any Declaration public IPdfBookMark NextBookmark { get; } Property Value Type Description IPdfBookMark PageIndex The zero based page number that the bookmark links to. Declaration public int PageIndex { get; set; } Property Value Type Description System.Int32 The index of the page. Parent Bookmark which contains this bookmark Declaration public IPdfBookMark Parent { get; } Property Value Type Description IPdfBookMark PreviousBookmark Previous bookmark at the current level, if any Declaration public IPdfBookMark PreviousBookmark { get; } Property Value Type Description IPdfBookMark Siblings Bookmarks contained at the same level and under the same parent as this bookmark Declaration public PdfBookMarkCollection Siblings { get; } Property Value Type Description PdfBookMarkCollection Text The display text of the bookmark Declaration public string Text { get; set; } Property Value Type Description System.String Methods InsertBookMarkAfter(String, Int32) Insert a new bookmark after the specified bookmark Declaration public IPdfBookMark InsertBookMarkAfter(string Text, int PageIndex) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 Returns Type Description IPdfBookMark InsertBookMarkBefore(String, Int32) Insert a new bookmark after the specified bookmark Declaration public IPdfBookMark InsertBookMarkBefore(string Text, int PageIndex) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 Returns Type Description IPdfBookMark Implements IPdfBookMark"
  },
  "api/IronPdf.Bookmarks.PdfBookMarkCollection.html": {
    "href": "api/IronPdf.Bookmarks.PdfBookMarkCollection.html",
    "title": "Class PdfBookMarkCollection | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfBookMarkCollection Represents a PDF bookmark as seen in the sidebar of PDF reader software to help user's navigate. Inheritance System.Object PdfBookMarkCollection Implements System.Collections.Generic.IEnumerable < IPdfBookMark > System.Collections.IEnumerable Namespace : IronPdf.Bookmarks Assembly : IronPdf.dll Syntax public class PdfBookMarkCollection : Object Properties Count Total number of bookmarks, including all nested bookmarks Declaration public int Count { get; } Property Value Type Description System.Int32 FirstBookmark First bookmark within the bookmark collection at the current level Declaration public IPdfBookMark FirstBookmark { get; } Property Value Type Description IPdfBookMark LastBookmark Last bookmark within the bookmark collection at the current level Declaration public IPdfBookMark LastBookmark { get; } Property Value Type Description IPdfBookMark Parent Bookmark which contains this bookmark collection Declaration public IPdfBookMark Parent { get; } Property Value Type Description IPdfBookMark Methods AddBookMarkAtEnd(String, Int32) Add a new bookmark at the end of this bookmark collection Declaration public IPdfBookMark AddBookMarkAtEnd(string Text, int PageIndex) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 Returns Type Description IPdfBookMark Newly added bookmark AddBookMarkAtStart(String, Int32) Add a new bookmark at the start of this bookmark collection Declaration public IPdfBookMark AddBookMarkAtStart(string Text, int PageIndex) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 Returns Type Description IPdfBookMark Newly added bookmark GetAllBookmarks() Retrieve all bookmarks within this collection, recursively retrieve all children of bookmarks within this collection, and return a flat list Declaration public List<IPdfBookMark> GetAllBookmarks() Returns Type Description System.Collections.Generic.List < IPdfBookMark > A flattened list of all bookmarks in this collection and all of their children GetBookmarkAfter(IPdfBookMark) Retrieve the next bookmark after the specified bookmark at the current level Declaration public IPdfBookMark GetBookmarkAfter(IPdfBookMark PreviousBookmark) Parameters Type Name Description IPdfBookMark PreviousBookmark Previous bookmark Returns Type Description IPdfBookMark Next bookmark at the current level GetBookmarkBefore(IPdfBookMark) Retrieve the previous bookmark before the specified bookmark at the current level Declaration public IPdfBookMark GetBookmarkBefore(IPdfBookMark NextBookmark) Parameters Type Name Description IPdfBookMark NextBookmark Next bookmark Returns Type Description IPdfBookMark Previous bookmark at the current level GetEnumerator() Declaration public IEnumerator<IPdfBookMark> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IPdfBookMark > InsertBookMarkAfter(String, Int32, IPdfBookMark) Insert a new bookmark after the specified bookmark Declaration public IPdfBookMark InsertBookMarkAfter(string Text, int PageIndex, IPdfBookMark PreviousBookmark) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 IPdfBookMark PreviousBookmark Bookmark after which to insert a new bookmark Returns Type Description IPdfBookMark InsertBookMarkBefore(String, Int32, IPdfBookMark) Insert a new bookmark before the specified bookmark Declaration public IPdfBookMark InsertBookMarkBefore(string Text, int PageIndex, IPdfBookMark NextBookmark) Parameters Type Name Description System.String Text The display text for the link. System.Int32 PageIndex The zero based page number to link to. E.g. Page 1 has a PageIndex of 0 IPdfBookMark NextBookmark Bookmark before which to insert a new bookmark Returns Type Description IPdfBookMark Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronPdf.ChromeHttpLoginCredentials.html": {
    "href": "api/IronPdf.ChromeHttpLoginCredentials.html",
    "title": "Class ChromeHttpLoginCredentials | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromeHttpLoginCredentials Provides credentials for IronPdf's embedded Chrome browser to log-in to an intranet, extranet or website, impersonating a user. This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites. Inheritance System.Object ChromeHttpLoginCredentials Namespace : IronPdf Assembly : IronPdf.dll Syntax public class ChromeHttpLoginCredentials : Object Constructors ChromeHttpLoginCredentials() Declaration public ChromeHttpLoginCredentials() Fields CustomCookies A Dictionary which allows custom cookies to be posted with every login request, and HTTP request made by RenderUriToHml methods. Declaration public Dictionary<string, string> CustomCookies Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > EnableCookies Enables cookies to be stored and sent when using RenderUriToHml methods. Declaration public bool EnableCookies Field Value Type Description System.Boolean Properties NetworkPassword Optional: Password credential for Windows / Linux network security authentication. Declaration public string NetworkPassword { get; set; } Property Value Type Description System.String NetworkUsername Optional: User-name credential for Windows / Linux network security authentication. Declaration public string NetworkUsername { get; set; } Property Value Type Description System.String Methods Finalize() Destructor cleans up all temporary cookies files for the HttpLoginCredentials instance. Declaration protected override void Finalize()"
  },
  "api/IronPdf.ChromePdfRenderer.html": {
    "href": "api/IronPdf.ChromePdfRenderer.html",
    "title": "Class ChromePdfRenderer | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromePdfRenderer IronPdf.ChromePdfRenderer allows any web page or Html 'snippet' to be turned into a PDF document using an up-to-date embedded Chrome browser. As of 2021 Iron Software recommend ChromePdfRenderer as our best PDF Renderer and a drop-in replacement for this class. Inheritance System.Object BasePdfRenderer ChromePdfRenderer Implements IPdfRenderer Inherited Members BasePdfRenderer.RenderHtmlAsPdf(String, Uri, String) BasePdfRenderer.RenderHtmlAsPdf(String, String, String) BasePdfRenderer.RenderHtmlFileAsPdf(String) BasePdfRenderer.RenderUrlAsPdf(String) BasePdfRenderer.RenderUrlAsPdf(Uri) BasePdfRenderer.RenderRtfFileAsPdf(String) BasePdfRenderer.RenderRtfStringAsPdf(String) BasePdfRenderer.RenderHtmlAsPdfAsync(String, Uri) BasePdfRenderer.RenderHtmlFileAsPdfAsync(String) BasePdfRenderer.RenderUrlAsPdfAsync(Uri) BasePdfRenderer.RenderUrlAsPdfAsync(String) BasePdfRenderer.RenderZipFileAsPdf(String, String) BasePdfRenderer.RenderingOptions BasePdfRenderer.LoginCredentials Namespace : IronPdf Assembly : IronPdf.dll Syntax public class ChromePdfRenderer : BasePdfRenderer, IPdfRenderer Constructors ChromePdfRenderer() Create a new Chrome Html To PDF renderer. Declaration public ChromePdfRenderer() Methods ApplyCookies(String, ChromeHttpLoginCredentials) Applies cookies from the specified login credentials class to the specified url Declaration public static void ApplyCookies(string Url, ChromeHttpLoginCredentials Login) Parameters Type Name Description System.String Url Url cookies will apply to ChromeHttpLoginCredentials Login Login credentials which includes CustomCookies property ClearCookies() Clear cookies for all urls Declaration public static void ClearCookies() StaticRenderHtmlAsPdf(String, ChromePdfRenderOptions, String) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static version of the RenderHtmlAsPdf method. Declaration public static PdfDocument StaticRenderHtmlAsPdf(string Html, ChromePdfRenderOptions Options = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. System.String Proxy Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument with the Html rendered as its contents. StaticRenderHtmlAsPdf(String, String, ChromePdfRenderOptions, String) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static version of the RenderHtmlAsPdf method. Declaration public static PdfDocument StaticRenderHtmlAsPdf(string Html, string BaseUrlOrPath, ChromePdfRenderOptions Options = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.String BaseUrlOrPath Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files. May be a remote URL or local file path. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. System.String Proxy Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument with the Html rendered as its contents. StaticRenderHtmlAsPdf(String, Uri, ChromePdfRenderOptions, String) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static version of the RenderHtmlAsPdf method. Declaration public static PdfDocument StaticRenderHtmlAsPdf(string Html, Uri BaseUrl, ChromePdfRenderOptions Options = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files. May be a remote URL or local file path. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. System.String Proxy Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument with the Html rendered as its contents. StaticRenderHtmlAsPdfAsync(String, Uri, ChromePdfRenderOptions) Creates a PDF file from an Html string, and returns it as an PdfDocument object which can be edited and saved to disk or served on a website. Static Async version of the RenderHtmlAsPdf method. Declaration public static Task<PdfDocument> StaticRenderHtmlAsPdfAsync(string Html, Uri BaseUrl = null, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseURL property gives the relative context for hyper-links, images, CSS and JavaScript files. May be a remote URL or local file path. ChromePdfRenderOptions Options An instance of ChromePdfRenderOptions that allows configuration of Chrome \"HTML to PDF\" rendering parameters. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Html rendered as its contents. StaticRenderHTMLFileAsPdf(String, ChromePdfRenderOptions) Renders an HTML file as a PDF file. Returns a PdfDocument object which may be edited and saved to disk or served on a website. Static version of the RenderHTMLFileAsPdf method. Declaration public static PdfDocument StaticRenderHTMLFileAsPdf(string FilePath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String FilePath Path to an Html file. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument with the Html file rendered as its contents.. StaticRenderHTMLFileAsPdfAsync(String, ChromePdfRenderOptions) Renders an HTML file as a PDF file. Returns a PdfDocument object which may be edited and saved to disk or served on a website. Static Async version of the RenderHTMLFileAsPdf method. Declaration public static Task<PdfDocument> StaticRenderHTMLFileAsPdfAsync(string FilePath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String FilePath Path to an Html file. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Html file rendered as its contents. StaticRenderUrlAsPdf(String, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static version of the RenderUrlAsPdf method. Declaration public static PdfDocument StaticRenderUrlAsPdf(string UrlOrPath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String UrlOrPath An absolute Url. Points to the Html document to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument with the Url rendered as its contents. StaticRenderUrlAsPdf(Uri, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static version of the RenderUrlAsPdf method. Declaration public static PdfDocument StaticRenderUrlAsPdf(Uri Url, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.Uri Url An absolute Uri. Points to the Html document or local file file to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument with the Url rendered as its contents. StaticRenderUrlAsPdfAsync(String, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static Async version of the RenderUrlAsPdf method. Declaration public static Task<PdfDocument> StaticRenderUrlAsPdfAsync(string UrlOrPath, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String UrlOrPath An absolute Url. Points to the Html document or local file to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Url rendered as its contents. StaticRenderUrlAsPdfAsync(Uri, ChromePdfRenderOptions) Renders all Html and assets at a given Url into a PDF file using IronPdf's embedded Chrome browser as the rendering engine. Static Async version of the RenderUrlAsPdf method. Declaration public static Task<PdfDocument> StaticRenderUrlAsPdfAsync(Uri Url, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.Uri Url An absolute Uri. Points to the Html document or local file file to be rendered as a PDF. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument with the Url rendered as its contents. StaticRenderZipFileAsPdf(String, String, ChromePdfRenderOptions) Creates a PDF file from a local Zip file, and returns it as a PdfDocument . IronPDF is a W3C standards compliant HTML rendering based on Google's Chromium browser. If your output PDF does not look as expected: - Validate your HTML file using https://validator.w3.org/ & CSS https://jigsaw.w3.org/css-validator/ - To debug HTML, view the file in Chrome web browser's print preview which will work almost exactly as IronPDF. - Read our detailed documentation on pixel perfect HTML to PDF: https://ironpdf.com/tutorials/pixel-perfect-html-to-pdf/ Declaration public static PdfDocument StaticRenderZipFileAsPdf(string FilePath, string MainFile, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String FilePath Path to an Zip to be rendered as a PDF. System.String MainFile Name of the primary HTML file. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description PdfDocument A PdfDocument StaticRenderZipFileAsPdfAsync(String, String, ChromePdfRenderOptions) Creates a PDF file from a local Zip file, and returns it as a PdfDocument . IronPDF is a W3C standards compliant HTML rendering based on Google's Chromium browser. If your output PDF does not look as expected: - Validate your HTML file using https://validator.w3.org/ & CSS https://jigsaw.w3.org/css-validator/ - To debug HTML, view the file in Chrome web browser's print preview which will work almost exactly as IronPDF. - Read our detailed documentation on pixel perfect HTML to PDF: https://ironpdf.com/tutorials/pixel-perfect-html-to-pdf/ Static Async version of the RenderZipFileAsPdf method. Declaration public static Task<PdfDocument> StaticRenderZipFileAsPdfAsync(string FilePath, string MainFile, ChromePdfRenderOptions Options = null) Parameters Type Name Description System.String FilePath Path to an Zip to be rendered as a PDF. System.String MainFile Name of the primary HTML file. ChromePdfRenderOptions Options Optional print options and settings as an instance of ChromePdfRenderOptions . Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument Implements IPdfRenderer Inherited members RenderHtmlAsPdf(String, Uri, String) RenderHtmlAsPdf(String, String, String) RenderHtmlFileAsPdf(String) RenderUrlAsPdf(String) RenderUrlAsPdf(Uri) RenderRtfFileAsPdf(String) RenderRtfStringAsPdf(String) RenderHtmlAsPdfAsync(String, Uri) RenderHtmlFileAsPdfAsync(String) RenderUrlAsPdfAsync(Uri) RenderUrlAsPdfAsync(String) RenderZipFileAsPdf(String, String) RenderingOptions LoginCredentials"
  },
  "api/IronPdf.ChromePdfRenderOptions.html": {
    "href": "api/IronPdf.ChromePdfRenderOptions.html",
    "title": "Class ChromePdfRenderOptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromePdfRenderOptions Html To PDF output options for ChromePdfRenderer . Specifies options such as Paper-Size, DPI, Headers and Footers and other Chromium specific browser setup options. Inheritance System.Object ChromePdfRenderOptions Namespace : IronPdf Assembly : IronPdf.dll Syntax public class ChromePdfRenderOptions : Object Constructors ChromePdfRenderOptions() Declaration public ChromePdfRenderOptions() Properties CreatePdfFormsFromHtml Turns all Html forms elements into editable PDF forms. Default value is true. Declaration public bool CreatePdfFormsFromHtml { get; set; } Property Value Type Description System.Boolean CssMediaType Enables Media=\"screen\" CSS Styles and StyleSheets Note: By setting AllowScreenCss=false, IronPdf renders PDFs from HTML using CSS for media=\"print\" as if printing a web page in a browser print dialog. Default value is PdfCssMediaType.Screen. Declaration public PdfCssMediaType CssMediaType { get; set; } Property Value Type Description PdfCssMediaType CustomCssUrl Allows a custom CSS style-sheet to be applied to Html before rendering. May be a local file path or a remote url. Declaration public string CustomCssUrl { get; set; } Property Value Type Description System.String Remarks Only applicable when rendering Html to Pdf DefaultChrome A ChromePdfRenderOptions preset with default settings that match the vanilla PDF viewer in Chrome. Declaration public static ChromePdfRenderOptions DefaultChrome { get; } Property Value Type Description ChromePdfRenderOptions EnableJavaScript Enables JavaScript and Json to be executed before the page is rendered. Ideal for printing from Ajax / Angular Applications. Also see RenderDelay Default value is false. Declaration public bool EnableJavaScript { get; set; } Property Value Type Description System.Boolean FirstPageNumber First page number to be used in PDF Headers and Footers. TextHeader HtmlHeader TextFooter HtmlFooter Default value is 1. Declaration public int FirstPageNumber { get; set; } Property Value Type Description System.Int32 FitToPaperMode Behavior when fitting HTML content to a physical paper size. Determines Zoom and ViewPortWidth . See FitToPaperModes for a detailed description of each mode. IronPdf.Engines.Chrome.FitToPaperModes.None disables automatic fitting behavior. Automatic automatically measures and fits HTML content onto each PDF page. Default value is FitToPaperModes.None. Declaration public FitToPaperModes FitToPaperMode { get; set; } Property Value Type Description FitToPaperModes ForcePaperSize Force page sizes to be exactly what is specified via PaperSize by resizing the page after generating a PDF from HTML Useful for bypassing CSS rules which specify paper size Declaration public bool ForcePaperSize { get; set; } Property Value Type Description System.Boolean Remarks Helps correct small errors in page size when rendering HTML to PDF GrayScale Outputs a black-and-white PDF Default value is false. Declaration public bool GrayScale { get; set; } Property Value Type Description System.Boolean HtmlFooter Sets the footer content for every PDF page as Html. Supports 'mail-merge'. Declaration public HtmlHeaderFooter HtmlFooter { get; set; } Property Value Type Description HtmlHeaderFooter HtmlHeader Sets the header content for every PDF page as Html. Supports 'mail-merge'. Declaration public HtmlHeaderFooter HtmlHeader { get; set; } Property Value Type Description HtmlHeaderFooter InputEncoding The input character encoding as a string; Default value is Encoding.UTF8. Declaration public Encoding InputEncoding { get; set; } Property Value Type Description System.Text.Encoding Javascript Custom javascript to be executed after the page has loaded Declaration public string Javascript { get; set; } Property Value Type Description System.String JavascriptMessageListener Method callback to be invoked whenever a browser console message becomes available Declaration public StringDelegate JavascriptMessageListener { get; set; } Property Value Type Description StringDelegate MarginBottom Bottom Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Default value is 25. Declaration public double MarginBottom { get; set; } Property Value Type Description System.Double MarginLeft Left Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Default value is 25. Declaration public double MarginLeft { get; set; } Property Value Type Description System.Double MarginRight Right Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Default value is 25. Declaration public double MarginRight { get; set; } Property Value Type Description System.Double MarginTop Top Pdf \"paper\" margin in millimeters. Set to zero for border-less and commercial printing applications. Default value is 25. Declaration public double MarginTop { get; set; } Property Value Type Description System.Double PaperOrientation The PDF paper orientation. E.g. Portrait or Landscape. Default value is Portrait. Declaration public PdfPaperOrientation PaperOrientation { get; set; } Property Value Type Description PdfPaperOrientation PaperSize Set an output paper size for PDF pages. System.Drawing.Printing.PaperKind. Use SetCustomPaperSize(int width, int height) for custom sizes. Default value is A4. Declaration public PdfPaperSize PaperSize { get; set; } Property Value Type Description PdfPaperSize PrintHtmlBackgrounds Prints background-colors and images from Html. Default value is true. Declaration public bool PrintHtmlBackgrounds { get; set; } Property Value Type Description System.Boolean RenderDelay Milliseconds to wait after Html is rendered before printing. This can use useful when considering the rendering of JavaScript, Ajax or animations. Default value is 0. Declaration public int RenderDelay { get; set; } Property Value Type Description System.Int32 TextFooter Sets the header content for every PDF page as text. Supports 'mail-merge' and automatically turns urls into hyperlinks.. Declaration public TextHeaderFooter TextFooter { get; set; } Property Value Type Description TextHeaderFooter TextHeader Sets the footer content for every PDF page as text. Supports 'mail-merge' and automatically turns urls into hyperlinks.. Declaration public TextHeaderFooter TextHeader { get; set; } Property Value Type Description TextHeaderFooter Timeout Render timeout in seconds Default value is 60. Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 Title PDF Document Name and Title meta-data. Not required. Useful for mail-merge and automatic file naming in the IronPdf MVC and Razor extensions. Declaration public string Title { get; set; } Property Value Type Description System.String UseMarginsOnHeaderAndFooter Use margin values from the main document when rendering headers and footers Declaration public UseMargins UseMarginsOnHeaderAndFooter { get; set; } Property Value Type Description UseMargins ViewPortHeight Defines a virtual screen height used to render HTML to PDF in IronPdf. Measured in pixels. Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified. Smaller sizes (particularly width) will render responsive versions of many websites. Declaration public int ViewPortHeight { get; set; } Property Value Type Description System.Int32 ViewPortWidth Defines a virtual screen width used to render HTML to PDF in IronPdf. Measured in pixels. Viewport size is important in modern responsive HTML5 + CSS3 websites (e.g. Bootstrap framework websites) because the rendering and order of elements on the screen is dependent on viewport size. The default viewport is 1280px wide by 1024px high to ensure the desktop version of a website is rendered unless otherwise specified. Smaller sizes (particularly width) will render responsive versions of many website Declaration public int ViewPortWidth { get; set; } Property Value Type Description System.Int32 Zoom Percentage zoom level when printing a document to PDF. Enlarges the rendering size of Html documents. Only used when FitToPaperMode is set to IronPdf.Engines.Chrome.FitToPaperModes.None Default value is 100. Declaration public int Zoom { get; set; } Property Value Type Description System.Int32 Methods Clone() Supports System.ICloneable . Creates a deep copy of this class instance. Declaration public object Clone() Returns Type Description System.Object A deep clone of this instance. Use explicit casting to convert object back to the intended type. SetCustomPaperSizeinCentimeters(Double, Double) Set an output paper size for PDF pages. Dimensions are in Centimeters. Declaration public void SetCustomPaperSizeinCentimeters(double width, double height) Parameters Type Name Description System.Double width Custom paper width in cm. System.Double height Custom paper height in cm. SetCustomPaperSizeInInches(Double, Double) Set an output paper size for PDF pages. Dimensions are in Inches. Declaration public void SetCustomPaperSizeInInches(double width, double height) Parameters Type Name Description System.Double width Custom paper width in Inches. System.Double height Custom paper height in Inches. SetCustomPaperSizeinMilimeters(Double, Double) Set an output paper size for PDF pages. Dimensions are in millimeters. Declaration public void SetCustomPaperSizeinMilimeters(double width, double height) Parameters Type Name Description System.Double width Custom paper width in millimeters. System.Double height Custom paper height in millimeters. SetCustomPaperSizeinPixelsOrPoints(Double, Double, Int32) Set an output paper size for PDF pages. Dimensions are in screen Pixels or printer Points. Declaration public void SetCustomPaperSizeinPixelsOrPoints(double width, double height, int DPI = 96) Parameters Type Name Description System.Double width Custom paper width in pixels/points. System.Double height Custom paper height in pixels/points. System.Int32 DPI Intended print resolution of the PDF. To be clear PDFs have no fixed DPI/PPI value for rendering. 72 and 96 are common onscreen values. 300 is a comon value used in commercial printing."
  },
  "api/IronPdf.Editing.BarcodeEncoding.html": {
    "href": "api/IronPdf.Editing.BarcodeEncoding.html",
    "title": "Class BarcodeEncoding | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BarcodeEncoding Barcode Encoding Types. Please check the supported characters for each encoding type as some do not support all symbols. Setting a BarcodeEncoding when rendering Barcodes chooses the type and design of barcode to be generated. Inheritance System.Object BarcodeEncoding Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class BarcodeEncoding : Enum Fields Code128 Code 128 (1D barcode format). Code 128 is a high-density linear barcode symbology defined in ISO/IEC 15417:2007. Supported characters include: All alphabetic and numeric characters. Declaration public const BarcodeEncoding Code128 Field Value Type Description BarcodeEncoding Code39 Code 39 (1D barcode format). Code 39 is a variable length, discrete barcode symbology. The Code 39 specification defines 43 characters. Supported characters include: Digits from (0-9), Uppercase (A through Z), and these symbols: (-.$/+% space) Declaration public const BarcodeEncoding Code39 Field Value Type Description BarcodeEncoding QRCode QR Code (2D barcode format). QR code (abbreviated from Quick Response Code) is a machine-readable optical label that contains information about the item to which it is attached. A QR code uses four standardized encoding modes to efficiently store data. Supported characters include: All numeric, alphanumeric, byte/binary, and Japanese kanji. Declaration public const BarcodeEncoding QRCode Field Value Type Description BarcodeEncoding value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.BarcodeStamper.html": {
    "href": "api/IronPdf.Editing.BarcodeStamper.html",
    "title": "Class BarcodeStamper | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BarcodeStamper This allows the user to edit an existing PDF by adding Barcode(s) and QR code(s) to PDF documents. A subclass of Stamper . Defines a Barcode PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of BarcodeStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-a-barcode-onto-a-pdf Inheritance System.Object Stamper BarcodeStamper Inherited Members Stamper.Html Stamper.Opacity Stamper.Rotation Stamper.HorizontalAlignment Stamper.VerticalAlignment Stamper.HorizontalOffset Stamper.VerticalOffset Stamper.MaxWidth Stamper.MaxHeight Stamper.MinWidth Stamper.MinHeight Stamper.Hyperlink Stamper.Scale Stamper.IsStampBehindContent Stamper.RenderDelay Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class BarcodeStamper : Stamper Constructors BarcodeStamper(String, BarcodeEncoding) Initializes a new instance of the BarcodeStamper class. Width and Height are 250px each by default unless explicitly set. Declaration public BarcodeStamper(string Value, BarcodeEncoding BarcodeType) Parameters Type Name Description System.String Value The value of the barcode as a string. BarcodeEncoding BarcodeType Barcode encoding type to use for this Stamper. Supported encoding types include: QRCode, Code128, and Code39. BarcodeEncoding . BarcodeStamper(String, BarcodeEncoding, Int32, Int32) Initializes a new instance of the BarcodeStamper class. Declaration public BarcodeStamper(string Value, BarcodeEncoding BarcodeType, int Width, int Height) Parameters Type Name Description System.String Value The value of the barcode as a string. BarcodeEncoding BarcodeType Barcode encoding type to use for this Stamper. Supported encoding types include: QRCode, Code128, and Code39. BarcodeEncoding . System.Int32 Width The width of the rendered barcode in pixels. System.Int32 Height The height of the rendered barcode in pixels. Properties BarcodeType Barcode encoding type to use for this Stamper. Supported encoding types include: QRCode, Code128, and Code39. Please see: BarcodeEncoding . Default is QRCode Declaration public BarcodeEncoding BarcodeType { get; set; } Property Value Type Description BarcodeEncoding Height The height of the rendered barcode in pixels. Default is 250px Declaration public int Height { get; set; } Property Value Type Description System.Int32 Value The value of the barcode as a string. Declaration public string Value { get; set; } Property Value Type Description System.String Width The width of the rendered barcode in pixels. Default is 250px Declaration public int Width { get; set; } Property Value Type Description System.Int32 Inherited members Html Opacity Rotation HorizontalAlignment VerticalAlignment HorizontalOffset VerticalOffset MaxWidth MaxHeight MinWidth MinHeight Hyperlink Scale IsStampBehindContent RenderDelay"
  },
  "api/IronPdf.Editing.HorizontalAlignment.html": {
    "href": "api/IronPdf.Editing.HorizontalAlignment.html",
    "title": "Class HorizontalAlignment | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HorizontalAlignment The horizontal alignment relative to the page. Inheritance System.Object HorizontalAlignment Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class HorizontalAlignment : Enum Fields Center Alignment along the center of the page. Declaration public const HorizontalAlignment Center Field Value Type Description HorizontalAlignment Left Alignment along the left side of the page. Declaration public const HorizontalAlignment Left Field Value Type Description HorizontalAlignment Right Alignment along the right side of the page. Declaration public const HorizontalAlignment Right Field Value Type Description HorizontalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.html": {
    "href": "api/IronPdf.Editing.html",
    "title": "Namespace IronPdf.Editing | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Editing Classes BarcodeEncoding Barcode Encoding Types. Please check the supported characters for each encoding type as some do not support all symbols. Setting a BarcodeEncoding when rendering Barcodes chooses the type and design of barcode to be generated. BarcodeStamper This allows the user to edit an existing PDF by adding Barcode(s) and QR code(s) to PDF documents. A subclass of Stamper . Defines a Barcode PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of BarcodeStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-a-barcode-onto-a-pdf HorizontalAlignment The horizontal alignment relative to the page. HtmlStamper This allows the user to edit an existing PDF by adding an HTML stamp. A subclass of Stamper . Defines an HTML PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of HtmlStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-html-onto-a-pdf ImageStamper This allows the user to edit an existing PDF by adding an image. A subclass of Stamper . Defines an Image PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of ImageStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-an-image-onto-a-pdf Length MeasurementUnit The unit of measurement used for positioning and sizing. Stamper Defines a PDF Stamper. ApplyStamp(Stamper) To see a full class walkthrough with diagrams and examples visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamping-and-watermarking ApplyStamp(Stamper) StampLayer Defines if a stamp should be placed behind or on-top of existing PDF contents. TextStamper This allows the user to edit an existing PDF by adding some stamped text. A subclass of Stamper . Defines a Text PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of TextStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-text-onto-a-pdf VerticalAlignment The vertical alignment relative to the page."
  },
  "api/IronPdf.Editing.HtmlStamper.html": {
    "href": "api/IronPdf.Editing.HtmlStamper.html",
    "title": "Class HtmlStamper | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HtmlStamper This allows the user to edit an existing PDF by adding an HTML stamp. A subclass of Stamper . Defines an HTML PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of HtmlStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-html-onto-a-pdf Inheritance System.Object Stamper HtmlStamper Inherited Members Stamper.Html Stamper.Opacity Stamper.Rotation Stamper.HorizontalAlignment Stamper.VerticalAlignment Stamper.HorizontalOffset Stamper.VerticalOffset Stamper.MaxWidth Stamper.MaxHeight Stamper.MinWidth Stamper.MinHeight Stamper.Hyperlink Stamper.Scale Stamper.IsStampBehindContent Stamper.RenderDelay Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class HtmlStamper : Stamper Constructors HtmlStamper() Initializes a new instance of the HtmlStamper class. Declaration public HtmlStamper() HtmlStamper(String) Initializes a new instance of the HtmlStamper class. Declaration public HtmlStamper(string html) Parameters Type Name Description System.String html The HTML string. HtmlStamper(String, String) Initializes a new instance of the HtmlStamper class. Declaration public HtmlStamper(string html, string baseUrlString) Parameters Type Name Description System.String html The HTML string. System.String baseUrlString The HTML base URL for which references to external CSS, Javascript and Image files will be relative. HtmlStamper(String, Uri) Initializes a new instance of the HtmlStamper class. Declaration public HtmlStamper(string html, Uri baseUrl) Parameters Type Name Description System.String html The HTML string. System.Uri baseUrl The HTML base URL for which references to external CSS, Javascript and Image files will be relative. Properties CssMediaType Enables Media=\"screen\" CSS Styles and StyleSheets Note: By setting AllowScreenCss=false, IronPdf renders Stamp from HTML using CSS for media=\"print\" as if printing a web page in a browser print dialog. Default value is PdfCssMediaType.Screen. Declaration public PdfCssMediaType CssMediaType { get; set; } Property Value Type Description PdfCssMediaType HtmlBaseUrl The HTML base URL for which references to external CSS, Javascript and Image files will be relative. A trick to make references relative to a your project file is InnerHtmlBaseUrl = new Uri(System.Reflection.Assembly.GetEntryAssembly().Location).AbsoluteUri Declaration public Uri HtmlBaseUrl { get; set; } Property Value Type Description System.Uri Timeout Render timeout in seconds Default value is 60. Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 Inherited members Html Opacity Rotation HorizontalAlignment VerticalAlignment HorizontalOffset VerticalOffset MaxWidth MaxHeight MinWidth MinHeight Hyperlink Scale IsStampBehindContent RenderDelay"
  },
  "api/IronPdf.Editing.ImageStamper.html": {
    "href": "api/IronPdf.Editing.ImageStamper.html",
    "title": "Class ImageStamper | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageStamper This allows the user to edit an existing PDF by adding an image. A subclass of Stamper . Defines an Image PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of ImageStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-an-image-onto-a-pdf Inheritance System.Object Stamper ImageStamper Inherited Members Stamper.Html Stamper.Opacity Stamper.Rotation Stamper.HorizontalAlignment Stamper.VerticalAlignment Stamper.HorizontalOffset Stamper.VerticalOffset Stamper.MaxWidth Stamper.MaxHeight Stamper.MinWidth Stamper.MinHeight Stamper.Hyperlink Stamper.Scale Stamper.IsStampBehindContent Stamper.RenderDelay Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class ImageStamper : Stamper Constructors ImageStamper(AnyBitmap) Initializes a new instance of the ImageStamper class. Declaration public ImageStamper(AnyBitmap bitmap) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap bitmap The uri of the image to be stamped by this stamper ImageStamper(String) Initializes a new instance of the ImageStamper class. Declaration public ImageStamper(string imagePath) Parameters Type Name Description System.String imagePath The path of the image to be stamped by this stamper ImageStamper(Uri) Initializes a new instance of the ImageStamper class. Declaration public ImageStamper(Uri imageUri) Parameters Type Name Description System.Uri imageUri The uri of the image to be stamped by this stamper Properties ImageUri The path of the image to be stamped by this stamper Declaration public Uri ImageUri { get; set; } Property Value Type Description System.Uri Inherited members Html Opacity Rotation HorizontalAlignment VerticalAlignment HorizontalOffset VerticalOffset MaxWidth MaxHeight MinWidth MinHeight Hyperlink Scale IsStampBehindContent RenderDelay"
  },
  "api/IronPdf.Editing.Length.html": {
    "href": "api/IronPdf.Editing.Length.html",
    "title": "Class Length | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Length Inheritance System.Object Length Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class Length : Object Constructors Length(Double, MeasurementUnit) Declaration public Length(double value = 0, MeasurementUnit unit) Parameters Type Name Description System.Double value MeasurementUnit unit Properties Unit Declaration public MeasurementUnit Unit { get; set; } Property Value Type Description MeasurementUnit Value Declaration public double Value { get; set; } Property Value Type Description System.Double"
  },
  "api/IronPdf.Editing.MeasurementUnit.html": {
    "href": "api/IronPdf.Editing.MeasurementUnit.html",
    "title": "Class MeasurementUnit | C# PDF Library Documentation | IronPDF",
    "keywords": "Class MeasurementUnit The unit of measurement used for positioning and sizing. Inheritance System.Object MeasurementUnit Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class MeasurementUnit : Enum Fields Centimeter Measurement unit of the centimeter metric unit. Declaration public const MeasurementUnit Centimeter Field Value Type Description MeasurementUnit Inch Measurement unit of the inch imperial unit. Declaration public const MeasurementUnit Inch Field Value Type Description MeasurementUnit Millimeter Measurement unit of the millimeter metric unit. Equal to 1/10 of one centimeter. Declaration public const MeasurementUnit Millimeter Field Value Type Description MeasurementUnit Percentage Measurement unit of Percentage. Declaration public const MeasurementUnit Percentage Field Value Type Description MeasurementUnit Pixel Measurement unit of pixel. Declaration public const MeasurementUnit Pixel Field Value Type Description MeasurementUnit Points Measurement unit of the point unit. Declaration public const MeasurementUnit Points Field Value Type Description MeasurementUnit value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.Stamper.html": {
    "href": "api/IronPdf.Editing.Stamper.html",
    "title": "Class Stamper | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Stamper Defines a PDF Stamper. ApplyStamp(Stamper) To see a full class walkthrough with diagrams and examples visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamping-and-watermarking ApplyStamp(Stamper) Inheritance System.Object Stamper BarcodeStamper HtmlStamper ImageStamper TextStamper Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public abstract class Stamper : Object Properties HorizontalAlignment The horizontal alignment of the stamp relative to the page. Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment HorizontalOffset The horizontal offset. Default value is 0, and default unit is Percentage . Value of 0 has no effect. Positive indicates an offset to the right direction. Negative indicates an offset to the left direction. Declaration public Length HorizontalOffset { get; set; } Property Value Type Description Length Html The HTML fragment which will be stamped onto your PDF. All external references to JavaScript, CSS, and image files will be relative to IronPdf.Editing.Stamper.InnerHtmlBaseUrl . Declaration public string Html { set; } Property Value Type Description System.String Hyperlink Makes stamped elements of this Stamper have an on-click hyperlink. Note: HTML links created by <a href=''> tags are not reserved by stamping. Declaration public string Hyperlink { get; set; } Property Value Type Description System.String IsStampBehindContent Set to true for apply stamp behind the content. If the content is opaque, the stamp may be invisible. Declaration public bool IsStampBehindContent { get; set; } Property Value Type Description System.Boolean MaxHeight The maximum height of the output stamp. Declaration public Length MaxHeight { get; set; } Property Value Type Description Length MaxWidth The maximum width of the output stamp. Declaration public Length MaxWidth { get; set; } Property Value Type Description Length MinHeight The minimum height of the output stamp. Declaration public Length MinHeight { get; set; } Property Value Type Description Length MinWidth The minimum width of the output stamp. Declaration public Length MinWidth { get; set; } Property Value Type Description Length Opacity Allows the stamp to be transparent. 0 is fully invisible, 100 if fully opaque. Declaration public int Opacity { get; set; } Property Value Type Description System.Int32 RenderDelay Milliseconds to wait after Html is rendered before printing. This can use useful when considering the rendering of JavaScript, Ajax or animations. Default value for HtmlStamper is 100, The other Stamper is 0. Declaration public int RenderDelay { get; set; } Property Value Type Description System.Int32 Rotation Rotates the stamp clockwise from 0 to 360 degrees as specified. Declaration public int Rotation { get; set; } Property Value Type Description System.Int32 Scale Applies a percentage scale to the stamps to be larger or smaller. Default is 100 (Percent) which has no effect. Declaration public double Scale { get; set; } Property Value Type Description System.Double VerticalAlignment The vertical alignment of the stamp relative to the page. Declaration public VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment VerticalOffset The vertical offset. Default value is 0, and default unit is Percentage . Value of 0 has no effect. Positive indicates an offset in the downward direction. Negative indicates an offset in the upward direction. Declaration public Length VerticalOffset { get; set; } Property Value Type Description Length"
  },
  "api/IronPdf.Editing.StampLayer.html": {
    "href": "api/IronPdf.Editing.StampLayer.html",
    "title": "Class StampLayer | C# PDF Library Documentation | IronPDF",
    "keywords": "Class StampLayer Defines if a stamp should be placed behind or on-top of existing PDF contents. Inheritance System.Object StampLayer Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class StampLayer : Enum Fields BehindExistingPDFContent Stamp in the background Declaration public const StampLayer BehindExistingPDFContent Field Value Type Description StampLayer OnTopOfExistingPDFContent Stamp in the foreground Declaration public const StampLayer OnTopOfExistingPDFContent Field Value Type Description StampLayer value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Editing.TextStamper.html": {
    "href": "api/IronPdf.Editing.TextStamper.html",
    "title": "Class TextStamper | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextStamper This allows the user to edit an existing PDF by adding some stamped text. A subclass of Stamper . Defines a Text PDF Stamper. Can be applied with: ApplyStamp(Stamper) To see usage and an example of TextStamper, visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#stamp-text-onto-a-pdf Inheritance System.Object Stamper TextStamper Inherited Members Stamper.Html Stamper.Opacity Stamper.Rotation Stamper.HorizontalAlignment Stamper.VerticalAlignment Stamper.HorizontalOffset Stamper.VerticalOffset Stamper.MaxWidth Stamper.MaxHeight Stamper.MinWidth Stamper.MinHeight Stamper.Hyperlink Stamper.Scale Stamper.IsStampBehindContent Stamper.RenderDelay Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public class TextStamper : Stamper Constructors TextStamper() Initializes a new instance of the TextStamper class. Declaration public TextStamper() TextStamper(String) Initializes a new instance of the TextStamper class. Declaration public TextStamper(string text) Parameters Type Name Description System.String text The text to be stamped by the Stamper Properties BackgroundColor Background Color. Default is transparent. Declaration public Color BackgroundColor { get; set; } Property Value Type Description IronSoftware.Drawing.Color Color Font Color. Default is black. Declaration public Color Color { get; set; } Property Value Type Description IronSoftware.Drawing.Color FontFamily Font family name for the text. Note: If using a web font from https://fonts.google.com/ then you must set UseGoogleFont property of this TextStamper to true. Declaration public string FontFamily { get; set; } Property Value Type Description System.String FontSize Font size in px Declaration public int FontSize { get; set; } Property Value Type Description System.Int32 IsBold Determines if the bold font weight is applied Declaration public bool IsBold { get; set; } Property Value Type Description System.Boolean IsItalic Determines if the text has the italic font style applied Declaration public bool IsItalic { get; set; } Property Value Type Description System.Boolean IsStrikethrough Determines if the text has a strike-through applied Declaration public bool IsStrikethrough { get; set; } Property Value Type Description System.Boolean IsUnderline Determines if the text has an underline font style applied Declaration public bool IsUnderline { get; set; } Property Value Type Description System.Boolean Text The text to be stamped by the Stamper Declaration public string Text { get; set; } Property Value Type Description System.String UseGoogleFont Must be set to true to when using FontFamily from https://fonts.google.com/ as a web font Declaration public bool UseGoogleFont { get; set; } Property Value Type Description System.Boolean Inherited members Html Opacity Rotation HorizontalAlignment VerticalAlignment HorizontalOffset VerticalOffset MaxWidth MaxHeight MinWidth MinHeight Hyperlink Scale IsStampBehindContent RenderDelay"
  },
  "api/IronPdf.Editing.VerticalAlignment.html": {
    "href": "api/IronPdf.Editing.VerticalAlignment.html",
    "title": "Class VerticalAlignment | C# PDF Library Documentation | IronPDF",
    "keywords": "Class VerticalAlignment The vertical alignment relative to the page. Inheritance System.Object VerticalAlignment Namespace : IronPdf.Editing Assembly : IronPdf.dll Syntax public sealed class VerticalAlignment : Enum Fields Bottom The bottom of the page. Declaration public const VerticalAlignment Bottom Field Value Type Description VerticalAlignment Middle The middle of the page. Declaration public const VerticalAlignment Middle Field Value Type Description VerticalAlignment Top The top of the page. Declaration public const VerticalAlignment Top Field Value Type Description VerticalAlignment value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Chrome.CefBrowserSettings.html": {
    "href": "api/IronPdf.Engines.Chrome.CefBrowserSettings.html",
    "title": "Class CefBrowserSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CefBrowserSettings Inheritance System.Object CefBrowserSettings Implements System.IDisposable Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public class CefBrowserSettings : Object Constructors CefBrowserSettings() Declaration public CefBrowserSettings() Properties EnableJavascript Declaration public bool EnableJavascript { get; set; } Property Value Type Description System.Boolean OnJavascriptMessage Declaration public StringDelegate OnJavascriptMessage { get; set; } Property Value Type Description StringDelegate Password Declaration public string Password { get; set; } Property Value Type Description System.String Username Declaration public string Username { get; set; } Property Value Type Description System.String ViewHeight Declaration public int ViewHeight { get; set; } Property Value Type Description System.Int32 ViewWidth Declaration public int ViewWidth { get; set; } Property Value Type Description System.Int32 Methods Dispose() Declaration public void Dispose() Finalize() Declaration protected override void Finalize() () Declaration public IntPtr () Returns Type Description System.IntPtr () Declaration public void () Operators Implicit(CefBrowserSettings to IntPtr) Declaration public static implicit operator IntPtr(CefBrowserSettings settings) Parameters Type Name Description CefBrowserSettings settings Returns Type Description System.IntPtr Implements System.IDisposable"
  },
  "api/IronPdf.Engines.Chrome.CefRenderSettings.html": {
    "href": "api/IronPdf.Engines.Chrome.CefRenderSettings.html",
    "title": "Class CefRenderSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CefRenderSettings Inheritance System.Object CefRenderSettings Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public class CefRenderSettings : Object Constructors CefRenderSettings() Declaration public CefRenderSettings() Properties AutoSizeBehavior Declaration public int AutoSizeBehavior { get; set; } Property Value Type Description System.Int32 AutoSizeScreenToPaperPPI Declaration public int AutoSizeScreenToPaperPPI { get; set; } Property Value Type Description System.Int32 EnableBackgrounds Declaration public bool EnableBackgrounds { get; set; } Property Value Type Description System.Boolean EnableEmulateScreenMediaType Enable emulation of \"screen\" css media type Declaration public bool EnableEmulateScreenMediaType { get; set; } Property Value Type Description System.Boolean EnableFormGeneration Declaration public bool EnableFormGeneration { get; set; } Property Value Type Description System.Boolean EnableLandscapeOrientation Enable landscape orientation Declaration public bool EnableLandscapeOrientation { get; set; } Property Value Type Description System.Boolean FirstPageNumber Declaration public int FirstPageNumber { get; set; } Property Value Type Description System.Int32 FooterHtml Declaration public string FooterHtml { get; set; } Property Value Type Description System.String HeaderHtml Declaration public string HeaderHtml { get; set; } Property Value Type Description System.String MaxFooterHeight Max footer height in pixels Declaration public int MaxFooterHeight { get; set; } Property Value Type Description System.Int32 MaxHeaderHeight Max header height in pixels Declaration public int MaxHeaderHeight { get; set; } Property Value Type Description System.Int32 PageHeight Declaration public double PageHeight { get; set; } Property Value Type Description System.Double PageMarginBottom Declaration public double PageMarginBottom { get; set; } Property Value Type Description System.Double PageMarginLeft Declaration public double PageMarginLeft { get; set; } Property Value Type Description System.Double PageMarginRight Declaration public double PageMarginRight { get; set; } Property Value Type Description System.Double PageMarginTop Declaration public double PageMarginTop { get; set; } Property Value Type Description System.Double PageMarginType Declaration public int PageMarginType { get; set; } Property Value Type Description System.Int32 PageSizeType Declaration public string PageSizeType { get; set; } Property Value Type Description System.String PageWidth Declaration public double PageWidth { get; set; } Property Value Type Description System.Double PostProcessingJavascript Declaration public string PostProcessingJavascript { get; set; } Property Value Type Description System.String RenderDelay Declaration public int RenderDelay { get; set; } Property Value Type Description System.Int32 SavePath Declaration public string SavePath { get; set; } Property Value Type Description System.String Scale Declaration public double Scale { get; set; } Property Value Type Description System.Double Timeout Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods DeletePointer() Declaration public void DeletePointer() Dispose() Declaration public void Dispose() Finalize() Declaration protected override void Finalize() GetPointer() Declaration public IntPtr GetPointer() Returns Type Description System.IntPtr TranslateMarginType(String) Translate a margin type string into an enum value Declaration public static int TranslateMarginType(string type) Parameters Type Name Description System.String type Margin type string Returns Type Description System.Int32 Equivalent enum value Operators Implicit(CefRenderSettings to IntPtr) Declaration public static implicit operator IntPtr(CefRenderSettings settings) Parameters Type Name Description CefRenderSettings settings Returns Type Description System.IntPtr"
  },
  "api/IronPdf.Engines.Chrome.ChromeGpuModes.html": {
    "href": "api/IronPdf.Engines.Chrome.ChromeGpuModes.html",
    "title": "Class ChromeGpuModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ChromeGpuModes Chrome GPU hardware utilization when rendering HTML to PDF Inheritance System.Object ChromeGpuModes Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public sealed class ChromeGpuModes : Enum Fields Disabled Disable GPU hardware utilization Declaration public const ChromeGpuModes Disabled Field Value Type Description ChromeGpuModes Hardware Enable hardware acceleration Declaration public const ChromeGpuModes Hardware Field Value Type Description ChromeGpuModes HardwareFull Enable hardware acceleration with Vulkan features Declaration public const ChromeGpuModes HardwareFull Field Value Type Description ChromeGpuModes Software Enable software acceleration Declaration public const ChromeGpuModes Software Field Value Type Description ChromeGpuModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Chrome.FitToPaperModes.html": {
    "href": "api/IronPdf.Engines.Chrome.FitToPaperModes.html",
    "title": "Class FitToPaperModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FitToPaperModes Behaviors when fitting HTML content to a physical paper size Can affect zoom level and css layout Inheritance System.Object FitToPaperModes Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public sealed class FitToPaperModes : Enum Fields Automatic Measures minimum HTML content width after it is rendered by the browser and calculates Zoom based on the width of the content. Zoom and ViewPortWidth have no effect and are calculated automatically by IronPdf. Declaration public const FitToPaperModes Automatic Field Value Type Description FitToPaperModes Remarks Useful when fitting a wide content or content of unknown width onto a PDF page AutomaticFit Measures minimum HTML content width after it is rendered by the browser using the smallest view port possible, and calculates Zoom based on the width of the content. Use ViewPortWidth to specify the minimum number of pixels to be fit on each PDF page. Zoom has no effect and is calculated automatically by IronPdf. Declaration public const FitToPaperModes AutomaticFit Field Value Type Description FitToPaperModes Remarks Useful when fitting smaller content onto a wide page FixedPixelWidth Fit an exact number of pixels onto each PDF page. Uses ViewPortWidth to specify the pixel width to fit on each PDF page. Zoom has no effect. Instead, IronPdf will calculate the zoom level based on ViewPortWidth and PaperSize Declaration public const FitToPaperModes FixedPixelWidth Field Value Type Description FitToPaperModes Remarks Useful when an optimal pixel width is known or printing documents to match a Chrome browser window display value__ Declaration public int value__ Field Value Type Description System.Int32 Zoom Default Chrome PDF printing behavior. Uses Zoom to specify zoom level. ViewPortWidth has no effect. Instead, Chrome will automatically set the view port based on PaperSize . Use CssMediaType to specify CSS media style. Declaration public const FitToPaperModes Zoom Field Value Type Description FitToPaperModes Remarks Useful when using 'print' CSS media style or printing documents to match the Chrome browser print preview."
  },
  "api/IronPdf.Engines.Chrome.html": {
    "href": "api/IronPdf.Engines.Chrome.html",
    "title": "Namespace IronPdf.Engines.Chrome | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Engines.Chrome Classes CefBrowserSettings CefRenderSettings ChromeGpuModes Chrome GPU hardware utilization when rendering HTML to PDF FitToPaperModes Behaviors when fitting HTML content to a physical paper size Can affect zoom level and css layout StringDelegate Callback delegate for a method containing a single string parameter"
  },
  "api/IronPdf.Engines.Chrome.StringDelegate.html": {
    "href": "api/IronPdf.Engines.Chrome.StringDelegate.html",
    "title": "Class StringDelegate | C# PDF Library Documentation | IronPDF",
    "keywords": "Class StringDelegate Callback delegate for a method containing a single string parameter Inheritance System.Object StringDelegate Namespace : IronPdf.Engines.Chrome Assembly : IronPdf.dll Syntax public sealed class StringDelegate : MulticastDelegate Constructors StringDelegate(Object, IntPtr) Declaration public StringDelegate(object object, IntPtr method) Parameters Type Name Description System.Object object System.IntPtr method Methods BeginInvoke(String, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(string text, AsyncCallback callback, object object) Parameters Type Name Description System.String text System.AsyncCallback callback System.Object object Returns Type Description System.IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description System.IAsyncResult result Invoke(String) Declaration public virtual void Invoke(string text) Parameters Type Name Description System.String text"
  },
  "api/IronPdf.Engines.Pdfium.BitmapRenderOptions.html": {
    "href": "api/IronPdf.Engines.Pdfium.BitmapRenderOptions.html",
    "title": "Class BitmapRenderOptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BitmapRenderOptions Inheritance System.Object BitmapRenderOptions Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class BitmapRenderOptions : Enum Fields DisableCatch_OBSOLETE Declaration public const BitmapRenderOptions DisableCatch_OBSOLETE Field Value Type Description BitmapRenderOptions DisableImageAntialiasing Declaration public const BitmapRenderOptions DisableImageAntialiasing Field Value Type Description BitmapRenderOptions DisableNativeText Declaration public const BitmapRenderOptions DisableNativeText Field Value Type Description BitmapRenderOptions DisablePathAntialiasing Declaration public const BitmapRenderOptions DisablePathAntialiasing Field Value Type Description BitmapRenderOptions DisableTextAntialiasing Declaration public const BitmapRenderOptions DisableTextAntialiasing Field Value Type Description BitmapRenderOptions EnableDebugInfo_OBSOLETE Declaration public const BitmapRenderOptions EnableDebugInfo_OBSOLETE Field Value Type Description BitmapRenderOptions ForceHalftoneImageStretching Declaration public const BitmapRenderOptions ForceHalftoneImageStretching Field Value Type Description BitmapRenderOptions Grayscale Declaration public const BitmapRenderOptions Grayscale Field Value Type Description BitmapRenderOptions LimitCacheSize Declaration public const BitmapRenderOptions LimitCacheSize Field Value Type Description BitmapRenderOptions None Declaration public const BitmapRenderOptions None Field Value Type Description BitmapRenderOptions OptimizeTextForLcd Declaration public const BitmapRenderOptions OptimizeTextForLcd Field Value Type Description BitmapRenderOptions RenderForPrinting Declaration public const BitmapRenderOptions RenderForPrinting Field Value Type Description BitmapRenderOptions ReverseByteOrder Declaration public const BitmapRenderOptions ReverseByteOrder Field Value Type Description BitmapRenderOptions ShowAnnotations Declaration public const BitmapRenderOptions ShowAnnotations Field Value Type Description BitmapRenderOptions StrokeFillPaths Declaration public const BitmapRenderOptions StrokeFillPaths Field Value Type Description BitmapRenderOptions value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.html": {
    "href": "api/IronPdf.Engines.Pdfium.html",
    "title": "Namespace IronPdf.Engines.Pdfium | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Engines.Pdfium Classes BitmapRenderOptions PdfDocumentPermissions PdfFlattenResults PdfFlattenStyles PdfFormFieldFlags PdfFormFieldType PdfImageExtractionOptions"
  },
  "api/IronPdf.Engines.Pdfium.PdfDocumentPermissions.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfDocumentPermissions.html",
    "title": "Class PdfDocumentPermissions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocumentPermissions Inheritance System.Object PdfDocumentPermissions Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfDocumentPermissions : Enum Fields AllowAccessibilityExtractContent Declaration public const PdfDocumentPermissions AllowAccessibilityExtractContent Field Value Type Description PdfDocumentPermissions AllowAll Declaration public const PdfDocumentPermissions AllowAll Field Value Type Description PdfDocumentPermissions AllowAnnotations Declaration public const PdfDocumentPermissions AllowAnnotations Field Value Type Description PdfDocumentPermissions AllowAssembleDocument Declaration public const PdfDocumentPermissions AllowAssembleDocument Field Value Type Description PdfDocumentPermissions AllowExtractContent Declaration public const PdfDocumentPermissions AllowExtractContent Field Value Type Description PdfDocumentPermissions AllowFillForms Declaration public const PdfDocumentPermissions AllowFillForms Field Value Type Description PdfDocumentPermissions AllowModify Declaration public const PdfDocumentPermissions AllowModify Field Value Type Description PdfDocumentPermissions AllowPrint Declaration public const PdfDocumentPermissions AllowPrint Field Value Type Description PdfDocumentPermissions AllowPrintFullQuality Declaration public const PdfDocumentPermissions AllowPrintFullQuality Field Value Type Description PdfDocumentPermissions None Declaration public const PdfDocumentPermissions None Field Value Type Description PdfDocumentPermissions value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFlattenResults.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFlattenResults.html",
    "title": "Class PdfFlattenResults | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFlattenResults Inheritance System.Object PdfFlattenResults Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFlattenResults : Enum Fields Failed Declaration public const PdfFlattenResults Failed Field Value Type Description PdfFlattenResults NoChange Declaration public const PdfFlattenResults NoChange Field Value Type Description PdfFlattenResults Successful Declaration public const PdfFlattenResults Successful Field Value Type Description PdfFlattenResults value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFlattenStyles.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFlattenStyles.html",
    "title": "Class PdfFlattenStyles | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFlattenStyles Inheritance System.Object PdfFlattenStyles Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFlattenStyles : Enum Fields Normal Declaration public const PdfFlattenStyles Normal Field Value Type Description PdfFlattenStyles Print Declaration public const PdfFlattenStyles Print Field Value Type Description PdfFlattenStyles value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFormFieldFlags.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFormFieldFlags.html",
    "title": "Class PdfFormFieldFlags | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFormFieldFlags Inheritance System.Object PdfFormFieldFlags Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFormFieldFlags : Enum Fields NoExport Declaration public const PdfFormFieldFlags NoExport Field Value Type Description PdfFormFieldFlags None Declaration public const PdfFormFieldFlags None Field Value Type Description PdfFormFieldFlags ReadOnly Declaration public const PdfFormFieldFlags ReadOnly Field Value Type Description PdfFormFieldFlags Required Declaration public const PdfFormFieldFlags Required Field Value Type Description PdfFormFieldFlags value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfFormFieldType.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfFormFieldType.html",
    "title": "Class PdfFormFieldType | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfFormFieldType Inheritance System.Object PdfFormFieldType Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfFormFieldType : Enum Fields Checkbox Declaration public const PdfFormFieldType Checkbox Field Value Type Description PdfFormFieldType Combobox Declaration public const PdfFormFieldType Combobox Field Value Type Description PdfFormFieldType Listbox Declaration public const PdfFormFieldType Listbox Field Value Type Description PdfFormFieldType Pushbutton Declaration public const PdfFormFieldType Pushbutton Field Value Type Description PdfFormFieldType Radiobutton Declaration public const PdfFormFieldType Radiobutton Field Value Type Description PdfFormFieldType Signature Declaration public const PdfFormFieldType Signature Field Value Type Description PdfFormFieldType Textfield Declaration public const PdfFormFieldType Textfield Field Value Type Description PdfFormFieldType Unknown Declaration public const PdfFormFieldType Unknown Field Value Type Description PdfFormFieldType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Engines.Pdfium.PdfImageExtractionOptions.html": {
    "href": "api/IronPdf.Engines.Pdfium.PdfImageExtractionOptions.html",
    "title": "Class PdfImageExtractionOptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfImageExtractionOptions Inheritance System.Object PdfImageExtractionOptions Namespace : IronPdf.Engines.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfImageExtractionOptions : Enum Fields GetBitmap Declaration public const PdfImageExtractionOptions GetBitmap Field Value Type Description PdfImageExtractionOptions GetRenderedBitmap Declaration public const PdfImageExtractionOptions GetRenderedBitmap Field Value Type Description PdfImageExtractionOptions value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Exceptions.html": {
    "href": "api/IronPdf.Exceptions.html",
    "title": "Namespace IronPdf.Exceptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Exceptions Classes IronPdfAssemblyVersionMismatchException Represents errors that occur while loading assemblies during IronPdf deployment. IronPdfInputException Represents errors that occur when invalid variables are passed to IronPDF. IronPdfNativeException Represents errors that occur in IronPDF native code IronPdfProductException Represents errors that occur during IronPDF execution."
  },
  "api/IronPdf.Exceptions.IronPdfAssemblyVersionMismatchException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfAssemblyVersionMismatchException.html",
    "title": "Class IronPdfAssemblyVersionMismatchException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfAssemblyVersionMismatchException Represents errors that occur while loading assemblies during IronPdf deployment. Inheritance System.Object IronPdfAssemblyVersionMismatchException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfAssemblyVersionMismatchException : Exception Properties Message Declaration public override string Message { get; } Property Value Type Description System.String"
  },
  "api/IronPdf.Exceptions.IronPdfInputException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfInputException.html",
    "title": "Class IronPdfInputException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfInputException Represents errors that occur when invalid variables are passed to IronPDF. Inheritance System.Object IronPdfInputException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfInputException : Exception Constructors IronPdfInputException() Initializes a new instance of the IronPdfInputException class. Declaration public IronPdfInputException() IronPdfInputException(String) Initializes a new instance of the IronPdfInputException class with a specified error message. Declaration public IronPdfInputException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfInputException(String, Exception) Initializes a new instance of the IronPdfInputException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfInputException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Exceptions.IronPdfNativeException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfNativeException.html",
    "title": "Class IronPdfNativeException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfNativeException Represents errors that occur in IronPDF native code Inheritance System.Object IronPdfNativeException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfNativeException : Exception Constructors IronPdfNativeException() Initializes a new instance of the IronPdfNativeException class. Declaration public IronPdfNativeException() IronPdfNativeException(String) Initializes a new instance of the IronPdfNativeException class with a specified error message. Declaration public IronPdfNativeException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfNativeException(String, Exception) Initializes a new instance of the IronPdfNativeException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfNativeException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Exceptions.IronPdfProductException.html": {
    "href": "api/IronPdf.Exceptions.IronPdfProductException.html",
    "title": "Class IronPdfProductException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfProductException Represents errors that occur during IronPDF execution. Inheritance System.Object IronPdfProductException Namespace : IronPdf.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfProductException : Exception Constructors IronPdfProductException() Initializes a new instance of the IronPdfProductException class. Declaration public IronPdfProductException() IronPdfProductException(String) Initializes a new instance of the IronPdfProductException class with a specified error message. Declaration public IronPdfProductException(string message) Parameters Type Name Description System.String message The message that describes the error. IronPdfProductException(String, Exception) Initializes a new instance of the IronPdfProductException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IronPdfProductException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( langword_csharp_Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/IronPdf.Font.FontTypes.html": {
    "href": "api/IronPdf.Font.FontTypes.html",
    "title": "Class FontTypes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FontTypes Supported PDF Fonts Inheritance System.Object IronPdf.Extensions.Enumeration FontTypes Implements System.IComparable Namespace : IronPdf.Font Assembly : IronPdf.dll Syntax public class FontTypes : Enumeration Properties Arial Declaration public static FontTypes Arial { get; } Property Value Type Description FontTypes ArialBold Declaration public static FontTypes ArialBold { get; } Property Value Type Description FontTypes ArialBoldItalic Declaration public static FontTypes ArialBoldItalic { get; } Property Value Type Description FontTypes ArialItalic Declaration public static FontTypes ArialItalic { get; } Property Value Type Description FontTypes Courier Declaration public static FontTypes Courier { get; } Property Value Type Description FontTypes CourierBold Declaration public static FontTypes CourierBold { get; } Property Value Type Description FontTypes CourierBoldOblique Declaration public static FontTypes CourierBoldOblique { get; } Property Value Type Description FontTypes CourierNew Declaration public static FontTypes CourierNew { get; } Property Value Type Description FontTypes CourierNewBold Declaration public static FontTypes CourierNewBold { get; } Property Value Type Description FontTypes CourierNewBoldItalic Declaration public static FontTypes CourierNewBoldItalic { get; } Property Value Type Description FontTypes CourierNewItalic Declaration public static FontTypes CourierNewItalic { get; } Property Value Type Description FontTypes CourierOblique Declaration public static FontTypes CourierOblique { get; } Property Value Type Description FontTypes Helvetica Declaration public static FontTypes Helvetica { get; } Property Value Type Description FontTypes HelveticaBold Declaration public static FontTypes HelveticaBold { get; } Property Value Type Description FontTypes HelveticaBoldOblique Declaration public static FontTypes HelveticaBoldOblique { get; } Property Value Type Description FontTypes HelveticaOblique Declaration public static FontTypes HelveticaOblique { get; } Property Value Type Description FontTypes Symbol Declaration public static FontTypes Symbol { get; } Property Value Type Description FontTypes TimesNewRoman Declaration public static FontTypes TimesNewRoman { get; } Property Value Type Description FontTypes TimesNewRomanBold Declaration public static FontTypes TimesNewRomanBold { get; } Property Value Type Description FontTypes TimesNewRomanBoldItalic Declaration public static FontTypes TimesNewRomanBoldItalic { get; } Property Value Type Description FontTypes TimesNewRomanItalic Declaration public static FontTypes TimesNewRomanItalic { get; } Property Value Type Description FontTypes ZapfDingbats Declaration public static FontTypes ZapfDingbats { get; } Property Value Type Description FontTypes Methods FromString(String) Declaration public static FontTypes FromString(string fontName) Parameters Type Name Description System.String fontName Returns Type Description FontTypes Implements System.IComparable"
  },
  "api/IronPdf.Font.html": {
    "href": "api/IronPdf.Font.html",
    "title": "Namespace IronPdf.Font | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Font Classes FontTypes Supported PDF Fonts"
  },
  "api/IronPdf.Forms.CheckBoxField.html": {
    "href": "api/IronPdf.Forms.CheckBoxField.html",
    "title": "Class CheckBoxField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class CheckBoxField Represents a check-box in a PDF form. Inheritance System.Object FormField CheckBoxField Inherited Members FormField.idProvider FormField.ToString() FormField.SetFont(FontTypes, Double) FormField.AnnotationIndex FormField.FullName FormField.Name FormField.PageIndex FormField.ReadOnly FormField.Type FormField.Value FormField.Width FormField.Height FormField.X FormField.Y Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class CheckBoxField : FormField Properties BooleanValue Gets or sets a value indicating whether the check-box is checked (ticked). Declaration public bool BooleanValue { get; set; } Property Value Type Description System.Boolean true if checked; otherwise, false . Inherited members idProvider ToString() SetFont(FontTypes, Double) AnnotationIndex FullName Name PageIndex ReadOnly Type Value Width Height X Y See Also FormField"
  },
  "api/IronPdf.Forms.ComboBoxField.html": {
    "href": "api/IronPdf.Forms.ComboBoxField.html",
    "title": "Class ComboBoxField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ComboBoxField Represents a combo-box (drop down menu) in a PDF form. Inheritance System.Object FormField ComboBoxField Inherited Members FormField.idProvider FormField.ToString() FormField.SetFont(FontTypes, Double) FormField.AnnotationIndex FormField.FullName FormField.Name FormField.PageIndex FormField.ReadOnly FormField.Type FormField.Value FormField.Width FormField.Height FormField.X FormField.Y Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class ComboBoxField : FormField Properties Options Gets the available options for the combo-box in zero based index order. Declaration public string[] Options { get; } Property Value Type Description System.String [] The option names as strings. SelectedIndex Gets the index of the selected option. Declaration public int SelectedIndex { get; } Property Value Type Description System.Int32 The index of the selected. 0 based. Inherited members idProvider ToString() SetFont(FontTypes, Double) AnnotationIndex FullName Name PageIndex ReadOnly Type Value Width Height X Y See Also FormField"
  },
  "api/IronPdf.Forms.FormField.html": {
    "href": "api/IronPdf.Forms.FormField.html",
    "title": "Class FormField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FormField Generic base class from which all PDF Form fields are derived. Inheritance System.Object FormField CheckBoxField ComboBoxField TextField Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class FormField : Object Fields idProvider Declaration protected readonly PdfDocumentIdProvider idProvider Field Value Type Description IronPdf.PdfDocumentIdProvider Properties AnnotationIndex Index of annotation associated with this form field Declaration public int AnnotationIndex { get; } Property Value Type Description System.Int32 FullName Gets the fully qualified name of this field. Declaration public string FullName { get; } Property Value Type Description System.String The fully qualified name as a string. Height Form field height Declaration public double Height { get; } Property Value Type Description System.Double Name Gets the ID name of this field. Declaration public string Name { get; } Property Value Type Description System.String The name as a string. PageIndex Page index which contains this form field Declaration public int PageIndex { get; } Property Value Type Description System.Int32 ReadOnly Gets or sets the permissions for users to fill-in current form field. Declaration public bool ReadOnly { get; set; } Property Value Type Description System.Boolean true if form field is readonly, otherwise false . Type Declaration public FormFieldTypes Type { get; } Property Value Type Description FormFieldTypes Value Gets the value of the editable PDF field. Declaration public string Value { get; set; } Property Value Type Description System.String The value. Width Form field width Declaration public double Width { get; } Property Value Type Description System.Double X Form field x position Declaration public double X { get; } Property Value Type Description System.Double Y Form field x position Declaration public double Y { get; } Property Value Type Description System.Double Methods SetFont(FontTypes, Double) Sets the font to the text field of pdf form. Declaration public virtual void SetFont(FontTypes fontType, double fontSize = 11) Parameters Type Name Description FontTypes fontType Type of the font. System.Double fontSize Size of the font. ToString() Returns the value of this field. Declaration public override string ToString() Returns Type Description System.String The value of this field."
  },
  "api/IronPdf.Forms.FormFieldTypes.html": {
    "href": "api/IronPdf.Forms.FormFieldTypes.html",
    "title": "Class FormFieldTypes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class FormFieldTypes Form field types Inheritance System.Object FormFieldTypes Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public sealed class FormFieldTypes : Enum Fields CheckBox Declaration public const FormFieldTypes CheckBox Field Value Type Description FormFieldTypes ComboBox Declaration public const FormFieldTypes ComboBox Field Value Type Description FormFieldTypes ListBox Declaration public const FormFieldTypes ListBox Field Value Type Description FormFieldTypes PushButton Declaration public const FormFieldTypes PushButton Field Value Type Description FormFieldTypes RadioButton Declaration public const FormFieldTypes RadioButton Field Value Type Description FormFieldTypes Signature Declaration public const FormFieldTypes Signature Field Value Type Description FormFieldTypes TextField Declaration public const FormFieldTypes TextField Field Value Type Description FormFieldTypes Unknown Declaration public const FormFieldTypes Unknown Field Value Type Description FormFieldTypes value__ Declaration public int value__ Field Value Type Description System.Int32 Xfa Declaration public const FormFieldTypes Xfa Field Value Type Description FormFieldTypes XfaCheckBox Declaration public const FormFieldTypes XfaCheckBox Field Value Type Description FormFieldTypes XfaComboBox Declaration public const FormFieldTypes XfaComboBox Field Value Type Description FormFieldTypes XfaImageField Declaration public const FormFieldTypes XfaImageField Field Value Type Description FormFieldTypes XfaListBox Declaration public const FormFieldTypes XfaListBox Field Value Type Description FormFieldTypes XfaPushButton Declaration public const FormFieldTypes XfaPushButton Field Value Type Description FormFieldTypes XfaSignature Declaration public const FormFieldTypes XfaSignature Field Value Type Description FormFieldTypes XfaTextField Declaration public const FormFieldTypes XfaTextField Field Value Type Description FormFieldTypes"
  },
  "api/IronPdf.Forms.html": {
    "href": "api/IronPdf.Forms.html",
    "title": "Namespace IronPdf.Forms | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Forms Classes CheckBoxField Represents a check-box in a PDF form. ComboBoxField Represents a combo-box (drop down menu) in a PDF form. FormField Generic base class from which all PDF Form fields are derived. FormFieldTypes Form field types PdfForm A collection of the user-editable form fields within a PDF document TextField Represents an editable text input field in a PDF document."
  },
  "api/IronPdf.Forms.PdfForm.html": {
    "href": "api/IronPdf.Forms.PdfForm.html",
    "title": "Class PdfForm | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfForm A collection of the user-editable form fields within a PDF document Inheritance System.Object PdfForm Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class PdfForm : Object Properties FieldNames Retrieve a new copy of the list of form fields names contained within a PDF document Declaration public string[] FieldNames { get; } Property Value Type Description System.String [] Remarks Modifying this list will not affect the PDF document Fields Retrieve a new copy of the list of form fields contained within a PDF document Declaration public List<FormField> Fields { get; } Property Value Type Description System.Collections.Generic.List < FormField > Remarks Generates a snapshot of the form fields currently within the PDF document. Modifying properties of form fields will immediately update the document. Adding or removing from this list will not add or remove fields from the document. Methods GetFieldByName(String) Returns a FormField by its name. This method is fault tolerant and will attempt to match case mistakes and partial field names. Declaration public FormField GetFieldByName(string FieldName) Parameters Type Name Description System.String FieldName The name of the field to be edited. This is analogous to the HTML input 'name' attribute when creating a PDF with forms from HTML using IronPDF. Returns Type Description FormField A FormField object RenameField(String, String) Rename a FormField Declaration public string RenameField(string CurrentFieldName, string NewFieldName) Parameters Type Name Description System.String CurrentFieldName Current fully qualified field name System.String NewFieldName New partial field name Returns Type Description System.String New fully-qualified field name Remarks Please use a fully qualified field name for CurrentFieldName, and a partial field name for NewFieldName"
  },
  "api/IronPdf.Forms.TextField.html": {
    "href": "api/IronPdf.Forms.TextField.html",
    "title": "Class TextField | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextField Represents an editable text input field in a PDF document. Inheritance System.Object FormField TextField Inherited Members FormField.idProvider FormField.ToString() FormField.AnnotationIndex FormField.FullName FormField.Name FormField.PageIndex FormField.ReadOnly FormField.Type FormField.Value FormField.Width FormField.Height FormField.X FormField.Y Namespace : IronPdf.Forms Assembly : IronPdf.dll Syntax public class TextField : FormField Methods SetFont(FontTypes, Double) Sets the font to the text field of pdf form. Declaration public override void SetFont(FontTypes fontType, double fontSize = 11) Parameters Type Name Description FontTypes fontType Type of the font. System.Double fontSize Size of the font. Overrides FormField.SetFont(FontTypes, Double) Inherited members idProvider ToString() AnnotationIndex FullName Name PageIndex ReadOnly Type Value Width Height X Y See Also FormField"
  },
  "api/IronPdf.html": {
    "href": "api/IronPdf.html",
    "title": "Namespace IronPdf | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf Classes ChromeHttpLoginCredentials Provides credentials for IronPdf's embedded Chrome browser to log-in to an intranet, extranet or website, impersonating a user. This allows a unique ability to render web-pages as PDFs even on secure intranets, extranets and websites. ChromePdfRenderer IronPdf.ChromePdfRenderer allows any web page or Html 'snippet' to be turned into a PDF document using an up-to-date embedded Chrome browser. As of 2021 Iron Software recommend ChromePdfRenderer as our best PDF Renderer and a drop-in replacement for this class. ChromePdfRenderOptions Html To PDF output options for ChromePdfRenderer . Specifies options such as Paper-Size, DPI, Headers and Footers and other Chromium specific browser setup options. HtmlHeaderFooter A HTML Header or Footer which will be printed onto every page of the PDF. This can be used to override When using HtmlHeaderFooter it is important to set HtmlFragment Merge meta-data into your HTML using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} ImageToPdfConverter The ImageToPdfConverter class can be used to create PDF documents from images. It accepts both image files and Bitmap objects as input. The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF. To rasterize PDF documents as images (the reverse operation), see ToBitmap(Int32) and RasterizeToImageFiles(String, ImageType, Int32) Installation Global installation and setup preferences for all instances of IronPDF License Allows IronPdf license keys to be applied globally across an application. PdfAttachment Pdf document file attachment PdfAttachmentCollection Collection of attachments contained within a pdf document PdfDocument PixelFormat Specifies the format of the color data for each pixel in the image. TextHeaderFooter Defines PDF Header and Footer display options. TextHeaderFooter uses a logical approach to rendering Headers and Footers for the most common use cases. UseMargins Margin values which can be copied from the main document to headers and footers applied to the document"
  },
  "api/IronPdf.HtmlHeaderFooter.html": {
    "href": "api/IronPdf.HtmlHeaderFooter.html",
    "title": "Class HtmlHeaderFooter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class HtmlHeaderFooter A HTML Header or Footer which will be printed onto every page of the PDF. This can be used to override When using HtmlHeaderFooter it is important to set HtmlFragment Merge meta-data into your HTML using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Inheritance System.Object TextHeaderFooter HtmlHeaderFooter Implements System.ICloneable Inherited Members TextHeaderFooter.CenterText TextHeaderFooter.DrawDividerLine TextHeaderFooter.Font TextHeaderFooter.FontSize TextHeaderFooter.LeftText TextHeaderFooter.RightText Namespace : IronPdf Assembly : IronPdf.dll Syntax public class HtmlHeaderFooter : TextHeaderFooter Constructors HtmlHeaderFooter() Declaration public HtmlHeaderFooter() Properties BaseUrl The Base URL all URLS in the HtmlFragment will be relative to. This includes 'src' attributes on images, scripts, style-sheets and also hrefs on hyper-links. Note: A base URL that points to a directory should end with a slash. Base URL accepts file paths as well as URLS. If no BaseUrl is given, the HtmlHeaderFooter BaseUrl will be inherited from the main HTML document where possible. Declaration public string BaseUrl { get; set; } Property Value Type Description System.String HtmlFragment The HTML which will be used to render the Header or Footer should be an HTML snippet rather than a complete document. It may contain styles & images. Merge meta-data into the HtmlFragment by putting any of these placeholder strings into the text: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title}. An alternative mail-merge style using the pattern <span class='total-pages'></span> is also supported. HtmlFragment is a stand-alone HTML document which does not inherit styles or settings from your main HTML content unless LoadStylesAndCSSFromMainHtmlDocument is set true Declaration public string HtmlFragment { get; set; } Property Value Type Description System.String LoadStylesAndCSSFromMainHtmlDocument Loads style code blocks and links to CSS style sheets from the main HTML document (which provides the PDF content) into the HtmlHeaderFooter . By default, HTML Headers and Footers are stand- alone HTML documents with their own default styles. Setting LoadStylesAndCSSFromMainHtmlDocument to true will attempt to load all STYLE and LINK tags from the main HTML document (which renders teh PDF) into the HtmlHeaderFooter . If your main HTML document contains complex CSS frameworks, styles the HEAD or BODY element heavily or loads CSS from javascript then this method may not work as intended. This feature is not available for RenderUrlAsPdf methods. It works for RenderHtmlAsPdf, HTMLToPdf and HtmlFileToPdf conversions only. It is often preferable to load style sheets explicitly into your HTML Headers and Footers as STYLE and LINK tags within the HtmlFragment for granular control Declaration public bool LoadStylesAndCSSFromMainHtmlDocument { get; set; } Property Value Type Description System.Boolean MaxHeight Maximum Height of the HTML Header / Footer in millimeters. This value must be set sufficiently high to display the full HTML header / footer content. Declaration public Nullable<int> MaxHeight { get; set; } Property Value Type Description System.Nullable < System.Int32 > Methods Clone() Supports System.ICloneable . Creates a deep copy of this class instance. Declaration public object Clone() Returns Type Description System.Object A deep clone of this instance. Use explicit casting to convert object back to the intended type. Implements System.ICloneable Inherited members CenterText DrawDividerLine Font FontSize LeftText RightText"
  },
  "api/IronPdf.ImageToPdfConverter.html": {
    "href": "api/IronPdf.ImageToPdfConverter.html",
    "title": "Class ImageToPdfConverter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageToPdfConverter The ImageToPdfConverter class can be used to create PDF documents from images. It accepts both image files and Bitmap objects as input. The ImageToPdf static methods create simple PDF documents containing each image as one page of the created PDF. To rasterize PDF documents as images (the reverse operation), see ToBitmap(Int32) and RasterizeToImageFiles(String, ImageType, Int32) Inheritance System.Object ImageToPdfConverter Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class ImageToPdfConverter : Object Properties PaperSize Pdf Paper Size (Default: A4) Declaration public static PdfPaperSize PaperSize { get; set; } Property Value Type Description PdfPaperSize Methods ImageToPdf(AnyBitmap, ImageBehavior, ChromePdfRenderOptions) Converts a single IronSoftware.Drawing.AnyBitmap object or Bitmap to a PDF document of matching dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(AnyBitmap image, ImageBehavior behavior, ChromePdfRenderOptions options = null) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap image The image object. Requires a project reference to the IronSoftware.System.Drawing Assembly. ImageBehavior behavior Describes how image should be placed on the PDF page ChromePdfRenderOptions options Rendering options Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException ImageToPdf(IEnumerable<AnyBitmap>, ImageBehavior, ChromePdfRenderOptions) Converts multiple IronSoftware.Drawing.AnyBitmap objects or Bitmaps into a PDF document. Each image creates 1 page which matches the image dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(IEnumerable<AnyBitmap> images, ImageBehavior behavior, ChromePdfRenderOptions options = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < IronSoftware.Drawing.AnyBitmap > images The image objects. Requires a project reference to the IronSoftware.System.Drawing Assembly. ImageBehavior behavior Describes how image should be placed on the PDF page ChromePdfRenderOptions options Rendering options Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException ImageToPdf(IEnumerable<String>, ImageBehavior, ChromePdfRenderOptions) Converts multiple image files to a PDF document. Each image creates 1 page which matches the image dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(IEnumerable<string> imageFileNames, ImageBehavior behavior, ChromePdfRenderOptions options = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > imageFileNames The image file path names. ImageBehavior behavior Describes how image should be placed on the PDF page ChromePdfRenderOptions options Rendering options Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException ImageToPdf(String, ImageBehavior, ChromePdfRenderOptions) Converts a single image file to an identical PDF document of matching dimensions. The default PaperSize is A4. You can set it via ImageToPdfConverter.PaperSize. Note: Imaging.ImageBehavior.CropPage will set PaperSize equal to ImageSize. Declaration public static PdfDocument ImageToPdf(string imageFileName, ImageBehavior behavior, ChromePdfRenderOptions options = null) Parameters Type Name Description System.String imageFileName File path of the image file. ImageBehavior behavior Describes how image should be placed on the PDF page ChromePdfRenderOptions options Rendering options Returns Type Description PdfDocument Returns a PdfDocument document which can then be edited, saved or served over the web. Exceptions Type Condition System.NotSupportedException The file does not have a supported image format. Supported files: .apng, .avif, .bmp, .cur, .dib, .gif, .ico, .jfif, .jif, .jpe, .jpeg, .jpg, .pjp, .pjpeg, .png, .svg, .tif, .tiff, .webp System.IO.FileNotFoundException"
  },
  "api/IronPdf.Imaging.html": {
    "href": "api/IronPdf.Imaging.html",
    "title": "Namespace IronPdf.Imaging | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Imaging Classes ImageBehavior ImageType An Image File Type Enumeration used to select image file formats when converting PDF documents to images. Also see: RasterizeToImageFiles(String, ImageType, Int32) ImageUtilities Useful methods for working with images in PDF files."
  },
  "api/IronPdf.Imaging.ImageBehavior.html": {
    "href": "api/IronPdf.Imaging.ImageBehavior.html",
    "title": "Class ImageBehavior | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageBehavior Inheritance System.Object ImageBehavior Namespace : IronPdf.Imaging Assembly : IronPdf.dll Syntax public sealed class ImageBehavior : Enum Fields BottomLeftCornerOfPage Image should be placed to the left bottom corner of the page Declaration public const ImageBehavior BottomLeftCornerOfPage Field Value Type Description ImageBehavior BottomRightCornerOfPage Image should be placed to the right bottom corner of the page Declaration public const ImageBehavior BottomRightCornerOfPage Field Value Type Description ImageBehavior CenteredOnPage Image should be placed on center of the page Declaration public const ImageBehavior CenteredOnPage Field Value Type Description ImageBehavior CropPage Page should fit to the image Declaration public const ImageBehavior CropPage Field Value Type Description ImageBehavior FitToPage Image should fit to the page Declaration public const ImageBehavior FitToPage Field Value Type Description ImageBehavior FitToPageAndMaintainAspectRatio Image should fit to the page and keep aspect ratio Declaration public const ImageBehavior FitToPageAndMaintainAspectRatio Field Value Type Description ImageBehavior TopLeftCornerOfPage Image should be placed to the left top corner of the page Declaration public const ImageBehavior TopLeftCornerOfPage Field Value Type Description ImageBehavior TopRightCornerOfPage Image should be placed to the right top corner of the page Declaration public const ImageBehavior TopRightCornerOfPage Field Value Type Description ImageBehavior value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Imaging.ImageType.html": {
    "href": "api/IronPdf.Imaging.ImageType.html",
    "title": "Class ImageType | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageType An Image File Type Enumeration used to select image file formats when converting PDF documents to images. Also see: RasterizeToImageFiles(String, ImageType, Int32) Inheritance System.Object ImageType Namespace : IronPdf.Imaging Assembly : IronPdf.dll Syntax public sealed class ImageType : Enum Fields Bitmap PDF pages will be rendered to windows Bitmap image files. Declaration public const ImageType Bitmap Field Value Type Description ImageType Default Default file type. Will save images in a PNG file type unless a file pattern ends in an image file format such as .png or .jpeg Declaration public const ImageType Default Field Value Type Description ImageType Gif PDF pages will be rendered to non-animated GIF image files. The GIF Declaration public const ImageType Gif Field Value Type Description ImageType Jpeg PDF pages will be rendered to JPEG image files. Declaration public const ImageType Jpeg Field Value Type Description ImageType MultiPageTiff Every page of the PDF will be compiled into a single multi-page TIFF image file (aka. multi-frame TIFF). Declaration public const ImageType MultiPageTiff Field Value Type Description ImageType Png PDF pages will be rendered to PNG (Portable Network Graphics) image files. Declaration public const ImageType Png Field Value Type Description ImageType Tiff PDF pages will be rendered to TIFF image files. Declaration public const ImageType Tiff Field Value Type Description ImageType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Imaging.ImageUtilities.html": {
    "href": "api/IronPdf.Imaging.ImageUtilities.html",
    "title": "Class ImageUtilities | C# PDF Library Documentation | IronPDF",
    "keywords": "Class ImageUtilities Useful methods for working with images in PDF files. Inheritance System.Object ImageUtilities Namespace : IronPdf.Imaging Assembly : IronPdf.dll Syntax public static class ImageUtilities : Object Methods ImageToDataUri(AnyBitmap, Boolean) Turns a IronSoftware.Drawing.AnyBitmap into a DataUri which can used to embed the Image directly into an HTML document. Read standard https://en.wikipedia.org/wiki/Data_URI_scheme Declaration public static string ImageToDataUri(AnyBitmap Image, bool Rasterize = false) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap Image A non-null IronSoftware.Drawing.AnyBitmap System.Boolean Rasterize Optional flag to flatten the image to raw pixels to increase compatibility with HTML (may affect PDF file size and rendering time) Returns Type Description System.String A data URL which can be used as the src attribute of an HTML <img tag"
  },
  "api/IronPdf.Installation.html": {
    "href": "api/IronPdf.Installation.html",
    "title": "Class Installation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Installation Global installation and setup preferences for all instances of IronPDF Inheritance System.Object Installation Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class Installation : Object Fields SendAnonymousAnalyticsAndCrashData Opt in or out of sending anonymous usage statistics about IronPDF usage and performance to help us improve the product and developer experience. Usage statistics are never sent in commercially deployed projects (when a license key is applied), only during development usage. Declaration public static bool SendAnonymousAnalyticsAndCrashData Field Value Type Description System.Boolean Properties AutomaticallyDownloadNativeBinaries Set to True to let IronPDF try to download missing NativeBinaries from the internet at a runtime. Declaration public static bool AutomaticallyDownloadNativeBinaries { get; set; } Property Value Type Description System.Boolean Remarks Useful for IronPdf.Slim ChromeBrowserCachePath Disk cache path for chrome browser instances Declaration public static string ChromeBrowserCachePath { get; set; } Property Value Type Description System.String ChromeBrowserLimit Maximum number of concurrent browsers when using the Chrome renderer Declaration public static int ChromeBrowserLimit { get; set; } Property Value Type Description System.Int32 ChromeGpuMode Chrome renderer GPU compatibility mode. In special environment like Docker or Cloud Service please use ChromeGpuModes.Disabled Declaration public static ChromeGpuModes ChromeGpuMode { get; set; } Property Value Type Description ChromeGpuModes CustomDeploymentDirectory Custom deployment directory for renderer native binaries. Declaration public static string CustomDeploymentDirectory { get; set; } Property Value Type Description System.String LinuxAndDockerDependenciesAutoConfig If true The necessary package dependencies for IronPDF rendering will we automatically installed to Docker and Debian / Ubuntu Linux deployments. Applies only to IronPDF for .Net Core. This will take a few minutes the next time you run IronPDF. Watch the Visual Studio \"Output\" window for progress. Set this to false if manual Docker / Linux setup is more convenient: https://ironpdf.com/docs/questions/docker-linux/ Declaration public static bool LinuxAndDockerDependenciesAutoConfig { get; set; } Property Value Type Description System.Boolean See Also IronSoftware.Deployment.DeploymentEngine.SkipInstallCommands SkipInitialization Set to True to skip certain initialization routines, e.g. Cef initialization Declaration public static bool SkipInitialization { get; set; } Property Value Type Description System.Boolean Remarks Useful for certain environments which have persistence, e.g. IIS or web apps SkipShutdown Set to True to skip certain shutdown routines, e.g. Cef shutdown Declaration public static bool SkipShutdown { get; set; } Property Value Type Description System.Boolean Remarks Useful for certain environments which have persistence, e.g. IIS or web apps TempFolderPath The temporary folder path which temporary files and rendering engine DLLs will be deployed to where necessary. The default location is the system temp folder which is appropriate for most use cases. Declaration public static string TempFolderPath { get; set; } Property Value Type Description System.String Exceptions Type Condition System.ArgumentException value is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars . -or- The system could not retrieve the absolute path. System.Security.SecurityException The caller does not have the required permissions. System.ArgumentNullException value is null . System.NotSupportedException value contains a colon (\":\") that is not part of a volume identifier (for example, \"c:&quot;). System.IO.PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. IronPdfProductException The property TempFolderPath is already initialized. Methods Cleanup() Shutdown and clean-up rendering resources used by IronPDF. Prevents further renders from completing on this process Declaration public static void Cleanup() CleanupTempImages(Nullable<TimeSpan>) Method to remove temporary images from TempFolderPath If you used a custom TempFolderPath then set TempFolderPath to point towards your deployment directory before you call this cleanup method. Declaration public static void CleanupTempImages(Nullable<TimeSpan> expirationTime = null) Parameters Type Name Description System.Nullable < System.TimeSpan > expirationTime Time from last access for files to delete. All files are deleted by default. Initialize() Initializes IronPDF rendering engines immediately to avoid startup time on your first render. Declaration public static void Initialize()"
  },
  "api/IronPdf.License.html": {
    "href": "api/IronPdf.License.html",
    "title": "Class License | C# PDF Library Documentation | IronPDF",
    "keywords": "Class License Allows IronPdf license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronPdf Assembly : IronPdf.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronPDF is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in IronPdf.License.LicenseKey, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironpdf.com/licensing/ and https://ironpdf.com/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean True if the license key given is valid. LicenseKey Removes watermarks. Get Licensed at https://ironpdf.com/licensing For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronPdf.LicenseKey\" value=\"IRONPDF-LICENSE-KEY\"/> within the appSettings tag. See https://ironpdf.com/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronPdf.LicenseKey\" and the value is a valid IronPDF trial or full license key. See https://ironpdf.com/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods IsValidLicense(String) Determines whether a string license key is valid. See https://ironpdf.com/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string LicenseKey) Parameters Type Name Description System.String LicenseKey IronPDF license key as a string Returns Type Description System.Boolean True if the license key given is valid."
  },
  "api/IronPdf.Logging.html": {
    "href": "api/IronPdf.Logging.html",
    "title": "Namespace IronPdf.Logging | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Logging Classes Logger Provides functionality for developers to view debug logs and export log files from IronPdf. Logger.LoggingModes Different Ways to log developer notices and warnings"
  },
  "api/IronPdf.Logging.Logger.html": {
    "href": "api/IronPdf.Logging.Logger.html",
    "title": "Class Logger | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger Provides functionality for developers to view debug logs and export log files from IronPdf. Inheritance System.Object Logger Namespace : IronPdf.Logging Assembly : IronPdf.dll Syntax public static class Logger : Object Properties CustomLogger Custom logger implementation Declaration public static ILogger CustomLogger { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger EnableDebugging Declaration public static bool EnableDebugging { get; set; } Property Value Type Description System.Boolean LogFilePath Setting a log path produces ‘log files’ which may be vey useful for debugging in production or providing to Iron Software support when reporting an issue. LogFilePath may be set to a directory name or a full file name. Setting LogFilePath = null will turn off log files. Declaration public static string LogFilePath { get; set; } Property Value Type Description System.String See Also ClearLogFiles() LoggingMode Activate or disable detailed developer messages sent to your choice of location in the IDE or application console. Declaration public static Logger.LoggingModes LoggingMode { get; set; } Property Value Type Description Logger.LoggingModes Methods ClearLogFiles() Removes any Iron Software log files at the LogFilePath . Declaration public static void ClearLogFiles() See Also LogFilePath Events MessageLogged Event handler to intercept logged messages. Declaration public static event Action<string> MessageLogged Event Type Type Description System.Action < System.String >"
  },
  "api/IronPdf.Logging.Logger.LoggingModes.html": {
    "href": "api/IronPdf.Logging.Logger.LoggingModes.html",
    "title": "Class Logger.LoggingModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger.LoggingModes Different Ways to log developer notices and warnings Inheritance System.Object Logger.LoggingModes Namespace : IronPdf.Logging Assembly : IronPdf.dll Syntax public sealed class LoggingModes : Enum Fields All Send messages to all available endpoints Declaration public const Logger.LoggingModes All Field Value Type Description Logger.LoggingModes Console Sends Messages to System.Console Declaration public const Logger.LoggingModes Console Field Value Type Description Logger.LoggingModes Custom Send messages to custom logger Declaration public const Logger.LoggingModes Custom Field Value Type Description Logger.LoggingModes DebugOutputWindow Sends Messages to System.Diagnostics.Debug Declaration public const Logger.LoggingModes DebugOutputWindow Field Value Type Description Logger.LoggingModes File Send messages to file Declaration public const Logger.LoggingModes File Field Value Type Description Logger.LoggingModes None Do not log messages Declaration public const Logger.LoggingModes None Field Value Type Description Logger.LoggingModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.MetaData.html": {
    "href": "api/IronPdf.MetaData.html",
    "title": "Namespace IronPdf.MetaData | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.MetaData Classes PdfCustomMetadataProperties Class that represents set of custom metadata properties PdfDateFormatter PdfMetaData A class defining PDF file meta-data. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Implemented in MetaData ."
  },
  "api/IronPdf.MetaData.PdfCustomMetadataProperties.html": {
    "href": "api/IronPdf.MetaData.PdfCustomMetadataProperties.html",
    "title": "Class PdfCustomMetadataProperties | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfCustomMetadataProperties Class that represents set of custom metadata properties Inheritance System.Object PdfCustomMetadataProperties Namespace : IronPdf.MetaData Assembly : IronPdf.dll Syntax public class PdfCustomMetadataProperties : Object Properties Item[String] Gets or sets element value with the specified key. Declaration public string this[string key] { get; set; } Parameters Type Name Description System.String key The key of the element. Property Value Type Description System.String Methods Add(String, String) Method for adding property with the specified name and value. You can convert value of any type to the string and store it in custom properties. Declaration public void Add(string name, string value) Parameters Type Name Description System.String name The name of the custom PDF MetaData Property. System.String value The value of the custom PDF MetaData Property as a String. Remove(String) Method for removing property by its name. Declaration public bool Remove(string name) Parameters Type Name Description System.String name The name of the property. Returns Type Description System.Boolean true if property was removed, otherwise false ."
  },
  "api/IronPdf.MetaData.PdfDateFormatter.html": {
    "href": "api/IronPdf.MetaData.PdfDateFormatter.html",
    "title": "Class PdfDateFormatter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDateFormatter Inheritance System.Object PdfDateFormatter Namespace : IronPdf.MetaData Assembly : IronPdf.dll Syntax public class PdfDateFormatter : Object Constructors PdfDateFormatter() Declaration public PdfDateFormatter() Methods Convert(DateTime) Convert the specified date into a PDF-compatible local date string with UTC offset information Declaration public string Convert(DateTime date) Parameters Type Name Description System.DateTime date Date to convert Returns Type Description System.String PDF-compatible local date string Convert(String) Convert the specified PDF-compatible local date string with UTC offset information into a universal DateTime object Declaration public DateTime Convert(string text) Parameters Type Name Description System.String text Text to convert Returns Type Description System.DateTime Universal DateTime object GetTimeZoneOffset() Declaration public virtual TimeSpan GetTimeZoneOffset() Returns Type Description System.TimeSpan"
  },
  "api/IronPdf.MetaData.PdfMetaData.html": {
    "href": "api/IronPdf.MetaData.PdfMetaData.html",
    "title": "Class PdfMetaData | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfMetaData A class defining PDF file meta-data. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Implemented in MetaData . Inheritance System.Object PdfMetaData Namespace : IronPdf.MetaData Assembly : IronPdf.dll Syntax public class PdfMetaData : Object Properties Author Gets or sets the Author of the document. Declaration public string Author { get; set; } Property Value Type Description System.String The author name as a string. CreationDate Gets or sets the PDF file creation DateTime. Declaration public DateTime CreationDate { get; set; } Property Value Type Description System.DateTime DateTime of PDF file creation as a Local Time. Use CreationDate.ToUniversalTime() to return a UTC DateTime Creator Gets or sets the Creator of the document. Declaration public string Creator { get; set; } Property Value Type Description System.String The creator name as a string. CustomProperties Property defining custom metadata properties of the document. Declaration public PdfCustomMetadataProperties CustomProperties { get; } Property Value Type Description PdfCustomMetadataProperties Keywords Gets or sets the Keywords of the document. This helps search indexes and operating systems correctly index the PDF. Declaration public string Keywords { get; set; } Property Value Type Description System.String The Keywords of the document as a string. It is customary to use comma separation between keywords. ModifiedDate Gets or sets the PDF file last-modified DateTime. Declaration public DateTime ModifiedDate { get; set; } Property Value Type Description System.DateTime DateTime of PDF file modification as a Local Time. Use ModifiedDate.ToUniversalTime() to return a UTC DateTime. Producer Gets or sets the Producer of the document. Declaration public string Producer { get; set; } Property Value Type Description System.String The producer name as a string. Subject Gets or sets the Subject of the document. This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software. Declaration public string Subject { get; set; } Property Value Type Description System.String The Subject of the document as a string. Title Gets or sets the Title of the document. This helps search indexes and operating systems correctly index the PDF, and may appear in PDF viewer software. Declaration public string Title { get; set; } Property Value Type Description System.String The Title of the document as a string."
  },
  "api/IronPdf.Pages.html": {
    "href": "api/IronPdf.Pages.html",
    "title": "Namespace IronPdf.Pages | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Pages Classes PdfPage A class which represents one page of a PDF Document. PdfPagesCollection Class for managing the collection of PdfPage elements."
  },
  "api/IronPdf.Pages.PdfPage.html": {
    "href": "api/IronPdf.Pages.PdfPage.html",
    "title": "Class PdfPage | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPage A class which represents one page of a PDF Document. Inheritance System.Object PdfPage Namespace : IronPdf.Pages Assembly : IronPdf.dll Syntax public class PdfPage : Object Properties Height Gets the height of the pdf page in mm. Declaration public double Height { get; } Property Value Type Description System.Double PageRotation Gets the page orientation. Declaration public PdfPageRotation PageRotation { get; } Property Value Type Description PdfPageRotation PrintHeight Gets the height of the pdf page in printer points. Declaration public double PrintHeight { get; } Property Value Type Description System.Double PrintWidth Gets the width of the pdf page in printer points. Declaration public double PrintWidth { get; } Property Value Type Description System.Double Width Gets the width of the pdf page in mm. Declaration public double Width { get; } Property Value Type Description System.Double"
  },
  "api/IronPdf.Pages.PdfPagesCollection.html": {
    "href": "api/IronPdf.Pages.PdfPagesCollection.html",
    "title": "Class PdfPagesCollection | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPagesCollection Class for managing the collection of PdfPage elements. Inheritance System.Object PdfPagesCollection Implements System.Collections.Generic.IEnumerable < PdfPage > System.Collections.IEnumerable Namespace : IronPdf.Pages Assembly : IronPdf.dll Syntax public class PdfPagesCollection : Object Properties Count Gets the number of elements contained in the collection. Declaration public int Count { get; } Property Value Type Description System.Int32 The count of pages. Item[Int32] Gets the PdfPage at the specified index. Declaration public PdfPage this[int index] { get; } Parameters Type Name Description System.Int32 index The index. Property Value Type Description PdfPage The PdfPage . Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<PdfPage> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PdfPage > An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronPdf.PdfAttachment.html": {
    "href": "api/IronPdf.PdfAttachment.html",
    "title": "Class PdfAttachment | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfAttachment Pdf document file attachment Inheritance System.Object PdfAttachment Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfAttachment : Object Properties Data Raw attachment data Declaration public byte[] Data { get; set; } Property Value Type Description System.Byte [] Index Attachment index within the pdf document Declaration public int Index { get; } Property Value Type Description System.Int32 Name Attachment name as specified within the pdf document Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/IronPdf.PdfAttachmentCollection.html": {
    "href": "api/IronPdf.PdfAttachmentCollection.html",
    "title": "Class PdfAttachmentCollection | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfAttachmentCollection Collection of attachments contained within a pdf document Inheritance System.Object PdfAttachmentCollection Implements System.Collections.Generic.IEnumerable < PdfAttachment > System.Collections.IEnumerable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfAttachmentCollection : Object Properties Item[Int32] Retrieve the attachment located at the specified index within this collection Declaration public PdfAttachment this[int index] { get; } Parameters Type Name Description System.Int32 index Index Property Value Type Description PdfAttachment Pdf attachment Methods AddAttachment(String, Byte[]) Add an attachment to the pdf document using the specified name and data Declaration public PdfAttachment AddAttachment(string name, byte[] data) Parameters Type Name Description System.String name Attachment name System.Byte [] data Attachment data Returns Type Description PdfAttachment Pdf attachment GetEnumerator() Retrieve enumerator Declaration public IEnumerator<PdfAttachment> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PdfAttachment > Enumerator RemoveAttachment(PdfAttachment) Remove the specified attachment from the pdf document Declaration public void RemoveAttachment(PdfAttachment attachment) Parameters Type Name Description PdfAttachment attachment Attachment to remove Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/IronPdf.PdfDocument.html": {
    "href": "api/IronPdf.PdfDocument.html",
    "title": "Class PdfDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocument Inheritance System.Object PdfDocument Implements System.IDisposable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class PdfDocument : Object, PdfDocumentIdProvider Constructors PdfDocument(PdfDocument) Creates a new PdfDocument which acts as a mutable reference to an existing document. All operations performed on either the source or copied document with apply to both documents Declaration public PdfDocument(PdfDocument previous) Parameters Type Name Description PdfDocument previous Source document, to be referenced PdfDocument(Byte[], String, String) Opens an existing PDF document for editing. Adding a using declaration is not required. But can be used if you want to explicitly dispose. See: https://iron.helpscoutdocs.com/article/281-ironpdf-using Declaration public PdfDocument(byte[] PdfData, string Password = \"\", string OwnerPassword = \"\") Parameters Type Name Description System.Byte [] PdfData The PDF file data as byte array. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. PdfDocument(Stream, String, String) Opens an existing PDF document for editing. Adding a using declaration is not required. But can be used if you want to explicitly dispose. See: https://iron.helpscoutdocs.com/article/281-ironpdf-using Declaration public PdfDocument(Stream PdfDataStream, string Password = \"\", string OwnerPassword = \"\") Parameters Type Name Description System.IO.Stream PdfDataStream The PDF file data as a Stream. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. PdfDocument(String, String, String) Opens an existing PDF document for editing. Adding a using declaration is not required. But can be used if you want to explicitly dispose. See: https://iron.helpscoutdocs.com/article/281-ironpdf-using Declaration public PdfDocument(string PdfFilePath, string Password = \"\", string OwnerPassword = \"\") Parameters Type Name Description System.String PdfFilePath The PDF file path. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. System.ArgumentException PdfFilePath is null, empty, or consists only of white-space characters. PdfDocument(Uri, String, String) Opens an existing PDF document from the specified Uri for editing. Adding a using declaration is not required. But can be used if you want to explicitly dispose. See: https://iron.helpscoutdocs.com/article/281-ironpdf-using Declaration public PdfDocument(Uri PdfUri, string Password = \"\", string OwnerPassword = \"\") Parameters Type Name Description System.Uri PdfUri The Uri to the PDF. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Exceptions Type Condition IronPdfProductException Exception thrown if PDF cannot be found at URI or if password is incorrect. Properties Attachments Collection of attachments contained within the pdf document Declaration public PdfAttachmentCollection Attachments { get; } Property Value Type Description PdfAttachmentCollection BinaryData Gets the binary data for the full PDF file as a byte array. Declaration public byte[] BinaryData { get; } Property Value Type Description System.Byte [] The PDF file as a byte array. Bookmarks Hierarchy of navigational bookmarks contained at the top level of the document Declaration public PdfBookMarkCollection Bookmarks { get; } Property Value Type Description PdfBookMarkCollection Form Gets an object returning any PDF editable form fields which can have their values both read and set programmatically. Declaration public PdfForm Form { get; } Property Value Type Description PdfForm The form. MetaData MetaData information settings for the PDF. Allows File meta-data to be read and set including: Authors, File Dates, Keywords, Title and Subject Declaration public PdfMetaData MetaData { get; } Property Value Type Description PdfMetaData MetaData settings for this PDF as an instance of PdfMetaData OwnerPassword Sets the owner password and enables 128-bit encryption of PDF content. An owner password is one used to enable and disable all other security settings. OwnerPassword must be set to a non empty string value for AllowUserCopyPasteContent , AllowUserAnnotations , AllowUserFormData , AllowUserPrinting and AllowUserEdits to be restricted. Declaration public string OwnerPassword { get; set; } Property Value Type Description System.String PageCount Gets the number of pages in the PDF document. Declaration public int PageCount { get; } Property Value Type Description System.Int32 The page count. Pages Gets the list of pages in the PDF document. Declaration public PdfPagesCollection Pages { get; } Property Value Type Description PdfPagesCollection Password Sets a Password used to protect and encrypt the PDF File. Setting a password will cause IronPDF to automatically protect the PDF file content using strong 128 bit encryption. Setting the password to null will remove any existing password. Declaration public string Password { get; set; } Property Value Type Description System.String SecuritySettings Advanced security settings for the PDF. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Declaration public PdfSecuritySettings SecuritySettings { get; } Property Value Type Description PdfSecuritySettings Advanced security settings for this PDF as an instance of PdfSecuritySettings Stream Gets the binary data for the full PDF file as a Stream. This Stream is System.IDisposable and should be disposed with \"using\" or \"Dispose()\" methods. Declaration public MemoryStream Stream { get; } Property Value Type Description System.IO.MemoryStream The PDF file as a new MemoryStream which is System.IDisposable and should be disposed with \"using\" or \"Dispose()\" methods. Methods AddBackgroundPdf(PdfDocument, Int32) Adds a background to each page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdf(PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdf(String, Int32) Adds a background to each page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdf(string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.String BackgroundPdfPath The background PDF's file path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPage(Int32, PdfDocument, Int32) Adds the background to one page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPage(int ToPageIndex, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the background will be applied to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPage(Int32, String, Int32) Adds the background to one page of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPage(int ToPageIndex, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the background will be applied to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(IEnumerable<Int32>, PdfDocument, Int32) Adds the background to specified pages of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(IEnumerable<int> ToPageIndexes, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(IEnumerable<Int32>, String, Int32) Adds the background to specified pages of this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(IEnumerable<int> ToPageIndexes, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the background will be applied to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(Int32, Int32, PdfDocument, Int32) Adds the background to a range of pages in this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(int StartPageIndex, int EndPageIndex, PdfDocument BackgroundPdf, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding backgrounds to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding backgrounds to. PdfDocument BackgroundPdf The Background PDF as a PdfDocument . System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddBackgroundPdfToPageRange(Int32, Int32, String, Int32) Adds the background to a range of pages in this PDF. The background is copied from a page in another PDF document. Declaration public PdfDocument AddBackgroundPdfToPageRange(int StartPageIndex, int EndPageIndex, string BackgroundPdfPath, int BackgroundPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding backgrounds to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding backgrounds to. System.String BackgroundPdfPath The background PDF path. System.Int32 BackgroundPdfPageIndex Index (zero-based page number) to copy from the BackgroundPdf. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdf(PdfDocument, Int32) Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdf(PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdf(String, Int32) Adds an overlay to each page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdf(string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.String OverlayPdfPath The background PDF's file path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPage(Int32, PdfDocument, Int32) Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPage(int ToPageIndex, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the foreground will be applied to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPage(Int32, String, Int32) Adds an overlay to one page of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPage(int ToPageIndex, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 ToPageIndex Index (zero-based page number) of the page of this PDF to which the foreground will be applied to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(IEnumerable<Int32>, PdfDocument, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(IEnumerable<int> ToPageIndexes, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(IEnumerable<Int32>, String, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(IEnumerable<int> ToPageIndexes, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > ToPageIndexes A list of Indexes (zero-based page numbers) of pages in this PDF to which the overlay will be applied to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(Int32, Int32, PdfDocument, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(int StartPageIndex, int EndPageIndex, PdfDocument OverlayPdf, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding overlays to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding overlays to. PdfDocument OverlayPdf The overlay PDF as a PdfDocument . System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddForegroundOverlayPdfToPageRange(Int32, Int32, String, Int32) Adds an overlay to a range or pages of this PDF. The foreground overlay is copied from a page in another PDF document. Declaration public PdfDocument AddForegroundOverlayPdfToPageRange(int StartPageIndex, int EndPageIndex, string OverlayPdfPath, int OverlayPdfPageIndex = 0) Parameters Type Name Description System.Int32 StartPageIndex First index (zero-based page number) to start adding overlays to . System.Int32 EndPageIndex Last index (zero-based page number) to end adding overlays to. System.String OverlayPdfPath The overlay PDF path. System.Int32 OverlayPdfPageIndex Index (zero-based page number) to copy from the Overlay PDF. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlFooters(HtmlHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Stamps HTML page footers on top of an existing Pdf. Declaration public PdfDocument AddHtmlFooters(HtmlHeaderFooter Footer, double MarginLeft, double MarginRight, double MarginBottom, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description HtmlHeaderFooter Footer A new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout. System.Double MarginLeft The left margin of the footer on the page in mm. System.Double MarginRight The right margin of the footer on the page in mm. System.Double MarginBottom The bottom margin of the footer on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlFooters(HtmlHeaderFooter, Int32, IEnumerable<Int32>) Stamps HTML page footers on top of an existing Pdf. Positioning can be adjusted using the AddHtmlFooters(HtmlHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) overload of this method. Declaration public PdfDocument AddHtmlFooters(HtmlHeaderFooter Footer, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description HtmlHeaderFooter Footer A new instance of IronPdf.HtmlHeaderFooter that defines the footer content and layout. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlHeaders(HtmlHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Stamps HTML page headers on top of an existing Pdf. Declaration public PdfDocument AddHtmlHeaders(HtmlHeaderFooter Header, double MarginLeft, double MarginRight, double MarginTop, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description HtmlHeaderFooter Header A new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout. System.Double MarginLeft The left margin of the header on the page in mm. System.Double MarginRight The right margin of the header on the page in mm. System.Double MarginTop The top margin of the header on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlHeaders(HtmlHeaderFooter, Int32, IEnumerable<Int32>) Stamps HTML page headers on top of an existing PDF. Positioning can be adjusted using the AddHtmlHeaders(HtmlHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) to specify header margins Declaration public PdfDocument AddHtmlHeaders(HtmlHeaderFooter Header, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description HtmlHeaderFooter Header A new instance of IronPdf.HtmlHeaderFooter that defines the header content and layout. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddHtmlHeadersAndFooters(ChromePdfRenderOptions, IEnumerable<Int32>) Stamps HTML headers and footers on top of an existing PDF using the specified render options and optional list of page indices. Declaration public PdfDocument AddHtmlHeadersAndFooters(ChromePdfRenderOptions Options, IEnumerable<int> PageIndexes = null) Parameters Type Name Description ChromePdfRenderOptions Options Render options for the HTML headers and footers System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Optional list of page indices to apply headers and footers to. Defaults to all pages Returns Type Description PdfDocument Pdf document AddTextAnnotation(TextAnnotation, Int32, Int32, Int32, Int32, Int32) Adds an annotation to a page of this PdfDocument Declaration public void AddTextAnnotation(TextAnnotation TextAnnotation, int PageIndex, int X, int Y, int Width = 30, int Height = 30) Parameters Type Name Description TextAnnotation TextAnnotation The annotation as a IronPdf.PdfDocument.TextAnnotation object. System.Int32 PageIndex Index of the page to add the annotation. The first page has a PageIndex of 0 System.Int32 X The horizontal X position of the annotation on your page in pixels System.Int32 Y The vertical Y position of the annotation on your page in pixels. Measured from bottom upwards. System.Int32 Width The width of your annotation's icon and interactive area in pixels System.Int32 Height The height of your annotation's icon and interactive area in pixels AddTextAnnotation(String, String, String, Int32, Int32, Int32, Int32, Int32, TextAnnotation.AnnotationIcon, Boolean, Boolean, Boolean, String, Double) Adds an annotation to a page of this PdfDocument Declaration public void AddTextAnnotation(string Title, string Subject, string Contents, int PageIndex, int X, int Y, int Width = 30, int Height = 30, TextAnnotation.AnnotationIcon Icon, bool Open = true, bool ReadOnly = true, bool Printable = false, string RgbColor = \"#FFFF33\", double Opacity = 1) Parameters Type Name Description System.String Title The title of the annotation System.String Subject The subject or 'subheading' of the annotation System.String Contents The text content of the annotation System.Int32 PageIndex Index of the page to add the annotation. The first page has a PageIndex of 0 System.Int32 X The horizontal X position of the annotation on your page in pixels System.Int32 Y The vertical Y position of the annotation on your page in pixels. Measured from bottom upwards. System.Int32 Width The width of your annotation's icon and interactive area in pixels System.Int32 Height The height of your annotation's icon and interactive area in pixels TextAnnotation.AnnotationIcon Icon The icon used to display the interactive annotation within the PDF System.Boolean Open Sets the annotation to be opened and readable by default, without user interaction System.Boolean ReadOnly Makes the annotation non user editable System.Boolean Printable Makes the annotation render during user PDF printing operations System.String RgbColor Color of the annotation's background 'sticky note' using Html color notation. E.g. '#FFFF33'. System.Double Opacity The opacity of the annotation (valid values are from 0.0 to 1.0) AddTextFooters(TextHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Stamps page footers on top of an existing Pdf. Declaration public PdfDocument AddTextFooters(TextHeaderFooter Footer, double MarginLeft, double MarginRight, double MarginBottom, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description TextHeaderFooter Footer A new instance of IronPdf.SimpleHeaderFooter that defines the footer content and layout. System.Double MarginLeft The left margin of the footer on the page in mm. System.Double MarginRight The right margin of the footer on the page in mm. System.Double MarginBottom The bottom margin of the footer on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextFooters(TextHeaderFooter, Int32, IEnumerable<Int32>) Stamps page footers on top of an existing Pdf. Positioning can be adjusted using the AddTextFooters(TextHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) overload of this method. Declaration public PdfDocument AddTextFooters(TextHeaderFooter Footer, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddFootersTo = null) Parameters Type Name Description TextHeaderFooter Footer A new instance of IronPdf.TextHeaderFooter that defines the footer content. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddFootersTo Optional. The PageIndexes (zero-based page numbers) to which the footer will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextHeaders(TextHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) Stamps page headers on top of an existing Pdf. Declaration public PdfDocument AddTextHeaders(TextHeaderFooter Header, double MarginLeft, double MarginRight, double MarginTop, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description TextHeaderFooter Header A new instance of IronPdf.SimpleHeaderFooter that defines the header content and layout. System.Double MarginLeft The left margin of the header on the page in mm. System.Double MarginRight The right margin of the header on the page in mm. System.Double MarginTop The top margin of the header on the page in mm. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextHeaders(TextHeaderFooter, Int32, IEnumerable<Int32>) Stamps page headers on top of an existing Pdf. Positioning can be adjusted using the AddTextHeaders(TextHeaderFooter, Double, Double, Double, Int32, IEnumerable<Int32>) overload of this method. Declaration public PdfDocument AddTextHeaders(TextHeaderFooter Header, int FirstPageNumber = 1, IEnumerable<int> PageIndexesToAddHeadersTo = null) Parameters Type Name Description TextHeaderFooter Header A new instance of IronPdf.TextHeaderFooter that defines the header content and layout. System.Int32 FirstPageNumber Optional. The number of first page for {page} mail-merge. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToAddHeadersTo Optional. The PageIndexes (zero-based page numbers) to which the header will be added. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style AddTextHeadersAndFooters(ChromePdfRenderOptions, IEnumerable<Int32>) Stamps text headers and footers on top of an existing PDF using the specified render options and optional list of page indices. Declaration public PdfDocument AddTextHeadersAndFooters(ChromePdfRenderOptions Options, IEnumerable<int> PageIndexes = null) Parameters Type Name Description ChromePdfRenderOptions Options Render options for the text headers and footers System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Optional list of page indices to apply headers and footers to. Defaults to all pages Returns Type Description PdfDocument Pdf document AppendPdf(PdfDocument) Appends another PDF to the end of the current PdfDocument If AnotherPdfFile contains form fields, those fields will be appended with ' ' in the resulting PDF. e.g. 'Name' will be 'Name ' Declaration public PdfDocument AppendPdf(PdfDocument AnotherPdfFile) Parameters Type Name Description PdfDocument AnotherPdfFile PdfDocument to append. Returns Type Description PdfDocument A new PdfDocument ApplyMultipleStamps(IEnumerable<Stamper>) Edits the PDF by applying multiple Stamper 's rendered Html to every page. Declaration public PdfDocument ApplyMultipleStamps(IEnumerable<Stamper> Stampers) Parameters Type Name Description System.Collections.Generic.IEnumerable < Stamper > Stampers A list of Stamper objects, each with their own HTML stamp, to all be stamped onto the PDF. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyMultipleStamps(IEnumerable<Stamper>, IEnumerable<Int32>) Edits the PDF by applying multiple Stamper 's rendered Html to only selected page(s). Declaration public PdfDocument ApplyMultipleStamps(IEnumerable<Stamper> Stampers, IEnumerable<int> PageIndexesToStamp) Parameters Type Name Description System.Collections.Generic.IEnumerable < Stamper > Stampers A list of Stamper objects, each with their own HTML stamp, to all be stamped onto the PDF. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The page indexes (zero-based page number) to apply the stamps to. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyMultipleStamps(IEnumerable<Stamper>, Int32) Edits the PDF by applying multiple Stamper 's rendered Html to a single page. Declaration public PdfDocument ApplyMultipleStamps(IEnumerable<Stamper> Stampers, int PageIndexToStamp) Parameters Type Name Description System.Collections.Generic.IEnumerable < Stamper > Stampers A list of Stamper objects, each with their own HTML stamp, to all be stamped onto the PDF. System.Int32 PageIndexToStamp The page index (zero-based page number) to apply the stamps to. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyMultipleStampsAsync(IEnumerable<Stamper>) Asynchronously edits the PDF by applying multiple Stamper 's rendered Html to every page. Declaration public Task<PdfDocument> ApplyMultipleStampsAsync(IEnumerable<Stamper> Stampers) Parameters Type Name Description System.Collections.Generic.IEnumerable < Stamper > Stampers A list of Stamper objects, each with their own HTML stamp, to all be stamped onto the PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyMultipleStampsAsync(IEnumerable<Stamper>, IEnumerable<Int32>) Asynchronously edits the PDF by applying multiple Stamper 's rendered Html to only selected page(s). Declaration public Task<PdfDocument> ApplyMultipleStampsAsync(IEnumerable<Stamper> Stampers, IEnumerable<int> PageIndexesToStamp) Parameters Type Name Description System.Collections.Generic.IEnumerable < Stamper > Stampers A list of Stamper objects, each with their own HTML stamp, to all be stamped onto the PDF. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The page indexes (zero-based page number) to apply the stamps to. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyMultipleStampsAsync(IEnumerable<Stamper>, Int32) Asynchronously edits the PDF by applying multiple Stamper 's rendered Html to a single page. Declaration public Task<PdfDocument> ApplyMultipleStampsAsync(IEnumerable<Stamper> Stampers, int PageIndexToStamp) Parameters Type Name Description System.Collections.Generic.IEnumerable < Stamper > Stampers A list of Stamper objects, each with their own HTML stamp, to all be stamped onto the PDF. System.Int32 PageIndexToStamp The page index (zero-based page number) to apply the stamps to. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyStamp(Stamper) Edits the PDF by applying the Stamper 's rendered Html to every page. Declaration public PdfDocument ApplyStamp(Stamper Stamper) Parameters Type Name Description Stamper Stamper The Stamper object that has the HTML to be stamped onto the PDF. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyStamp(Stamper, IEnumerable<Int32>) Edits the PDF by applying the Stamper 's rendered Html to only selected page(s). Declaration public PdfDocument ApplyStamp(Stamper Stamper, IEnumerable<int> PageIndexesToStamp) Parameters Type Name Description Stamper Stamper The Stamper object that has the HTML to be stamped onto the PDF. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The list of page indexes (zero-based page number) to apply the stamp to. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyStamp(Stamper, Int32) Edits the PDF by applying the Stamper 's rendered Html to a single page. Declaration public PdfDocument ApplyStamp(Stamper Stamper, int PageIndexToStamp) Parameters Type Name Description Stamper Stamper The Stamper object that has the HTML to be stamped onto the PDF. System.Int32 PageIndexToStamp The page index (zero-based page number) to apply the stamp to. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyStampAsync(Stamper) Asynchronously edits the PDF by applying the Stamper 's rendered Html to every page. Declaration public Task<PdfDocument> ApplyStampAsync(Stamper Stamper) Parameters Type Name Description Stamper Stamper The Stamper object that has the HTML to be stamped onto the PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style Remarks Please wait for the task to be completed before saving to file! ApplyStampAsync(Stamper, IEnumerable<Int32>) Asynchronously edits the PDF by applying the Stamper 's rendered Html to only selected page(s). Declaration public Task<PdfDocument> ApplyStampAsync(Stamper Stamper, IEnumerable<int> PageIndexesToStamp) Parameters Type Name Description Stamper Stamper The Stamper object that has the HTML to be stamped onto the PDF. System.Collections.Generic.IEnumerable < System.Int32 > PageIndexesToStamp The page indexes (zero-based page number) to apply the stamps to. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style Remarks Please wait for the task to be completed before saving to file! ApplyStampAsync(Stamper, Int32) Asynchronously edits the PDF by applying the Stamper 's rendered Html to a single page. Declaration public Task<PdfDocument> ApplyStampAsync(Stamper Stamper, int PageIndexToStamp) Parameters Type Name Description Stamper Stamper The Stamper object that has the HTML to be stamped onto the PDF. System.Int32 PageIndexToStamp The page index (zero-based page number) to apply the stamp to. Returns Type Description System.Threading.Tasks.Task < PdfDocument > Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style Remarks Please wait for the task to be completed before saving to file! ApplyWatermark(String, Int32, VerticalAlignment, HorizontalAlignment) Adds Watermark to PDF, Please use ApplyStamp(Stamper) for more control. For more information and a code example please visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#add-a-watermark-to-a-pdf Declaration public PdfDocument ApplyWatermark(string html, int opacity = 50, VerticalAlignment verticalAlignment, HorizontalAlignment horizontalAlignment) Parameters Type Name Description System.String html The HTML fragment which will be stamped onto your PDF. System.Int32 opacity Watermark transparent value. 0 is invisible, 100 if fully opaque. VerticalAlignment verticalAlignment The vertical alignment of the watermark relative to the page. HorizontalAlignment horizontalAlignment The horizontal alignment of the watermark relative to the page. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style ApplyWatermark(String, Int32, Int32, VerticalAlignment, HorizontalAlignment) Adds Watermark to PDF, Please use ApplyStamp(Stamper) for more control. For more information and a code example please visit: https://ironpdf.com/tutorials/csharp-edit-pdf-complete-tutorial/#add-a-watermark-to-a-pdf Declaration public PdfDocument ApplyWatermark(string html, int rotation, int opacity = 50, VerticalAlignment verticalAlignment, HorizontalAlignment horizontalAlignment) Parameters Type Name Description System.String html The HTML fragment which will be stamped onto your PDF. System.Int32 rotation Rotates the watermark clockwise from 0 to 360 degrees as specified. System.Int32 opacity Watermark transparent value. 0 is invisible, 100 if fully opaque. VerticalAlignment verticalAlignment The vertical alignment of the watermark relative to the page. HorizontalAlignment horizontalAlignment The horizontal alignment of the watermark relative to the page. Returns Type Description PdfDocument Returns this PdfDocument , allowing for a 'fluent' (LINQ like) chained in-line code style CompressImages(Int32, Boolean) Compress existing images using JPG encoding and the specified settings Declaration public void CompressImages(int Quality, bool ScaleToVisibleSize = false) Parameters Type Name Description System.Int32 Quality Quality (1 - 100) to use during compression System.Boolean ScaleToVisibleSize Scale down the image resolution according to its visible size in the PDF document; may cause distortion with some image configurations Exceptions Type Condition System.ArgumentOutOfRangeException Argument out of range CopyPage(Int32) Creates a new PDF by copying a page from this PdfDocument. Declaration public PdfDocument CopyPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description PdfDocument A new PdfDocument CopyPages(IEnumerable<Int32>) Creates a new PDF by copying a range of pages from this PdfDocument. Declaration public PdfDocument CopyPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable of page indexes to copy into the new PDF. Returns Type Description PdfDocument A new PdfDocument CopyPages(Int32, Int32) Creates a new PDF by copying a range of pages from this PdfDocument . Declaration public PdfDocument CopyPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to copy.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to copy.> Returns Type Description PdfDocument A new PdfDocument Dispose() Releases used resources. Declaration public void Dispose() DrawBitmap(AnyBitmap, IEnumerable<Int32>, IEnumerable<Double>, IEnumerable<Double>, IEnumerable<Double>, IEnumerable<Double>, PixelFormat) Draw a bitmap multiple times according to the specified parameters; all occurrences of the bitmap will share a single data stream Declaration public void DrawBitmap(AnyBitmap bitmap, IEnumerable<int> page_indices, IEnumerable<double> xs, IEnumerable<double> ys, IEnumerable<double> desired_widths, IEnumerable<double> desired_heights, PixelFormat format) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap bitmap AnyBitmap to draw System.Collections.Generic.IEnumerable < System.Int32 > page_indices Target page indices System.Collections.Generic.IEnumerable < System.Double > xs X coordinates System.Collections.Generic.IEnumerable < System.Double > ys Y coordinates System.Collections.Generic.IEnumerable < System.Double > desired_widths Desired widths System.Collections.Generic.IEnumerable < System.Double > desired_heights Desired heights PixelFormat format Pixel format DrawBitmap(AnyBitmap, Int32, Double, Double, Double, Double, PixelFormat) Draw a bitmap a single time according to the specified parameters Declaration public void DrawBitmap(AnyBitmap bitmap, int page_index, double x, double y, double desired_width, double desired_height, PixelFormat format) Parameters Type Name Description IronSoftware.Drawing.AnyBitmap bitmap Bitmap to draw System.Int32 page_index Page index System.Double x X coordinate System.Double y Y coordinate System.Double desired_width Desired width System.Double desired_height Desired Height PixelFormat format Pixel format ExtractAllBitmaps() Finds all embedded Images from within the PDF and returns then as IronSoftware.Drawing.AnyBitmap objects Declaration public List<AnyBitmap> ExtractAllBitmaps() Returns Type Description System.Collections.Generic.List < IronSoftware.Drawing.AnyBitmap > The extracted images as IronSoftware.Drawing.AnyBitmap ExtractAllImages() Finds all embedded Images from within the PDF and returns then as SixLabors.ImageSharp.Image objects Declaration public List<Image> ExtractAllImages() Returns Type Description System.Collections.Generic.List < SixLabors.ImageSharp.Image > The extracted images as SixLabors.ImageSharp.Image ExtractAllRawImages() Extracts all images from a PDf document. Images are returned as their raw data in as Byte Arrays (byte[]) Declaration public List<byte[]> ExtractAllRawImages() Returns Type Description System.Collections.Generic.List < System.Byte []> An Enumerable of Byte Arrays. Each Byte Array represents one image. ExtractAllText() Extracts the written text content from the PDF and returns it as a string. Pages are be separated by 4 consecutive Environment.NewLines Declaration public string ExtractAllText() Returns Type Description System.String All text in the PDF as a string. ExtractBitmapsFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as IronSoftware.Drawing.AnyBitmap objects Declaration public List<AnyBitmap> ExtractBitmapsFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.List < IronSoftware.Drawing.AnyBitmap > The extracted images as IronSoftware.Drawing.AnyBitmap Objects ExtractBitmapsFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as IronSoftware.Drawing.AnyBitmap objects Declaration public List<AnyBitmap> ExtractBitmapsFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.List < IronSoftware.Drawing.AnyBitmap > The extracted images as IronSoftware.Drawing.AnyBitmap Objects ExtractBitmapsFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as IronSoftware.Drawing.AnyBitmap objects Declaration public List<AnyBitmap> ExtractBitmapsFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.List < IronSoftware.Drawing.AnyBitmap > The extracted images as IronSoftware.Drawing.AnyBitmap Objects ExtractImagesFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as SixLabors.ImageSharp.Image objects Declaration public List<Image> ExtractImagesFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.List < SixLabors.ImageSharp.Image > The extracted images as SixLabors.ImageSharp.Image Objects ExtractImagesFromPages(IEnumerable<Int32>) Finds all embedded Images from within a specified pages in the PDF and returns them as SixLabors.ImageSharp.Image objects Declaration public List<Image> ExtractImagesFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.List < SixLabors.ImageSharp.Image > The extracted images as SixLabors.ImageSharp.Image Objects ExtractImagesFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as SixLabors.ImageSharp.Image objects Declaration public List<Image> ExtractImagesFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.List < SixLabors.ImageSharp.Image > The extracted images as SixLabors.ImageSharp.Image Objects ExtractRawImagesFromPage(Int32) Finds all embedded Images from within one page of the PDF and returns them as raw image byte array objects Declaration public List<byte[]> ExtractRawImagesFromPage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.Collections.Generic.List < System.Byte []> List of raw image byte array. ExtractRawImagesFromPages(IEnumerable<Int32>) Finds all embedded Images from specified pages in the PDF and returns them as raw image byte array objects objects Declaration public List<byte[]> ExtractRawImagesFromPages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes An IEnumerable list of page indexes. Returns Type Description System.Collections.Generic.List < System.Byte []> List of raw image byte array. ExtractRawImagesFromPages(Int32, Int32) Finds all embedded Images from within a range of pages in the PDF and returns them as raw image byte array objects Declaration public List<byte[]> ExtractRawImagesFromPages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The index of the first PDF page to extract images from.. Note: Page 1 has index 0 System.Int32 EndIndex The index of the last PDF page to extract images from. Returns Type Description System.Collections.Generic.List < System.Byte []> List of raw image byte array. ExtractTextFromPage(Int32) Extracts the text content from one page of the PDF and returns it as a string. Declaration public string ExtractTextFromPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description System.String The text extracted from the PDF page as a string. ExtractTextFromPages(IEnumerable<Int32>) Extracts the written text content from specified pages in the PDF PDF and returns it as a string. Pages will be separated by 4 consecutive Environment.NewLines Declaration public string ExtractTextFromPages(IEnumerable<int> pageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageIndexes An IEnumerable list of page indexes. Returns Type Description System.String The text extracted from the PDF pages as a string. ExtractTextFromPages(Int32, Int32) Extracts the written text content from a range of pages within the PDF and returns it as a string. Pages will be separated by 4 consecutive Environment.NewLines Declaration public string ExtractTextFromPages(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex The start page index. Note: Page 1 has index 0 System.Int32 endIndex The end page index. Note: The last page has index PageCount -1 Returns Type Description System.String The text extracted from the PDF pages as a string. Finalize() Finalizer Declaration protected override void Finalize() Flatten(IEnumerable<Int32>) Flattens a document (make the fields non-editable). Declaration public void Flatten(IEnumerable<int> Pages = null) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > Pages Optional page indices to flatten (defaults to all pages) FromFile(String, String, String) Opens an existing PDF document for editing. Adding a using declaration is not required. But can be used if you want to explicitly dispose. See: https://iron.helpscoutdocs.com/article/281-ironpdf-using Declaration public static PdfDocument FromFile(string PdfFilePath, string password = \"\", string ownerPassword = \"\") Parameters Type Name Description System.String PdfFilePath The PDF file path. System.String password Optional user password if the PDF document is encrypted. System.String ownerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Returns Type Description PdfDocument An IronPdf.PdfDocument object as loaded from the file path. Exceptions Type Condition System.IO.IOException Exception thrown if can not be opened. System.ArgumentException PdfFilePath is null, empty, or consists only of white-space characters. FromUrl(Uri, String, String) Opens a PDF stored on a URL for editing. Adding a using declaration is not required. But can be used if you want to explicitly dispose. See: https://iron.helpscoutdocs.com/article/281-ironpdf-using Declaration public static PdfDocument FromUrl(Uri Uri, string Password = \"\", string OwnerPassword = \"\") Parameters Type Name Description System.Uri Uri The URI to the PDF. System.String Password Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional password if the PDF document is protected by owner (printing, modifying restrictions etc..). Returns Type Description PdfDocument An IronPdf.PdfDocument object as loaded from the file path. Exceptions Type Condition IronPdfProductException Exception thrown if cannot read the PDF due to incorrect uri or password. GetAnnotationCount(Int32) Retrieve the number of annotations contained on the specified page Declaration public int GetAnnotationCount(int index) Parameters Type Name Description System.Int32 index Page index Returns Type Description System.Int32 Number of annotations contained on the page GetPageRotation(Int32) Gets the rotation of a PDF page in degrees. Declaration public PdfPageRotation GetPageRotation(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page to inspect. PageIndex is a 'Zero based' page number, the first page being 0. Returns Type Description PdfPageRotation Degrees of rotation GetPrintDocument(PrinterSettings, PrintController) Returns a System.Drawing.Printing.PrintDocument for the PDF allowing developers granular control over sending the PDF to a Printer. An assembly reference to System.Drawing is required in your project. Note: ' GetPrintDocument(PrinterSettings, PrintController) ' is only supported on: 'Windows'. Printer settings. Note: If you create a new PrinterSettings() we recommend setting printerSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0); custom printController such as PreviewPrintController for a GUI print preview Declaration public PrintDocument GetPrintDocument(PrinterSettings printerSettings = null, PrintController printController = null) Parameters Type Name Description System.Drawing.Printing.PrinterSettings printerSettings System.Drawing.Printing.PrintController printController Returns Type Description System.Drawing.Printing.PrintDocument A System.Drawing.Printing.PrintDocument . Exceptions Type Condition System.Exception IronPdf must be licensed to use this feature. GetVerifiedSignatures() Returns a list of IronPdf.VerifiedSignature . Declaration public ICollection<VerifiedSignature> GetVerifiedSignatures() Returns Type Description System.Collections.Generic.ICollection < VerifiedSignature > list of IronPdf.VerifiedSignature GetVerifiedSignatures(Byte[]) Returns a list of IronPdf.VerifiedSignature from the specified PDF document by the parameter data . Declaration public static ICollection<VerifiedSignature> GetVerifiedSignatures(byte[] data) Parameters Type Name Description System.Byte [] data the bytes of a pdf document Returns Type Description System.Collections.Generic.ICollection < VerifiedSignature > list of IronPdf.VerifiedSignature InsertPdf(PdfDocument, Int32) Inserts another PDF into the current PdfDocument, starting at a given Page Index. If AnotherPdfFile contains form fields, those fields will be appended with ' ' in the resulting PDF. e.g. 'Name' will be 'Name ' Declaration public PdfDocument InsertPdf(PdfDocument AnotherPdfFile, int AtIndex = 0) Parameters Type Name Description PdfDocument AnotherPdfFile Another PdfDocument. System.Int32 AtIndex Index at which to insert the new content. Note: Page 1 has index 0... Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Merge(PdfDocument, PdfDocument) Static method that joins (concatenates) 2 PDF documents together into one PDF document. If the PDF contains form fields the form field in the resulting PDF's name will be appended with '_{index}' e.g. 'Name' will be 'Name_0' Declaration public static PdfDocument Merge(PdfDocument A, PdfDocument B) Parameters Type Name Description PdfDocument A A PDF PdfDocument B A Seconds PDF Returns Type Description PdfDocument A new, merged PdfDocument Merge(IEnumerable<PdfDocument>) Static method that joins (concatenates) multiple PDF documents together into one compiled PDF document. If the PDF contains form fields the form field in the resulting PDF's name will be appended with '_{index}' e.g. 'Name' will be 'Name_0' Declaration public static PdfDocument Merge(IEnumerable<PdfDocument> Documents) Parameters Type Name Description System.Collections.Generic.IEnumerable < PdfDocument > Documents A IEnumerable of PdfDocument. To merge existing PDF files you may use the PdfDocument.FromFile static method in conjunction with Merge. Returns Type Description PdfDocument A new, merged PdfDocument PageToBitmap(Int32, Int32) Renders a single page of the PDF to a IronSoftware.Drawing.AnyBitmap object. Please add an assembly reference to IronSoftware.Drawing.AnyBitmap to use this \"PDF To Image\" method Declaration public AnyBitmap PageToBitmap(int pageIndex, int DPI = 96) Parameters Type Name Description System.Int32 pageIndex The zero based page number to be converted to an image. E.g. Page 1 has a pageIndex of 0 System.Int32 DPI The desired resolution of the output Images. Returns Type Description IronSoftware.Drawing.AnyBitmap A IronSoftware.Drawing.AnyBitmap of the rendered PDF page. Remarks The DPI will be ignored under Linux and macOS. PageToBitmap(Int32, Nullable<Int32>, Nullable<Int32>, Int32) Renders a single page of the PDF to a IronSoftware.Drawing.AnyBitmap object. Please add an assembly reference to IronSoftware.Drawing.AnyBitmap to use this \"PDF To Image\" method Declaration public AnyBitmap PageToBitmap(int pageIndex, Nullable<int> imageMaxWidth, Nullable<int> imageMaxHeight, int DPI = 96) Parameters Type Name Description System.Int32 pageIndex The zero based page number to be converted to an image. E.g. Page 1 has a pageIndex of 0 System.Nullable < System.Int32 > imageMaxWidth The target maximum width of the output images. System.Nullable < System.Int32 > imageMaxHeight The target maximum height of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description IronSoftware.Drawing.AnyBitmap A IronSoftware.Drawing.AnyBitmap of the rendered PDF page. Remarks The DPI will be ignored under Linux and macOS. PrependPdf(PdfDocument) Adds another PDF to the beginning of the current PdfDocument If AnotherPdfFile contains form fields, those fields will be appended with ' ' in the resulting PDF. e.g. 'Name' will be 'Name ' Declaration public PdfDocument PrependPdf(PdfDocument AnotherPdfFile) Parameters Type Name Description PdfDocument AnotherPdfFile PdfDocument to prepend. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style Print() Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument(PrinterSettings, PrintController) . if true print preview dialogs will be displayed to the user. Default value is false . Note: ' Print() ' is only supported on: 'Windows'. Declaration public int Print() Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) Print(Boolean) Declaration public int Print(bool showPreview) Parameters Type Name Description System.Boolean showPreview Returns Type Description System.Int32 Print(Int32) Prints this PDF by sending it to the computer's printer. For even more advanced real-world printing options please see overloads of this method and also GetPrintDocument(PrinterSettings, PrintController) . Note: ' Print(Int32) ' is only supported on: 'Windows'. the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . Declaration public int Print(int dpi) Parameters Type Name Description System.Int32 dpi Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) Print(Int32, Boolean) Declaration public int Print(int dpi, bool showPreview) Parameters Type Name Description System.Int32 dpi System.Boolean showPreview Returns Type Description System.Int32 Print(Int32, Int32, String, String, PrintController) Prints this PDF by sending it to the computer's printer. For even more advanced real-world printing options please see overloads of this method and also GetPrintDocument(PrinterSettings, PrintController) . Note: ' Print(Int32, Int32, String, String, PrintController) ' is only supported on: 'Windows'. the horizontal PDF resolution, in dots per inch. the vertical PDF resolution, in dots per inch. the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . the file path, when printing to a file, set or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . custom printController such as PreviewPrintController for a GUI print preview Declaration public int Print(int dpiX, int dpiY, string printerName = null, string filePath = null, PrintController customPrintController = null) Parameters Type Name Description System.Int32 dpiX System.Int32 dpiY System.String printerName System.String filePath System.Drawing.Printing.PrintController customPrintController Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) Print(Int32, String, String) Prints this PDF by sending it to the computer's printer. For even more advanced real-world printing options please see overloads of this method and also GetPrintDocument(PrinterSettings, PrintController) . Note: ' Print(Int32, String, String) ' is only supported on: 'Windows'. the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . the file path, when printing to a file, set or an empty string (\"\") for printing output is sent to a port instead of the filePath . The default value is null . Declaration public int Print(int dpi, string printerName = null, string filePath = null) Parameters Type Name Description System.Int32 dpi System.String printerName System.String filePath Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) Print(Int32, String, String, Boolean) Declaration public int Print(int dpi, string printerName = null, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.String printerName System.String filePath System.Boolean showPreview Returns Type Description System.Int32 Print(String) Prints this PDF by sending it to the computer's printer. For even more advanced real-world printing options please see overloads of this method and also GetPrintDocument(PrinterSettings, PrintController) . Note: ' Print(String) ' is only supported on: 'Windows'. the name of a printer, set null or an empty string (\"\") to use default print. Default value is null . Declaration public int Print(string printerName) Parameters Type Name Description System.String printerName Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) Print(String, Boolean) Declaration public int Print(string printerName, bool showPreview) Parameters Type Name Description System.String printerName System.Boolean showPreview Returns Type Description System.Int32 PrintToFile(Int32, String) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads of this method and also GetPrintDocument(PrinterSettings, PrintController) . Note: ' PrintToFile(Int32, String) ' is only supported on: 'Windows'. the horizontal and vertical PDF resolutions, in dots per inch. if -1 print with default printer resolution. Default value is -1 . output file path, if set to null or an empty string (\"\") default filePath will be random GUID. Declaration public int PrintToFile(int dpi, string filePath = null) Parameters Type Name Description System.Int32 dpi System.String filePath Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) PrintToFile(Int32, String, Boolean) Declaration public int PrintToFile(int dpi, string filePath = null, bool showPreview = false) Parameters Type Name Description System.Int32 dpi System.String filePath System.Boolean showPreview Returns Type Description System.Int32 PrintToFile(String) Prints this PDF by sending it to the computer's printer. For advanced real-world printing options please see overloads GetPrintDocument(PrinterSettings, PrintController) . Note: ' PrintToFile(String) ' is only supported on: 'Windows'. output file path, if set to null or an empty string (\"\") default filePath will be random GUID. Declaration public int PrintToFile(string filePath) Parameters Type Name Description System.String filePath Returns Type Description System.Int32 The number of printed pages. See Also GetPrintDocument(PrinterSettings, PrintController) PrintToFile(String, Boolean) Declaration public int PrintToFile(string filePath, bool showPreview = false) Parameters Type Name Description System.String filePath System.Boolean showPreview Returns Type Description System.Int32 QuickSignPdfWithDigitalSignatureFile(String, String) Sign PDF with digital signature certificate. For more advanced options please see SignPdfWithDigitalSignature(PdfSignature) Note that the PDF will not be fully signed until Saved using SaveAs(String) , TrySaveAs(String) , Stream or BinaryData . Multiple certificates may be used. Declaration public PdfDocument QuickSignPdfWithDigitalSignatureFile(string CertificateFilePath, string Password) Parameters Type Name Description System.String CertificateFilePath The file path to a .pfx or .p12 digital signing certificate which may be generated using Adobe Acrobat Viewer. System.String Password The certificate password as a String. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style See Also IronPdf.PdfSignature RasterizeToImageFiles(String, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, IEnumerable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Page Numbers may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, IEnumerable<int> PageIndexes, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to render as images. ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Page Numbers may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, IEnumerable<int> PageIndexes, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RasterizeToImageFiles(String, Nullable<Int32>, Nullable<Int32>, ImageType, Int32) Renders the PDF and exports image Files in convenient formats. Image dimensions may be specified. 1 image file is created for each page. FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] RasterizeToImageFiles(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, ImageType ImageFileType, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.png System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. ImageType ImageFileType Type of the image file. If not specified, a best guess will be taken from the FileNamePattern file extension System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. RemovePage(Int32) Removes a page from the PDF at the given index. Declaration public PdfDocument RemovePage(int PageIndex) Parameters Type Name Description System.Int32 PageIndex Index of the page. Note: Page 1 has index 0... Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RemovePages(IEnumerable<Int32>) Removes a range of pages from the PDF Declaration public PdfDocument RemovePages(IEnumerable<int> PageIndexes) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of pages indexes to remove. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style RemovePages(Int32, Int32) Removes a range of pages from the PDF Declaration public PdfDocument RemovePages(int StartIndex, int EndIndex) Parameters Type Name Description System.Int32 StartIndex The start index. Note: Page 1 has index 0 System.Int32 EndIndex The end index. Note: The last page has index PageCount -1 Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style ReplaceTextOnAllPages(String, String) Replace the specified old text with new text on all pages Declaration public void ReplaceTextOnAllPages(string oldText, string newText) Parameters Type Name Description System.String oldText Old text to remove System.String newText New text to add ReplaceTextOnPage(Int32, String, String) Replace the specified old text with new text on a given page Declaration public void ReplaceTextOnPage(int pageIndex, string oldText, string newText) Parameters Type Name Description System.Int32 pageIndex Page index to search for old text to replace System.String oldText Old text to remove System.String newText New text to add ReplaceTextOnPages(Int32[], String, String) Replace the specified old text with new text on specified pages Declaration public void ReplaceTextOnPages(int[] pageIndexes, string oldText, string newText) Parameters Type Name Description System.Int32 [] pageIndexes Indexes if pages to search for old text to replace System.String oldText Old text to remove System.String newText New text to add ResizePage(Int32, Double, Double) Resize a page to the specified dimensions (in millimeters) Declaration public void ResizePage(int PageIndex, double PageWidth, double PageHeight) Parameters Type Name Description System.Int32 PageIndex Page index to resize System.Double PageWidth Desired page width, in millimeters System.Double PageHeight Desired page height, in millimeters RotateAllPages(PdfPageRotation) Rotates all pages of the PdfDocument by a specified number of degrees. Declaration public void RotateAllPages(PdfPageRotation Rotation) Parameters Type Name Description PdfPageRotation Rotation Degrees of rotation RotatePage(Int32, PdfPageRotation) Rotates one page of the PdfDocument by a specified number of degrees. Declaration public void RotatePage(int PageIndex, PdfPageRotation Rotation) Parameters Type Name Description System.Int32 PageIndex Index of the page to rotate. PageIndex is a 'Zero based' page number, the first page being 0. PdfPageRotation Rotation Degrees of rotation RotateSelectedPages(IEnumerable<Int32>, PdfPageRotation) Rotates selected pages of the PdfDocument by a specified number of degrees. Declaration public void RotateSelectedPages(IEnumerable<int> PageIndexes, PdfPageRotation Rotation) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes Indexes of the pages to rotate in an IEnumerable, list or array. PageIndex is a 'Zero based' page number, the first page being 0. PdfPageRotation Rotation Degrees of rotation SaveAs(String) Saves the PdfDocument to a file. Supports site relative paths staring with \"~/\" in .Net Framework Web 4+ Applications Declaration public PdfDocument SaveAs(string FileName) Parameters Type Name Description System.String FileName File Path Returns Type Description PdfDocument This PdfDocument for fluid code notation. SignPdfWithDigitalSignature(PdfSignature) Signs the PDF with digital signature with advanced options. Note that the PDF will not be fully signed until Saved using SaveAs(String) , TrySaveAs(String) , Stream or BinaryData . Multiple certificates may be used. Declaration public PdfDocument SignPdfWithDigitalSignature(PdfSignature Signature) Parameters Type Name Description PdfSignature Signature The PdfSignature. Returns Type Description PdfDocument Returns this PdfDocument object, allowing for a 'fluent' (LINQ like) chained in-line code style ToBitmap(IEnumerable<Int32>, Int32) Rasterizes (renders) the PDF into IronSoftware.Drawing.AnyBitmap objects. Specific pages may be selected using the PageIndexes parameter. Please add an assembly reference to IronSoftware.Drawing.AnyBitmap to use this \"PDF To Image\" method Declaration public AnyBitmap[] ToBitmap(IEnumerable<int> pageIndexes, int DPI = 96) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > pageIndexes Specific zero based page index may be given to only convert part of the PDF document to images System.Int32 DPI The desired resolution of the output Images. Returns Type Description IronSoftware.Drawing.AnyBitmap [] An array of IronSoftware.Drawing.AnyBitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToBitmap(Int32) Rasterizes (renders) the PDF into IronSoftware.Drawing.AnyBitmap objects. 1 Bitmap for each page. Please add an assembly reference to IronSoftware.Drawing.AnyBitmap to use this \"PDF To Image\" method. Please Dispose() each Bitmap object after use. Declaration public AnyBitmap[] ToBitmap(int DPI = 96) Parameters Type Name Description System.Int32 DPI The resolution of the output Bitmap in 'Dots Per Inch'. Higher DPI creates larger bitmap files of higher image quality. Returns Type Description IronSoftware.Drawing.AnyBitmap [] An array of IronSoftware.Drawing.AnyBitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI may be ignored on some Linux distros. ToBitmap(Nullable<Int32>, Nullable<Int32>, IEnumerable<Int32>, Int32) Rasterizes (renders) the PDF into IronSoftware.Drawing.AnyBitmap objects. Specific pages may be selected using the PageIndexes parameter. The Widths and Height of the output images may be specified. Please add an assembly reference to IronSoftware.Drawing.AnyBitmap to use this \"PDF To Image\" method Declaration public AnyBitmap[] ToBitmap(Nullable<int> imageMaxWidth, Nullable<int> imageMaxHeight, IEnumerable<int> pageIndexes = null, int DPI = 96) Parameters Type Name Description System.Nullable < System.Int32 > imageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > imageMaxHeight The target maximum height(in pixel) of the output images. System.Collections.Generic.IEnumerable < System.Int32 > pageIndexes Specific zero based page index may be given to only convert part of the PDF document to images System.Int32 DPI The desired resolution of the output Images. Returns Type Description IronSoftware.Drawing.AnyBitmap [] An array of IronSoftware.Drawing.AnyBitmap image objects which can be saved, manipulated, displayed or edited programmatically. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, IEnumerable<int> PageIndexes, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, IEnumerable<int> PageIndexes, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to render as images. System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToJpegImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as JPEG files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToJpegImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_page_*.jpg System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string ToMultiPageTiffImage(string FileName, IEnumerable<int> PageIndexes = null, int DPI = 96) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page number to render System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String A file path of the image file created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, IEnumerable<int> PageIndexes, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to number to render System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToMultiPageTiffImage(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) file and saves it to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToMultiPageTiffImage(string FileName, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileName A full file path for the output file. E.g. C:\\images\\pdf_pages.tiff System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, IEnumerable<int> PageIndexes, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to render as images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, IEnumerable<int> PageIndexes, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page numbe to render System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToPngImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as PNG (Portable Network Graphic) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToPngImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.png System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, IEnumerable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, IEnumerable<int> PageIndexes, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page number to render System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, IEnumerable<Int32>, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, IEnumerable<int> PageIndexes, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Collections.Generic.IEnumerable < System.Int32 > PageIndexes A list of the specific zero based page number to render System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, int DPI) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. ToTiffImages(String, Nullable<Int32>, Nullable<Int32>, Int32) Renders the pages of the PDF as TIFF (Tagged Image File Format / Tif) files and saves them to disk. Specific image dimensions and page numbers may be given as optional parameters FileNamePattern should normally contain an asterisk (*) character which will be substituted for the page numbers Declaration public string[] ToTiffImages(string FileNamePattern, Nullable<int> ImageMaxWidth, Nullable<int> ImageMaxHeight, int DPI = 96) Parameters Type Name Description System.String FileNamePattern A full or partial file path for the output files containing an asterisk. E.g. C:\\images\\pdf_pages_*.tiff System.Nullable < System.Int32 > ImageMaxWidth The target maximum width(in pixel) of the output images. System.Nullable < System.Int32 > ImageMaxHeight The target maximum height(in pixel) of the output images. System.Int32 DPI The desired resolution of the output Images. Returns Type Description System.String [] An array of the file paths of the image files created. Remarks The DPI will be ignored under Linux and macOS. TrySaveAs(String) Attempt to save the PdfDocument to a file. Declaration public bool TrySaveAs(string FileName) Parameters Type Name Description System.String FileName File Path Returns Type Description System.Boolean } true if the file was saved successfully. false if an error occurred (e.g. file was locked or insufficient permissions). VerifyPdfSignatures() Verifies all the PDF signatures for this PDF document and returns true if there are no invalid signatures. Declaration public bool VerifyPdfSignatures() Returns Type Description System.Boolean true if all digital signatures for this PDF document are currently valid. Editing a PDF document in any way will invalidate signatures. VerifyPdfSignaturesInFile(String) Verifies all the PDF signatures for a PDF file (by file path) and returns true if there are no invalid signatures. Declaration public static bool VerifyPdfSignaturesInFile(string PdfFilePath) Parameters Type Name Description System.String PdfFilePath The full or relative PDF file path. Returns Type Description System.Boolean true if all digital signatures for the PDF document are currently valid. Editing a PDF document in any way will invalidate signatures. Implements System.IDisposable"
  },
  "api/IronPdf.Pdfium.Domain.Exceptions.html": {
    "href": "api/IronPdf.Pdfium.Domain.Exceptions.html",
    "title": "Namespace IronPdf.Pdfium.Domain.Exceptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Pdfium.Domain.Exceptions Classes IronPdfPdfiumException"
  },
  "api/IronPdf.Pdfium.Domain.Exceptions.IronPdfPdfiumException.html": {
    "href": "api/IronPdf.Pdfium.Domain.Exceptions.IronPdfPdfiumException.html",
    "title": "Class IronPdfPdfiumException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronPdfPdfiumException Inheritance System.Object IronPdfPdfiumException Namespace : IronPdf.Pdfium.Domain.Exceptions Assembly : IronPdf.dll Syntax public class IronPdfPdfiumException : ApplicationException Constructors IronPdfPdfiumException(String, Exception) Declaration public IronPdfPdfiumException(string message, Exception innerException = null) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronPdf.Pdfium.Domain.Native.Marshaling.html": {
    "href": "api/IronPdf.Pdfium.Domain.Native.Marshaling.html",
    "title": "Namespace IronPdf.Pdfium.Domain.Native.Marshaling | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Pdfium.Domain.Native.Marshaling Classes PdfAccessPermission"
  },
  "api/IronPdf.Pdfium.Domain.Native.Marshaling.PdfAccessPermission.html": {
    "href": "api/IronPdf.Pdfium.Domain.Native.Marshaling.PdfAccessPermission.html",
    "title": "Class PdfAccessPermission | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfAccessPermission Inheritance System.Object PdfAccessPermission Namespace : IronPdf.Pdfium.Domain.Native.Marshaling Assembly : IronPdf.dll Syntax public sealed class PdfAccessPermission : Enum Fields NoPermissions Declaration public const PdfAccessPermission NoPermissions Field Value Type Description PdfAccessPermission NotProtected Declaration public const PdfAccessPermission NotProtected Field Value Type Description PdfAccessPermission PermitAccessibilityExtractContent Declaration public const PdfAccessPermission PermitAccessibilityExtractContent Field Value Type Description PdfAccessPermission PermitAll Declaration public const PdfAccessPermission PermitAll Field Value Type Description PdfAccessPermission PermitAnnotations Declaration public const PdfAccessPermission PermitAnnotations Field Value Type Description PdfAccessPermission PermitAssembleDocument Declaration public const PdfAccessPermission PermitAssembleDocument Field Value Type Description PdfAccessPermission PermitExtractContent Declaration public const PdfAccessPermission PermitExtractContent Field Value Type Description PdfAccessPermission PermitFormsFill Declaration public const PdfAccessPermission PermitFormsFill Field Value Type Description PdfAccessPermission PermitFullQualityPrint Declaration public const PdfAccessPermission PermitFullQualityPrint Field Value Type Description PdfAccessPermission PermitModifyDocument Declaration public const PdfAccessPermission PermitModifyDocument Field Value Type Description PdfAccessPermission PermitPrint Declaration public const PdfAccessPermission PermitPrint Field Value Type Description PdfAccessPermission value__ Declaration public uint value__ Field Value Type Description System.UInt32"
  },
  "api/IronPdf.Pdfium.html": {
    "href": "api/IronPdf.Pdfium.html",
    "title": "Namespace IronPdf.Pdfium | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Pdfium Classes NativeMethods PdfBookmark PdfBookmarkCollection PdfDocument PdfError PdfException PdfInformation PdfiumLoader PdfiumResolveEventArgs PdfiumResolveEventHandler PdfiumResolver PdfMatch PdfMatches PdfOrientation PdfPageLink PdfPageLinks PdfPrintMode PdfPrintMultiplePages PdfPrintSettings PdfRectangle PdfRenderFlags PdfRotation PdfTextSpan Interfaces IPdfDocument"
  },
  "api/IronPdf.Pdfium.IPdfDocument.html": {
    "href": "api/IronPdf.Pdfium.IPdfDocument.html",
    "title": "Interface IPdfDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Interface IPdfDocument Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public interface IPdfDocument Properties Bookmarks Declaration PdfBookmarkCollection Bookmarks { get; } Property Value Type Description PdfBookmarkCollection PageCount Declaration int PageCount { get; } Property Value Type Description System.Int32 PageSizes Declaration IList<SizeF> PageSizes { get; } Property Value Type Description System.Collections.Generic.IList < System.Drawing.SizeF > Methods CreatePrintDocument() Declaration PrintDocument CreatePrintDocument() Returns Type Description System.Drawing.Printing.PrintDocument CreatePrintDocument(PdfPrintMode) Declaration PrintDocument CreatePrintDocument(PdfPrintMode printMode) Parameters Type Name Description PdfPrintMode printMode Returns Type Description System.Drawing.Printing.PrintDocument CreatePrintDocument(PdfPrintSettings) Declaration PrintDocument CreatePrintDocument(PdfPrintSettings settings) Parameters Type Name Description PdfPrintSettings settings Returns Type Description System.Drawing.Printing.PrintDocument DeletePage(Int32) Declaration void DeletePage(int page) Parameters Type Name Description System.Int32 page GetInformation() Declaration PdfInformation GetInformation() Returns Type Description PdfInformation GetPageLinks(Int32, Size) Declaration PdfPageLinks GetPageLinks(int page, Size size) Parameters Type Name Description System.Int32 page System.Drawing.Size size Returns Type Description PdfPageLinks GetPdfText(PdfTextSpan) Declaration string GetPdfText(PdfTextSpan textSpan) Parameters Type Name Description PdfTextSpan textSpan Returns Type Description System.String GetPdfText(Int32) Declaration string GetPdfText(int page) Parameters Type Name Description System.Int32 page Returns Type Description System.String GetTextBounds(PdfTextSpan) Declaration IList<PdfRectangle> GetTextBounds(PdfTextSpan textSpan) Parameters Type Name Description PdfTextSpan textSpan Returns Type Description System.Collections.Generic.IList < PdfRectangle > PointFromPdf(Int32, PointF) Declaration Point PointFromPdf(int page, PointF point) Parameters Type Name Description System.Int32 page System.Drawing.PointF point Returns Type Description System.Drawing.Point PointToPdf(Int32, Point) Declaration PointF PointToPdf(int page, Point point) Parameters Type Name Description System.Int32 page System.Drawing.Point point Returns Type Description System.Drawing.PointF RectangleFromPdf(Int32, RectangleF) Declaration Rectangle RectangleFromPdf(int page, RectangleF rect) Parameters Type Name Description System.Int32 page System.Drawing.RectangleF rect Returns Type Description System.Drawing.Rectangle RectangleToPdf(Int32, Rectangle) Declaration RectangleF RectangleToPdf(int page, Rectangle rect) Parameters Type Name Description System.Int32 page System.Drawing.Rectangle rect Returns Type Description System.Drawing.RectangleF Render(Int32, Int32, Int32, Single, Single, PdfRenderFlags) Declaration Image Render(int page, int width, int height, float dpiX, float dpiY, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY PdfRenderFlags flags Returns Type Description System.Drawing.Image Render(Int32, Int32, Int32, Single, Single, PdfRotation, PdfRenderFlags) Declaration Image Render(int page, int width, int height, float dpiX, float dpiY, PdfRotation rotate, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY PdfRotation rotate PdfRenderFlags flags Returns Type Description System.Drawing.Image Render(Int32, Int32, Int32, Single, Single, Boolean) Declaration Image Render(int page, int width, int height, float dpiX, float dpiY, bool forPrinting) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY System.Boolean forPrinting Returns Type Description System.Drawing.Image Render(Int32, Single, Single, PdfRenderFlags) Declaration Image Render(int page, float dpiX, float dpiY, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Single dpiX System.Single dpiY PdfRenderFlags flags Returns Type Description System.Drawing.Image Render(Int32, Single, Single, Boolean) Declaration Image Render(int page, float dpiX, float dpiY, bool forPrinting) Parameters Type Name Description System.Int32 page System.Single dpiX System.Single dpiY System.Boolean forPrinting Returns Type Description System.Drawing.Image RotatePage(Int32, PdfRotation) Declaration void RotatePage(int page, PdfRotation rotation) Parameters Type Name Description System.Int32 page PdfRotation rotation Save(Stream) Declaration void Save(Stream stream) Parameters Type Name Description System.IO.Stream stream Save(String) Declaration void Save(string path) Parameters Type Name Description System.String path Search(String, Boolean, Boolean) Declaration PdfMatches Search(string text, bool matchCase, bool wholeWord) Parameters Type Name Description System.String text System.Boolean matchCase System.Boolean wholeWord Returns Type Description PdfMatches Search(String, Boolean, Boolean, Int32) Declaration PdfMatches Search(string text, bool matchCase, bool wholeWord, int page) Parameters Type Name Description System.String text System.Boolean matchCase System.Boolean wholeWord System.Int32 page Returns Type Description PdfMatches Search(String, Boolean, Boolean, Int32, Int32) Declaration PdfMatches Search(string text, bool matchCase, bool wholeWord, int startPage, int endPage) Parameters Type Name Description System.String text System.Boolean matchCase System.Boolean wholeWord System.Int32 startPage System.Int32 endPage Returns Type Description PdfMatches"
  },
  "api/IronPdf.Pdfium.NativeMethods.html": {
    "href": "api/IronPdf.Pdfium.NativeMethods.html",
    "title": "Class NativeMethods | C# PDF Library Documentation | IronPDF",
    "keywords": "Class NativeMethods Inheritance System.Object NativeMethods Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class NativeMethods : Object Constructors NativeMethods() Declaration public NativeMethods() Fields DLLNAME Declaration public const string DLLNAME = \"pdfium.vanilla\" Field Value Type Description System.String Properties DeploymentPath Declaration public static string DeploymentPath { get; set; } Property Value Type Description System.String Methods FPDF_BookmarkGetAction(IntPtr) Declaration public static IntPtr FPDF_BookmarkGetAction(IntPtr bookmark) Parameters Type Name Description System.IntPtr bookmark Returns Type Description System.IntPtr FPDF_BookmarkGetDest(IntPtr, IntPtr) Declaration public static IntPtr FPDF_BookmarkGetDest(IntPtr document, IntPtr bookmark) Parameters Type Name Description System.IntPtr document System.IntPtr bookmark Returns Type Description System.IntPtr FPDF_BookmarkGetFirstChild(IntPtr, IntPtr) Declaration public static IntPtr FPDF_BookmarkGetFirstChild(IntPtr document, IntPtr bookmark) Parameters Type Name Description System.IntPtr document System.IntPtr bookmark Returns Type Description System.IntPtr FPDF_BookmarkGetNextSibling(IntPtr, IntPtr) Declaration public static IntPtr FPDF_BookmarkGetNextSibling(IntPtr document, IntPtr bookmark) Parameters Type Name Description System.IntPtr document System.IntPtr bookmark Returns Type Description System.IntPtr FPDF_BookmarkGetTitle(IntPtr, Byte[], UInt32) Declaration public static uint FPDF_BookmarkGetTitle(IntPtr bookmark, byte[] buffer, uint buflen) Parameters Type Name Description System.IntPtr bookmark System.Byte [] buffer System.UInt32 buflen Returns Type Description System.UInt32 FPDFDest_GetPageIndex(IntPtr, IntPtr) Declaration public static uint FPDFDest_GetPageIndex(IntPtr document, IntPtr dest) Parameters Type Name Description System.IntPtr document System.IntPtr dest Returns Type Description System.UInt32 TryLoadNativeLibrary(String) Declaration public static void TryLoadNativeLibrary(string path = null) Parameters Type Name Description System.String path"
  },
  "api/IronPdf.Pdfium.PdfBookmark.html": {
    "href": "api/IronPdf.Pdfium.PdfBookmark.html",
    "title": "Class PdfBookmark | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfBookmark Inheritance System.Object PdfBookmark Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfBookmark : Object Constructors PdfBookmark() Declaration public PdfBookmark() Properties Children Declaration public PdfBookmarkCollection Children { get; } Property Value Type Description PdfBookmarkCollection PageIndex Declaration public int PageIndex { get; set; } Property Value Type Description System.Int32 Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/IronPdf.Pdfium.PdfBookmarkCollection.html": {
    "href": "api/IronPdf.Pdfium.PdfBookmarkCollection.html",
    "title": "Class PdfBookmarkCollection | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfBookmarkCollection Inheritance System.Object PdfBookmarkCollection Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfBookmarkCollection : Collection<PdfBookmark> Constructors PdfBookmarkCollection() Declaration public PdfBookmarkCollection()"
  },
  "api/IronPdf.Pdfium.PdfDocument.html": {
    "href": "api/IronPdf.Pdfium.PdfDocument.html",
    "title": "Class PdfDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfDocument Inheritance System.Object PdfDocument Implements IPdfDocument System.IDisposable Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfDocument : Object, IPdfDocument Properties Bookmarks Declaration public PdfBookmarkCollection Bookmarks { get; } Property Value Type Description PdfBookmarkCollection PageCount Declaration public int PageCount { get; } Property Value Type Description System.Int32 PageSizes Declaration public IList<SizeF> PageSizes { get; } Property Value Type Description System.Collections.Generic.IList < System.Drawing.SizeF > Methods CreatePrintDocument() Declaration public PrintDocument CreatePrintDocument() Returns Type Description System.Drawing.Printing.PrintDocument CreatePrintDocument(PdfPrintMode) Declaration public PrintDocument CreatePrintDocument(PdfPrintMode printMode) Parameters Type Name Description PdfPrintMode printMode Returns Type Description System.Drawing.Printing.PrintDocument CreatePrintDocument(PdfPrintSettings) Declaration public PrintDocument CreatePrintDocument(PdfPrintSettings settings) Parameters Type Name Description PdfPrintSettings settings Returns Type Description System.Drawing.Printing.PrintDocument DeletePage(Int32) Declaration public void DeletePage(int page) Parameters Type Name Description System.Int32 page Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected override void Finalize() GetInformation() Declaration public PdfInformation GetInformation() Returns Type Description PdfInformation GetPageLinks(Int32, Size) Declaration public PdfPageLinks GetPageLinks(int page, Size size) Parameters Type Name Description System.Int32 page System.Drawing.Size size Returns Type Description PdfPageLinks GetPdfText(PdfTextSpan) Declaration public string GetPdfText(PdfTextSpan textSpan) Parameters Type Name Description PdfTextSpan textSpan Returns Type Description System.String GetPdfText(Int32) Declaration public string GetPdfText(int page) Parameters Type Name Description System.Int32 page Returns Type Description System.String GetTextBounds(PdfTextSpan) Declaration public IList<PdfRectangle> GetTextBounds(PdfTextSpan textSpan) Parameters Type Name Description PdfTextSpan textSpan Returns Type Description System.Collections.Generic.IList < PdfRectangle > Load(Stream) Declaration public static PdfDocument Load(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description PdfDocument Load(Stream, String) Declaration public static PdfDocument Load(Stream stream, string password) Parameters Type Name Description System.IO.Stream stream System.String password Returns Type Description PdfDocument Load(String) Declaration public static PdfDocument Load(string path) Parameters Type Name Description System.String path Returns Type Description PdfDocument Load(String, String) Declaration public static PdfDocument Load(string path, string password) Parameters Type Name Description System.String path System.String password Returns Type Description PdfDocument PointFromPdf(Int32, PointF) Declaration public Point PointFromPdf(int page, PointF point) Parameters Type Name Description System.Int32 page System.Drawing.PointF point Returns Type Description System.Drawing.Point PointToPdf(Int32, Point) Declaration public PointF PointToPdf(int page, Point point) Parameters Type Name Description System.Int32 page System.Drawing.Point point Returns Type Description System.Drawing.PointF RectangleFromPdf(Int32, RectangleF) Declaration public Rectangle RectangleFromPdf(int page, RectangleF rect) Parameters Type Name Description System.Int32 page System.Drawing.RectangleF rect Returns Type Description System.Drawing.Rectangle RectangleToPdf(Int32, Rectangle) Declaration public RectangleF RectangleToPdf(int page, Rectangle rect) Parameters Type Name Description System.Int32 page System.Drawing.Rectangle rect Returns Type Description System.Drawing.RectangleF Render(Int32, Int32, Int32, Single, Single, PdfRenderFlags) Declaration public Image Render(int page, int width, int height, float dpiX, float dpiY, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY PdfRenderFlags flags Returns Type Description System.Drawing.Image Render(Int32, Int32, Int32, Single, Single, PdfRotation, PdfRenderFlags) Declaration public Image Render(int page, int width, int height, float dpiX, float dpiY, PdfRotation rotate, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY PdfRotation rotate PdfRenderFlags flags Returns Type Description System.Drawing.Image Render(Int32, Int32, Int32, Single, Single, Boolean) Declaration public Image Render(int page, int width, int height, float dpiX, float dpiY, bool forPrinting) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY System.Boolean forPrinting Returns Type Description System.Drawing.Image Render(Int32, Single, Single, PdfRenderFlags) Declaration public Image Render(int page, float dpiX, float dpiY, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Single dpiX System.Single dpiY PdfRenderFlags flags Returns Type Description System.Drawing.Image Render(Int32, Single, Single, Boolean) Declaration public Image Render(int page, float dpiX, float dpiY, bool forPrinting) Parameters Type Name Description System.Int32 page System.Single dpiX System.Single dpiY System.Boolean forPrinting Returns Type Description System.Drawing.Image RenderBytes(Int32, Int32, Int32, Single, Single, PdfRotation, PdfRenderFlags) Declaration public byte[] RenderBytes(int page, int width, int height, float dpiX, float dpiY, PdfRotation rotate, PdfRenderFlags flags) Parameters Type Name Description System.Int32 page System.Int32 width System.Int32 height System.Single dpiX System.Single dpiY PdfRotation rotate PdfRenderFlags flags Returns Type Description System.Byte [] RotatePage(Int32, PdfRotation) Declaration public void RotatePage(int page, PdfRotation rotation) Parameters Type Name Description System.Int32 page PdfRotation rotation Save(Stream) Declaration public void Save(Stream stream) Parameters Type Name Description System.IO.Stream stream Save(String) Declaration public void Save(string path) Parameters Type Name Description System.String path Search(String, Boolean, Boolean) Declaration public PdfMatches Search(string text, bool matchCase, bool wholeWord) Parameters Type Name Description System.String text System.Boolean matchCase System.Boolean wholeWord Returns Type Description PdfMatches Search(String, Boolean, Boolean, Int32) Declaration public PdfMatches Search(string text, bool matchCase, bool wholeWord, int page) Parameters Type Name Description System.String text System.Boolean matchCase System.Boolean wholeWord System.Int32 page Returns Type Description PdfMatches Search(String, Boolean, Boolean, Int32, Int32) Declaration public PdfMatches Search(string text, bool matchCase, bool wholeWord, int startPage, int endPage) Parameters Type Name Description System.String text System.Boolean matchCase System.Boolean wholeWord System.Int32 startPage System.Int32 endPage Returns Type Description PdfMatches Implements IPdfDocument System.IDisposable"
  },
  "api/IronPdf.Pdfium.PdfError.html": {
    "href": "api/IronPdf.Pdfium.PdfError.html",
    "title": "Class PdfError | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfError Inheritance System.Object PdfError Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfError : Enum Fields CannotOpenFile Declaration public const PdfError CannotOpenFile Field Value Type Description PdfError InvalidFormat Declaration public const PdfError InvalidFormat Field Value Type Description PdfError PageNotFound Declaration public const PdfError PageNotFound Field Value Type Description PdfError PasswordProtected Declaration public const PdfError PasswordProtected Field Value Type Description PdfError Success Declaration public const PdfError Success Field Value Type Description PdfError Unknown Declaration public const PdfError Unknown Field Value Type Description PdfError UnsupportedSecurityScheme Declaration public const PdfError UnsupportedSecurityScheme Field Value Type Description PdfError value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Pdfium.PdfException.html": {
    "href": "api/IronPdf.Pdfium.PdfException.html",
    "title": "Class PdfException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfException Inheritance System.Object PdfException Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfException : Exception Constructors PdfException() Declaration public PdfException() PdfException(PdfError) Declaration public PdfException(PdfError error) Parameters Type Name Description PdfError error PdfException(SerializationInfo, StreamingContext) Declaration protected PdfException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context PdfException(String) Declaration public PdfException(string message) Parameters Type Name Description System.String message PdfException(String, Exception) Declaration public PdfException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Properties Error Declaration public PdfError Error { get; } Property Value Type Description PdfError"
  },
  "api/IronPdf.Pdfium.PdfInformation.html": {
    "href": "api/IronPdf.Pdfium.PdfInformation.html",
    "title": "Class PdfInformation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfInformation Inheritance System.Object PdfInformation Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfInformation : Object Constructors PdfInformation() Declaration public PdfInformation() Properties Author Declaration public string Author { get; set; } Property Value Type Description System.String CreationDate Declaration public Nullable<DateTime> CreationDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > Creator Declaration public string Creator { get; set; } Property Value Type Description System.String Keywords Declaration public string Keywords { get; set; } Property Value Type Description System.String ModificationDate Declaration public Nullable<DateTime> ModificationDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > Producer Declaration public string Producer { get; set; } Property Value Type Description System.String Subject Declaration public string Subject { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String"
  },
  "api/IronPdf.Pdfium.PdfiumLoader.html": {
    "href": "api/IronPdf.Pdfium.PdfiumLoader.html",
    "title": "Class PdfiumLoader | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfiumLoader Inheritance System.Object PdfiumLoader Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public static class PdfiumLoader : Object"
  },
  "api/IronPdf.Pdfium.PdfiumResolveEventArgs.html": {
    "href": "api/IronPdf.Pdfium.PdfiumResolveEventArgs.html",
    "title": "Class PdfiumResolveEventArgs | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfiumResolveEventArgs Inheritance System.Object PdfiumResolveEventArgs Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfiumResolveEventArgs : EventArgs Constructors PdfiumResolveEventArgs() Declaration public PdfiumResolveEventArgs() Properties PdfiumFileName Declaration public string PdfiumFileName { get; set; } Property Value Type Description System.String"
  },
  "api/IronPdf.Pdfium.PdfiumResolveEventHandler.html": {
    "href": "api/IronPdf.Pdfium.PdfiumResolveEventHandler.html",
    "title": "Class PdfiumResolveEventHandler | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfiumResolveEventHandler Inheritance System.Object PdfiumResolveEventHandler Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfiumResolveEventHandler : MulticastDelegate Constructors PdfiumResolveEventHandler(Object, IntPtr) Declaration public PdfiumResolveEventHandler(object object, IntPtr method) Parameters Type Name Description System.Object object System.IntPtr method Methods BeginInvoke(Object, PdfiumResolveEventArgs, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(object sender, PdfiumResolveEventArgs e, AsyncCallback callback, object object) Parameters Type Name Description System.Object sender PdfiumResolveEventArgs e System.AsyncCallback callback System.Object object Returns Type Description System.IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description System.IAsyncResult result Invoke(Object, PdfiumResolveEventArgs) Declaration public virtual void Invoke(object sender, PdfiumResolveEventArgs e) Parameters Type Name Description System.Object sender PdfiumResolveEventArgs e"
  },
  "api/IronPdf.Pdfium.PdfiumResolver.html": {
    "href": "api/IronPdf.Pdfium.PdfiumResolver.html",
    "title": "Class PdfiumResolver | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfiumResolver Inheritance System.Object PdfiumResolver Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfiumResolver : Object Constructors PdfiumResolver() Declaration public PdfiumResolver() Methods add_Resolve(PdfiumResolveEventHandler) Declaration public static void add_Resolve(PdfiumResolveEventHandler value) Parameters Type Name Description PdfiumResolveEventHandler value remove_Resolve(PdfiumResolveEventHandler) Declaration public static void remove_Resolve(PdfiumResolveEventHandler value) Parameters Type Name Description PdfiumResolveEventHandler value Events Resolve Declaration public static event PdfiumResolveEventHandler Resolve Event Type Type Description PdfiumResolveEventHandler"
  },
  "api/IronPdf.Pdfium.PdfMatch.html": {
    "href": "api/IronPdf.Pdfium.PdfMatch.html",
    "title": "Class PdfMatch | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfMatch Inheritance System.Object PdfMatch Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfMatch : Object Constructors PdfMatch(String, PdfTextSpan, Int32) Declaration public PdfMatch(string text, PdfTextSpan textSpan, int page) Parameters Type Name Description System.String text PdfTextSpan textSpan System.Int32 page Properties Page Declaration public int Page { get; } Property Value Type Description System.Int32 Text Declaration public string Text { get; } Property Value Type Description System.String TextSpan Declaration public PdfTextSpan TextSpan { get; } Property Value Type Description PdfTextSpan"
  },
  "api/IronPdf.Pdfium.PdfMatches.html": {
    "href": "api/IronPdf.Pdfium.PdfMatches.html",
    "title": "Class PdfMatches | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfMatches Inheritance System.Object PdfMatches Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfMatches : Object Constructors PdfMatches(Int32, Int32, IList<PdfMatch>) Declaration public PdfMatches(int startPage, int endPage, IList<PdfMatch> matches) Parameters Type Name Description System.Int32 startPage System.Int32 endPage System.Collections.Generic.IList < PdfMatch > matches Properties EndPage Declaration public int EndPage { get; } Property Value Type Description System.Int32 Items Declaration public IList<PdfMatch> Items { get; } Property Value Type Description System.Collections.Generic.IList < PdfMatch > StartPage Declaration public int StartPage { get; } Property Value Type Description System.Int32"
  },
  "api/IronPdf.Pdfium.PdfOrientation.html": {
    "href": "api/IronPdf.Pdfium.PdfOrientation.html",
    "title": "Class PdfOrientation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfOrientation Inheritance System.Object PdfOrientation Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfOrientation : Enum Fields Horizontal Declaration public const PdfOrientation Horizontal Field Value Type Description PdfOrientation value__ Declaration public int value__ Field Value Type Description System.Int32 Vertical Declaration public const PdfOrientation Vertical Field Value Type Description PdfOrientation"
  },
  "api/IronPdf.Pdfium.PdfPageLink.html": {
    "href": "api/IronPdf.Pdfium.PdfPageLink.html",
    "title": "Class PdfPageLink | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPageLink Inheritance System.Object PdfPageLink Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfPageLink : Object Constructors PdfPageLink(RectangleF, Nullable<Int32>, String) Declaration public PdfPageLink(RectangleF bounds, Nullable<int> targetPage, string uri) Parameters Type Name Description System.Drawing.RectangleF bounds System.Nullable < System.Int32 > targetPage System.String uri Properties Bounds Declaration public RectangleF Bounds { get; } Property Value Type Description System.Drawing.RectangleF TargetPage Declaration public Nullable<int> TargetPage { get; } Property Value Type Description System.Nullable < System.Int32 > Uri Declaration public string Uri { get; } Property Value Type Description System.String"
  },
  "api/IronPdf.Pdfium.PdfPageLinks.html": {
    "href": "api/IronPdf.Pdfium.PdfPageLinks.html",
    "title": "Class PdfPageLinks | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPageLinks Inheritance System.Object PdfPageLinks Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfPageLinks : Object Constructors PdfPageLinks(IList<PdfPageLink>) Declaration public PdfPageLinks(IList<PdfPageLink> links) Parameters Type Name Description System.Collections.Generic.IList < PdfPageLink > links Properties Links Declaration public IList<PdfPageLink> Links { get; } Property Value Type Description System.Collections.Generic.IList < PdfPageLink >"
  },
  "api/IronPdf.Pdfium.PdfPrintMode.html": {
    "href": "api/IronPdf.Pdfium.PdfPrintMode.html",
    "title": "Class PdfPrintMode | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintMode Inheritance System.Object PdfPrintMode Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfPrintMode : Enum Fields CutMargin Declaration public const PdfPrintMode CutMargin Field Value Type Description PdfPrintMode ShrinkToMargin Declaration public const PdfPrintMode ShrinkToMargin Field Value Type Description PdfPrintMode value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Pdfium.PdfPrintMultiplePages.html": {
    "href": "api/IronPdf.Pdfium.PdfPrintMultiplePages.html",
    "title": "Class PdfPrintMultiplePages | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintMultiplePages Inheritance System.Object PdfPrintMultiplePages Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfPrintMultiplePages : Object Constructors PdfPrintMultiplePages(Int32, Int32, PdfOrientation, Single) Declaration public PdfPrintMultiplePages(int horizontal, int vertical, PdfOrientation orientation, float margin) Parameters Type Name Description System.Int32 horizontal System.Int32 vertical PdfOrientation orientation System.Single margin Properties Horizontal Declaration public int Horizontal { get; } Property Value Type Description System.Int32 Margin Declaration public float Margin { get; } Property Value Type Description System.Single Orientation Declaration public PdfOrientation Orientation { get; } Property Value Type Description PdfOrientation Vertical Declaration public int Vertical { get; } Property Value Type Description System.Int32"
  },
  "api/IronPdf.Pdfium.PdfPrintSettings.html": {
    "href": "api/IronPdf.Pdfium.PdfPrintSettings.html",
    "title": "Class PdfPrintSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintSettings Inheritance System.Object PdfPrintSettings Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public class PdfPrintSettings : Object Constructors PdfPrintSettings(PdfPrintMode, PdfPrintMultiplePages) Declaration public PdfPrintSettings(PdfPrintMode mode, PdfPrintMultiplePages multiplePages) Parameters Type Name Description PdfPrintMode mode PdfPrintMultiplePages multiplePages Properties Mode Declaration public PdfPrintMode Mode { get; } Property Value Type Description PdfPrintMode MultiplePages Declaration public PdfPrintMultiplePages MultiplePages { get; } Property Value Type Description PdfPrintMultiplePages"
  },
  "api/IronPdf.Pdfium.PdfRectangle.html": {
    "href": "api/IronPdf.Pdfium.PdfRectangle.html",
    "title": "Class PdfRectangle | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfRectangle Inheritance System.Object PdfRectangle Implements System.IEquatable < PdfRectangle > Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfRectangle : ValueType Constructors PdfRectangle(Int32, RectangleF) Declaration public PdfRectangle(int page, RectangleF bounds) Parameters Type Name Description System.Int32 page System.Drawing.RectangleF bounds Fields Empty Declaration public static readonly PdfRectangle Empty Field Value Type Description PdfRectangle Properties Bounds Declaration public RectangleF Bounds { get; } Property Value Type Description System.Drawing.RectangleF IsValid Declaration public bool IsValid { get; } Property Value Type Description System.Boolean Page Declaration public int Page { get; } Property Value Type Description System.Int32 Methods Equals(PdfRectangle) Declaration public bool Equals(PdfRectangle other) Parameters Type Name Description PdfRectangle other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators Equality(PdfRectangle, PdfRectangle) Declaration public static bool operator ==(PdfRectangle left, PdfRectangle right) Parameters Type Name Description PdfRectangle left PdfRectangle right Returns Type Description System.Boolean Inequality(PdfRectangle, PdfRectangle) Declaration public static bool operator !=(PdfRectangle left, PdfRectangle right) Parameters Type Name Description PdfRectangle left PdfRectangle right Returns Type Description System.Boolean Implements System.IEquatable<>"
  },
  "api/IronPdf.Pdfium.PdfRenderFlags.html": {
    "href": "api/IronPdf.Pdfium.PdfRenderFlags.html",
    "title": "Class PdfRenderFlags | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfRenderFlags Inheritance System.Object PdfRenderFlags Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfRenderFlags : Enum Fields Annotations Declaration public const PdfRenderFlags Annotations Field Value Type Description PdfRenderFlags CorrectFromDpi Declaration public const PdfRenderFlags CorrectFromDpi Field Value Type Description PdfRenderFlags ForceHalftone Declaration public const PdfRenderFlags ForceHalftone Field Value Type Description PdfRenderFlags ForPrinting Declaration public const PdfRenderFlags ForPrinting Field Value Type Description PdfRenderFlags Grayscale Declaration public const PdfRenderFlags Grayscale Field Value Type Description PdfRenderFlags LcdText Declaration public const PdfRenderFlags LcdText Field Value Type Description PdfRenderFlags LimitImageCacheSize Declaration public const PdfRenderFlags LimitImageCacheSize Field Value Type Description PdfRenderFlags NoNativeText Declaration public const PdfRenderFlags NoNativeText Field Value Type Description PdfRenderFlags None Declaration public const PdfRenderFlags None Field Value Type Description PdfRenderFlags Transparent Declaration public const PdfRenderFlags Transparent Field Value Type Description PdfRenderFlags value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Pdfium.PdfRotation.html": {
    "href": "api/IronPdf.Pdfium.PdfRotation.html",
    "title": "Class PdfRotation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfRotation Inheritance System.Object PdfRotation Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfRotation : Enum Fields Rotate0 Declaration public const PdfRotation Rotate0 Field Value Type Description PdfRotation Rotate180 Declaration public const PdfRotation Rotate180 Field Value Type Description PdfRotation Rotate270 Declaration public const PdfRotation Rotate270 Field Value Type Description PdfRotation Rotate90 Declaration public const PdfRotation Rotate90 Field Value Type Description PdfRotation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Pdfium.PdfTextSpan.html": {
    "href": "api/IronPdf.Pdfium.PdfTextSpan.html",
    "title": "Class PdfTextSpan | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfTextSpan Inheritance System.Object PdfTextSpan Implements System.IEquatable < PdfTextSpan > Namespace : IronPdf.Pdfium Assembly : IronPdf.dll Syntax public sealed class PdfTextSpan : ValueType Constructors PdfTextSpan(Int32, Int32, Int32) Declaration public PdfTextSpan(int page, int offset, int length) Parameters Type Name Description System.Int32 page System.Int32 offset System.Int32 length Properties Length Declaration public int Length { get; } Property Value Type Description System.Int32 Offset Declaration public int Offset { get; } Property Value Type Description System.Int32 Page Declaration public int Page { get; } Property Value Type Description System.Int32 Methods Equals(PdfTextSpan) Declaration public bool Equals(PdfTextSpan other) Parameters Type Name Description PdfTextSpan other Returns Type Description System.Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Operators Equality(PdfTextSpan, PdfTextSpan) Declaration public static bool operator ==(PdfTextSpan left, PdfTextSpan right) Parameters Type Name Description PdfTextSpan left PdfTextSpan right Returns Type Description System.Boolean Inequality(PdfTextSpan, PdfTextSpan) Declaration public static bool operator !=(PdfTextSpan left, PdfTextSpan right) Parameters Type Name Description PdfTextSpan left PdfTextSpan right Returns Type Description System.Boolean Implements System.IEquatable<>"
  },
  "api/IronPdf.PixelFormat.html": {
    "href": "api/IronPdf.PixelFormat.html",
    "title": "Class PixelFormat | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PixelFormat Specifies the format of the color data for each pixel in the image. Inheritance System.Object PixelFormat Namespace : IronPdf Assembly : IronPdf.dll Syntax public sealed class PixelFormat : Enum Fields Format32bppArgb Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components. Declaration public const PixelFormat Format32bppArgb Field Value Type Description PixelFormat Format32bppRgb Specifies that the format is 32 bits per pixel; 8 bits each are used for the red, green, and blue components. The remaining 8 bits are not used. Declaration public const PixelFormat Format32bppRgb Field Value Type Description PixelFormat value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.PrintDoc.html": {
    "href": "api/IronPdf.PrintDoc.html",
    "title": "Namespace IronPdf.PrintDoc | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.PrintDoc Classes PdfPrintDocument PDF Class enabling developers granular control over sending printable documents to a physical printer. An assembly reference to System.Drawing is required in your project. Note: ' PdfPrintDocument ' is only supported on: 'Windows'. PdfPrintMultiplePages Configuration for printing multiple PDF pages on a single page. PdfPrintSettings Configures the print document."
  },
  "api/IronPdf.PrintDoc.PdfPrintDocument.html": {
    "href": "api/IronPdf.PrintDoc.PdfPrintDocument.html",
    "title": "Class PdfPrintDocument | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintDocument PDF Class enabling developers granular control over sending printable documents to a physical printer. An assembly reference to System.Drawing is required in your project. Note: ' PdfPrintDocument ' is only supported on: 'Windows'. Inheritance System.Object PdfPrintDocument Namespace : IronPdf.PrintDoc Assembly : IronPdf.dll Syntax public class PdfPrintDocument : PrintDocument Constructors PdfPrintDocument(PdfDocumentIdProvider, PdfPrintSettings, PrinterSettings, PrintController) Initializes a new instance of the System.Drawing.Printing.PrintDocument class. Declaration public PdfPrintDocument(PdfDocumentIdProvider provider, PdfPrintSettings settings, PrinterSettings printerSettings, PrintController printController) Parameters Type Name Description IronPdf.PdfDocumentIdProvider provider An IronPdf.PdfDocumentIdProvider of document. PdfPrintSettings settings A PdfPrintSettings that configures the print document. System.Drawing.Printing.PrinterSettings printerSettings A System.Drawing.Printing.PrinterSettings that specifies where and how the document is printed. System.Drawing.Printing.PrintController printController The System.Drawing.Printing.PrintController that guides the printing process. Methods OnBeforePrintPage(PrintPageEventArgs) Represents the method that will handle the System.Drawing.Printing.PrintDocument.PrintPage event of a System.Drawing.Printing.PrintDocument . Declaration protected virtual void OnBeforePrintPage(PrintPageEventArgs e) Parameters Type Name Description System.Drawing.Printing.PrintPageEventArgs e that contains the event data. OnBeforeQueryPageSettings(QueryPageSettingsEventArgs) Represents the method that handles the System.Drawing.Printing.PrintDocument.QueryPageSettings event of a System.Drawing.Printing.PrintDocument . Declaration protected virtual void OnBeforeQueryPageSettings(QueryPageSettingsEventArgs e) Parameters Type Name Description System.Drawing.Printing.QueryPageSettingsEventArgs e A System.Drawing.Printing.QueryPageSettingsEventArgs that contains the event data. OnBeginPrint(PrintEventArgs) Raises the System.Drawing.Printing.PrintDocument.BeginPrint event. It is called after the System.Drawing.Printing.PrintDocument.Print method is called and before the first page of the document prints. Declaration protected override void OnBeginPrint(PrintEventArgs e) Parameters Type Name Description System.Drawing.Printing.PrintEventArgs e A System.Drawing.Printing.PrintEventArgs that contains the event data. OnPrintPage(PrintPageEventArgs) Raises the System.Drawing.Printing.PrintDocument.PrintPage event. It is called before a page prints. Declaration protected override void OnPrintPage(PrintPageEventArgs e) Parameters Type Name Description System.Drawing.Printing.PrintPageEventArgs e A System.Drawing.Printing.PrintPageEventArgs that contains the event data. OnQueryPageSettings(QueryPageSettingsEventArgs) Raises the System.Drawing.Printing.PrintDocument.QueryPageSettings event. It is called immediately before each System.Drawing.Printing.PrintDocument.PrintPage event. Declaration protected override void OnQueryPageSettings(QueryPageSettingsEventArgs e) Parameters Type Name Description System.Drawing.Printing.QueryPageSettingsEventArgs e A System.Drawing.Printing.QueryPageSettingsEventArgs that contains the event data. Events BeforePrintPage Represents the method that will handle the System.Drawing.Printing.PrintDocument.PrintPage event of a System.Drawing.Printing.PrintDocument . Declaration public event PrintPageEventHandler BeforePrintPage Event Type Type Description System.Drawing.Printing.PrintPageEventHandler BeforeQueryPageSettings Represents the method that handles the System.Drawing.Printing.PrintDocument.QueryPageSettings event of a System.Drawing.Printing.PrintDocument . Declaration public event QueryPageSettingsEventHandler BeforeQueryPageSettings Event Type Type Description System.Drawing.Printing.QueryPageSettingsEventHandler"
  },
  "api/IronPdf.PrintDoc.PdfPrintMultiplePages.html": {
    "href": "api/IronPdf.PrintDoc.PdfPrintMultiplePages.html",
    "title": "Class PdfPrintMultiplePages | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintMultiplePages Configuration for printing multiple PDF pages on a single page. Inheritance System.Object PdfPrintMultiplePages Namespace : IronPdf.PrintDoc Assembly : IronPdf.dll Syntax public class PdfPrintMultiplePages : Object Constructors PdfPrintMultiplePages(Int32, Int32, PdfPaperOrientation, Single) Creates a new instance of the PdfPrintMultiplePages class. Declaration public PdfPrintMultiplePages(int column, int row, PdfPaperOrientation orientation, float margin) Parameters Type Name Description System.Int32 column The number of pages to print horizontally. System.Int32 row The number of pages to print vertically. PdfPaperOrientation orientation The orientation in which PDF pages are layed out on the physical page. System.Single margin The margin between PDF pages in device units. Properties Column Gets the number of pages to print horizontally. Declaration public int Column { get; } Property Value Type Description System.Int32 Margin Gets the margin between PDF pages in device units. Declaration public float Margin { get; } Property Value Type Description System.Single Orientation Gets the orientation in which PDF pages are layed out on the physical page. Declaration public PdfPaperOrientation Orientation { get; } Property Value Type Description PdfPaperOrientation Row Gets the number of pages to print vertically. Declaration public int Row { get; } Property Value Type Description System.Int32"
  },
  "api/IronPdf.PrintDoc.PdfPrintSettings.html": {
    "href": "api/IronPdf.PrintDoc.PdfPrintSettings.html",
    "title": "Class PdfPrintSettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintSettings Configures the print document. Inheritance System.Object PdfPrintSettings Namespace : IronPdf.PrintDoc Assembly : IronPdf.dll Syntax public class PdfPrintSettings : Object Constructors PdfPrintSettings(PdfPrintMultiplePages) Creates a new instance of the PdfPrintSettings class. Declaration public PdfPrintSettings(PdfPrintMultiplePages multiplePages) Parameters Type Name Description PdfPrintMultiplePages multiplePages Configuration for printing multiple PDF pages on a single page. Properties MultiplePages Gets configuration for printing multiple PDF pages on a single page. Declaration public PdfPrintMultiplePages MultiplePages { get; } Property Value Type Description PdfPrintMultiplePages"
  },
  "api/IronPdf.Rendering.Abstractions.BasePdfRenderer.html": {
    "href": "api/IronPdf.Rendering.Abstractions.BasePdfRenderer.html",
    "title": "Class BasePdfRenderer | C# PDF Library Documentation | IronPDF",
    "keywords": "Class BasePdfRenderer An abstract generic class Inheritance System.Object BasePdfRenderer ChromePdfRenderer Implements IPdfRenderer Namespace : IronPdf.Rendering.Abstractions Assembly : IronPdf.dll Syntax public abstract class BasePdfRenderer : Object, IPdfRenderer Remarks Implements functionality and program flow details which are common to all renderers Properties LoginCredentials Http login credentials Declaration public ChromeHttpLoginCredentials LoginCredentials { get; set; } Property Value Type Description ChromeHttpLoginCredentials RenderingOptions Html to Pdf rendering options Declaration public ChromePdfRenderOptions RenderingOptions { get; set; } Property Value Type Description ChromePdfRenderOptions Methods RenderHtmlAsPdf(String, String, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . IronPDF is a W3C standards compliant HTML rendering based on Google's Chromium browser. If your output PDF does not look as expected: - Validate your HTML using https://validator.w3.org/ & CSS https://jigsaw.w3.org/css-validator/ - To debug HTML, Save your HTML string to a file and view in Chrome web browser's print preview which will work almost exactly as IronPDF. - Read our detailed documentation on pixel perfect HTML to PDF: https://ironpdf.com/tutorials/pixel-perfect-html-to-pdf/ Declaration public PdfDocument RenderHtmlAsPdf(string Html, string BaseUrlOrPath, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.String BaseUrlOrPath Optional. Setting the BaseUBaseUrlOrPathRL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdf(String, Uri, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . IronPDF is a W3C standards compliant HTML rendering based on Google's Chromium browser. If your output PDF does not look as expected: - Validate your HTML using https://validator.w3.org/ & CSS https://jigsaw.w3.org/css-validator/ - To debug HTML, Save your HTML string to a file and view in Chrome web browser's print preview which will work almost exactly as IronPDF. - Read our detailed documentation on pixel perfect HTML to PDF: https://ironpdf.com/tutorials/pixel-perfect-html-to-pdf/ Declaration public PdfDocument RenderHtmlAsPdf(string Html, Uri BaseUrl = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Optional. Setting the BaseURL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdfAsync(String, Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderHtmlAsPdf(String, Uri, String) Declaration public Task<PdfDocument> RenderHtmlAsPdfAsync(string Html, Uri BaseUrl = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseUrl property gives the relative context for hyper-links, images, CSS and JavaScript files. May point to a local directory or a remote URL. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderHtmlFileAsPdf(String) Creates a PDF file from a local Html file, and returns it as a PdfDocument . IronPDF is a W3C standards compliant HTML rendering based on Google's Chromium browser. If your output PDF does not look as expected: - Validate your HTML file using https://validator.w3.org/ & CSS https://jigsaw.w3.org/css-validator/ - To debug HTML, view the file in Chrome web browser's print preview which will work almost exactly as IronPDF. - Read our detailed documentation on pixel perfect HTML to PDF: https://ironpdf.com/tutorials/pixel-perfect-html-to-pdf/ Declaration public PdfDocument RenderHtmlFileAsPdf(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderHtmlFileAsPdfAsync(String) Asynchronously creates a PDF file from a local Html file, and returns it as a PdfDocument . Asynchronous variant of RenderHtmlFileAsPdf(String) Declaration public Task<PdfDocument> RenderHtmlFileAsPdfAsync(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderRtfFileAsPdf(String) Creates a PDF file from a RTF (rich text format) file and returns it as a PdfDocument . Declaration public PdfDocument RenderRtfFileAsPdf(string FilePath) Parameters Type Name Description System.String FilePath Path to an RTF file to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderRtfStringAsPdf(String) Creates a PDF file from an RTF (rich text format) string and returns it as a PdfDocument . Declaration public PdfDocument RenderRtfStringAsPdf(string RtfString) Parameters Type Name Description System.String RtfString RTF string to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdf(String) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration public PdfDocument RenderUrlAsPdf(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdf(Uri) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration public PdfDocument RenderUrlAsPdf(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdfAsync(String) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(String) Declaration public Task<PdfDocument> RenderUrlAsPdfAsync(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path or URL to an Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdfAsync(Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(Uri) Declaration public Task<PdfDocument> RenderUrlAsPdfAsync(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderZipFileAsPdf(String, String) Creates a PDF file from a local Zip file, and returns it as a PdfDocument . IronPDF is a W3C standards compliant HTML rendering based on Google's Chromium browser. If your output PDF does not look as expected: - Validate your HTML file using https://validator.w3.org/ & CSS https://jigsaw.w3.org/css-validator/ - To debug HTML, view the file in Chrome web browser's print preview which will work almost exactly as IronPDF. - Read our detailed documentation on pixel perfect HTML to PDF: https://ironpdf.com/tutorials/pixel-perfect-html-to-pdf/ Declaration public PdfDocument RenderZipFileAsPdf(string FilePath, string MainFile) Parameters Type Name Description System.String FilePath Path to an Zip to be rendered as a PDF. System.String MainFile Name of the primary HTML file. Returns Type Description PdfDocument A PdfDocument Implements IPdfRenderer"
  },
  "api/IronPdf.Rendering.Abstractions.html": {
    "href": "api/IronPdf.Rendering.Abstractions.html",
    "title": "Namespace IronPdf.Rendering.Abstractions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Rendering.Abstractions Classes BasePdfRenderer An abstract generic class Interfaces IPdfRenderer An Interface for \"Html To Pdf\" rendering classes."
  },
  "api/IronPdf.Rendering.Abstractions.IPdfRenderer.html": {
    "href": "api/IronPdf.Rendering.Abstractions.IPdfRenderer.html",
    "title": "Interface IPdfRenderer | C# PDF Library Documentation | IronPDF",
    "keywords": "Interface IPdfRenderer An Interface for \"Html To Pdf\" rendering classes. Namespace : IronPdf.Rendering.Abstractions Assembly : IronPdf.dll Syntax public interface IPdfRenderer Methods RenderHtmlAsPdf(String, String, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . Declaration PdfDocument RenderHtmlAsPdf(string Html, string BaseUrlOrPath, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.String BaseUrlOrPath Optional. Setting the BaseUBaseUrlOrPathRL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdf(String, Uri, String) Creates a PDF file from an Html string, and returns it as a PdfDocument . Declaration PdfDocument RenderHtmlAsPdf(string Html, Uri BaseUrl = null, string Proxy = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Optional. Setting the BaseURL property gives the relative file path or URL context for hyper-links, images, CSS and JavaScript files. System.String Proxy Optional. Specifies an Http proxy server. Use the pattern: http(s)://user-name:password@host:port Returns Type Description PdfDocument A PdfDocument RenderHtmlAsPdfAsync(String, Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderHtmlAsPdf(String, Uri, String) Declaration Task<PdfDocument> RenderHtmlAsPdfAsync(string Html, Uri BaseUrl = null) Parameters Type Name Description System.String Html The Html to be rendered as a PDF. System.Uri BaseUrl Setting the BaseUrl property gives the relative context for hyper-links, images, CSS and JavaScript files. May point to a local directory or a remote URL. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderHtmlFileAsPdf(String) Creates a PDF file from a local Html file, and returns it as a PdfDocument . Declaration PdfDocument RenderHtmlFileAsPdf(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderHtmlFileAsPdfAsync(String) Asynchronously creates a PDF file from a local Html file, and returns it as a PdfDocument . Asynchronous variant of RenderHtmlFileAsPdf(String) Declaration Task<PdfDocument> RenderHtmlFileAsPdfAsync(string FilePath) Parameters Type Name Description System.String FilePath Path to an Html to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdf(String) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration PdfDocument RenderUrlAsPdf(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path to an Html to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdf(Uri) Creates a PDF file from a URL or local file path and returns it as a PdfDocument . Declaration PdfDocument RenderUrlAsPdf(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description PdfDocument A PdfDocument RenderUrlAsPdfAsync(String) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(String) Declaration Task<PdfDocument> RenderUrlAsPdfAsync(string UrlOrPath) Parameters Type Name Description System.String UrlOrPath Path or URL to an Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderUrlAsPdfAsync(Uri) Asynchronously creates a PDF file from a URL or local file path and returns it as a PdfDocument . Asynchronous variant of RenderUrlAsPdf(Uri) Declaration Task<PdfDocument> RenderUrlAsPdfAsync(Uri Url) Parameters Type Name Description System.Uri Url An absolute (fully formed) Uri. Points to the Html document to be rendered as a PDF. Returns Type Description System.Threading.Tasks.Task < PdfDocument > A PdfDocument RenderZipFileAsPdf(String, String) Creates a PDF file from a Zip file, and returns it as a PdfDocument . Declaration PdfDocument RenderZipFileAsPdf(string FilePath, string MainFile) Parameters Type Name Description System.String FilePath System.String MainFile Returns Type Description PdfDocument A PdfDocument"
  },
  "api/IronPdf.Rendering.html": {
    "href": "api/IronPdf.Rendering.html",
    "title": "Namespace IronPdf.Rendering | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Rendering Classes PdfCssMediaType Defines which style-sheet should be rendered. 'Print' or 'Screen'. This matches the CSS3 Media Queries standard. PdfPageRotation PageRotation setting of a PDF page PdfPaperOrientation Paper orientation when rendering HTML to PDF PdfPaperSize Defines the target virtual paper size the PDF. Relates to real-world paper-sizes. PdfRenderingEngine Specifies which \"HTML to PDF\" rendering engine to use."
  },
  "api/IronPdf.Rendering.PdfCssMediaType.html": {
    "href": "api/IronPdf.Rendering.PdfCssMediaType.html",
    "title": "Class PdfCssMediaType | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfCssMediaType Defines which style-sheet should be rendered. 'Print' or 'Screen'. This matches the CSS3 Media Queries standard. Inheritance System.Object PdfCssMediaType Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfCssMediaType : Enum Fields Print Use 'print' CSS media styles. Default behavior when viewing print dialog in a browser Declaration public const PdfCssMediaType Print Field Value Type Description PdfCssMediaType Screen Use 'screen' CSS media styles. Emulates the display of a browser window. Declaration public const PdfCssMediaType Screen Field Value Type Description PdfCssMediaType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfPageRotation.html": {
    "href": "api/IronPdf.Rendering.PdfPageRotation.html",
    "title": "Class PdfPageRotation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPageRotation PageRotation setting of a PDF page Inheritance System.Object PdfPageRotation Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfPageRotation : Enum Fields Clockwise180 Page is rotate 180 degrees clockwise Declaration public const PdfPageRotation Clockwise180 Field Value Type Description PdfPageRotation Clockwise270 Page is rotated 270 degrees clockwise Declaration public const PdfPageRotation Clockwise270 Field Value Type Description PdfPageRotation Clockwise90 Page is rotated 90 degrees clockwise Declaration public const PdfPageRotation Clockwise90 Field Value Type Description PdfPageRotation None Page is not rotated Declaration public const PdfPageRotation None Field Value Type Description PdfPageRotation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfPaperOrientation.html": {
    "href": "api/IronPdf.Rendering.PdfPaperOrientation.html",
    "title": "Class PdfPaperOrientation | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPaperOrientation Paper orientation when rendering HTML to PDF Inheritance System.Object PdfPaperOrientation Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfPaperOrientation : Enum Fields Landscape Declaration public const PdfPaperOrientation Landscape Field Value Type Description PdfPaperOrientation Portrait Declaration public const PdfPaperOrientation Portrait Field Value Type Description PdfPaperOrientation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfPaperSize.html": {
    "href": "api/IronPdf.Rendering.PdfPaperSize.html",
    "title": "Class PdfPaperSize | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPaperSize Defines the target virtual paper size the PDF. Relates to real-world paper-sizes. Inheritance System.Object PdfPaperSize Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfPaperSize : Enum Fields A2 Declaration public const PdfPaperSize A2 Field Value Type Description PdfPaperSize A3 Declaration public const PdfPaperSize A3 Field Value Type Description PdfPaperSize A3Extra Declaration public const PdfPaperSize A3Extra Field Value Type Description PdfPaperSize A3ExtraTransverse Declaration public const PdfPaperSize A3ExtraTransverse Field Value Type Description PdfPaperSize A3Rotated Declaration public const PdfPaperSize A3Rotated Field Value Type Description PdfPaperSize A3Transverse Declaration public const PdfPaperSize A3Transverse Field Value Type Description PdfPaperSize A4 Declaration public const PdfPaperSize A4 Field Value Type Description PdfPaperSize A4Extra Declaration public const PdfPaperSize A4Extra Field Value Type Description PdfPaperSize A4Plus Declaration public const PdfPaperSize A4Plus Field Value Type Description PdfPaperSize A4Rotated Declaration public const PdfPaperSize A4Rotated Field Value Type Description PdfPaperSize A4Small Declaration public const PdfPaperSize A4Small Field Value Type Description PdfPaperSize A4Transverse Declaration public const PdfPaperSize A4Transverse Field Value Type Description PdfPaperSize A5 Declaration public const PdfPaperSize A5 Field Value Type Description PdfPaperSize A5Extra Declaration public const PdfPaperSize A5Extra Field Value Type Description PdfPaperSize A5Rotated Declaration public const PdfPaperSize A5Rotated Field Value Type Description PdfPaperSize A5Transverse Declaration public const PdfPaperSize A5Transverse Field Value Type Description PdfPaperSize A6 Declaration public const PdfPaperSize A6 Field Value Type Description PdfPaperSize A6Rotated Declaration public const PdfPaperSize A6Rotated Field Value Type Description PdfPaperSize APlus Declaration public const PdfPaperSize APlus Field Value Type Description PdfPaperSize B4 Declaration public const PdfPaperSize B4 Field Value Type Description PdfPaperSize B4Envelope Declaration public const PdfPaperSize B4Envelope Field Value Type Description PdfPaperSize B4JisRotated Declaration public const PdfPaperSize B4JisRotated Field Value Type Description PdfPaperSize B5 Declaration public const PdfPaperSize B5 Field Value Type Description PdfPaperSize B5Envelope Declaration public const PdfPaperSize B5Envelope Field Value Type Description PdfPaperSize B5Extra Declaration public const PdfPaperSize B5Extra Field Value Type Description PdfPaperSize B5JisRotated Declaration public const PdfPaperSize B5JisRotated Field Value Type Description PdfPaperSize B5Transverse Declaration public const PdfPaperSize B5Transverse Field Value Type Description PdfPaperSize B6Envelope Declaration public const PdfPaperSize B6Envelope Field Value Type Description PdfPaperSize B6Jis Declaration public const PdfPaperSize B6Jis Field Value Type Description PdfPaperSize B6JisRotated Declaration public const PdfPaperSize B6JisRotated Field Value Type Description PdfPaperSize BPlus Declaration public const PdfPaperSize BPlus Field Value Type Description PdfPaperSize C3Envelope Declaration public const PdfPaperSize C3Envelope Field Value Type Description PdfPaperSize C4Envelope Declaration public const PdfPaperSize C4Envelope Field Value Type Description PdfPaperSize C5Envelope Declaration public const PdfPaperSize C5Envelope Field Value Type Description PdfPaperSize C65Envelope Declaration public const PdfPaperSize C65Envelope Field Value Type Description PdfPaperSize C6Envelope Declaration public const PdfPaperSize C6Envelope Field Value Type Description PdfPaperSize CSheet Declaration public const PdfPaperSize CSheet Field Value Type Description PdfPaperSize Custom Declaration public const PdfPaperSize Custom Field Value Type Description PdfPaperSize DLEnvelope Declaration public const PdfPaperSize DLEnvelope Field Value Type Description PdfPaperSize DSheet Declaration public const PdfPaperSize DSheet Field Value Type Description PdfPaperSize ESheet Declaration public const PdfPaperSize ESheet Field Value Type Description PdfPaperSize Executive Declaration public const PdfPaperSize Executive Field Value Type Description PdfPaperSize Folio Declaration public const PdfPaperSize Folio Field Value Type Description PdfPaperSize GermanLegalFanfold Declaration public const PdfPaperSize GermanLegalFanfold Field Value Type Description PdfPaperSize GermanStandardFanfold Declaration public const PdfPaperSize GermanStandardFanfold Field Value Type Description PdfPaperSize InviteEnvelope Declaration public const PdfPaperSize InviteEnvelope Field Value Type Description PdfPaperSize IsoB4 Declaration public const PdfPaperSize IsoB4 Field Value Type Description PdfPaperSize ItalyEnvelope Declaration public const PdfPaperSize ItalyEnvelope Field Value Type Description PdfPaperSize JapaneseDoublePostcard Declaration public const PdfPaperSize JapaneseDoublePostcard Field Value Type Description PdfPaperSize JapaneseDoublePostcardRotated Declaration public const PdfPaperSize JapaneseDoublePostcardRotated Field Value Type Description PdfPaperSize JapanesePostcard Declaration public const PdfPaperSize JapanesePostcard Field Value Type Description PdfPaperSize JapanesePostcardRotated Declaration public const PdfPaperSize JapanesePostcardRotated Field Value Type Description PdfPaperSize Ledger Declaration public const PdfPaperSize Ledger Field Value Type Description PdfPaperSize Legal Declaration public const PdfPaperSize Legal Field Value Type Description PdfPaperSize LegalExtra Declaration public const PdfPaperSize LegalExtra Field Value Type Description PdfPaperSize Letter Declaration public const PdfPaperSize Letter Field Value Type Description PdfPaperSize LetterExtra Declaration public const PdfPaperSize LetterExtra Field Value Type Description PdfPaperSize LetterExtraTransverse Declaration public const PdfPaperSize LetterExtraTransverse Field Value Type Description PdfPaperSize LetterPlus Declaration public const PdfPaperSize LetterPlus Field Value Type Description PdfPaperSize LetterRotated Declaration public const PdfPaperSize LetterRotated Field Value Type Description PdfPaperSize LetterSmall Declaration public const PdfPaperSize LetterSmall Field Value Type Description PdfPaperSize LetterTransverse Declaration public const PdfPaperSize LetterTransverse Field Value Type Description PdfPaperSize MonarchEnvelope Declaration public const PdfPaperSize MonarchEnvelope Field Value Type Description PdfPaperSize Note Declaration public const PdfPaperSize Note Field Value Type Description PdfPaperSize Number10Envelope Declaration public const PdfPaperSize Number10Envelope Field Value Type Description PdfPaperSize Number11Envelope Declaration public const PdfPaperSize Number11Envelope Field Value Type Description PdfPaperSize Number12Envelope Declaration public const PdfPaperSize Number12Envelope Field Value Type Description PdfPaperSize Number14Envelope Declaration public const PdfPaperSize Number14Envelope Field Value Type Description PdfPaperSize Number9Envelope Declaration public const PdfPaperSize Number9Envelope Field Value Type Description PdfPaperSize PersonalEnvelope Declaration public const PdfPaperSize PersonalEnvelope Field Value Type Description PdfPaperSize Prc16K Declaration public const PdfPaperSize Prc16K Field Value Type Description PdfPaperSize Prc16KRotated Declaration public const PdfPaperSize Prc16KRotated Field Value Type Description PdfPaperSize Prc32K Declaration public const PdfPaperSize Prc32K Field Value Type Description PdfPaperSize Prc32KBig Declaration public const PdfPaperSize Prc32KBig Field Value Type Description PdfPaperSize Prc32KBigRotated Declaration public const PdfPaperSize Prc32KBigRotated Field Value Type Description PdfPaperSize Prc32KRotated Declaration public const PdfPaperSize Prc32KRotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber1 Declaration public const PdfPaperSize PrcEnvelopeNumber1 Field Value Type Description PdfPaperSize PrcEnvelopeNumber10 Declaration public const PdfPaperSize PrcEnvelopeNumber10 Field Value Type Description PdfPaperSize PrcEnvelopeNumber10Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber10Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber1Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber1Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber2 Declaration public const PdfPaperSize PrcEnvelopeNumber2 Field Value Type Description PdfPaperSize PrcEnvelopeNumber2Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber2Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber3 Declaration public const PdfPaperSize PrcEnvelopeNumber3 Field Value Type Description PdfPaperSize PrcEnvelopeNumber3Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber3Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber4 Declaration public const PdfPaperSize PrcEnvelopeNumber4 Field Value Type Description PdfPaperSize PrcEnvelopeNumber4Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber4Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber5 Declaration public const PdfPaperSize PrcEnvelopeNumber5 Field Value Type Description PdfPaperSize PrcEnvelopeNumber5Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber5Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber6 Declaration public const PdfPaperSize PrcEnvelopeNumber6 Field Value Type Description PdfPaperSize PrcEnvelopeNumber6Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber6Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber7 Declaration public const PdfPaperSize PrcEnvelopeNumber7 Field Value Type Description PdfPaperSize PrcEnvelopeNumber7Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber7Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber8 Declaration public const PdfPaperSize PrcEnvelopeNumber8 Field Value Type Description PdfPaperSize PrcEnvelopeNumber8Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber8Rotated Field Value Type Description PdfPaperSize PrcEnvelopeNumber9 Declaration public const PdfPaperSize PrcEnvelopeNumber9 Field Value Type Description PdfPaperSize PrcEnvelopeNumber9Rotated Declaration public const PdfPaperSize PrcEnvelopeNumber9Rotated Field Value Type Description PdfPaperSize Quarto Declaration public const PdfPaperSize Quarto Field Value Type Description PdfPaperSize Standard10x11 Declaration public const PdfPaperSize Standard10x11 Field Value Type Description PdfPaperSize Standard10x14 Declaration public const PdfPaperSize Standard10x14 Field Value Type Description PdfPaperSize Standard11x17 Declaration public const PdfPaperSize Standard11x17 Field Value Type Description PdfPaperSize Standard12x11 Declaration public const PdfPaperSize Standard12x11 Field Value Type Description PdfPaperSize Standard15x11 Declaration public const PdfPaperSize Standard15x11 Field Value Type Description PdfPaperSize Standard9x11 Declaration public const PdfPaperSize Standard9x11 Field Value Type Description PdfPaperSize Statement Declaration public const PdfPaperSize Statement Field Value Type Description PdfPaperSize Tabloid Declaration public const PdfPaperSize Tabloid Field Value Type Description PdfPaperSize TabloidExtra Declaration public const PdfPaperSize TabloidExtra Field Value Type Description PdfPaperSize USStandardFanfold Declaration public const PdfPaperSize USStandardFanfold Field Value Type Description PdfPaperSize value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Rendering.PdfRenderingEngine.html": {
    "href": "api/IronPdf.Rendering.PdfRenderingEngine.html",
    "title": "Class PdfRenderingEngine | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfRenderingEngine Specifies which \"HTML to PDF\" rendering engine to use. Inheritance System.Object PdfRenderingEngine Namespace : IronPdf.Rendering Assembly : IronPdf.dll Syntax public sealed class PdfRenderingEngine : Enum Fields Chrome Recommended as our most capable, multithreaded and standards compliant rendering engine. Chooses the IronPDf embedded Chrome browser rendering engine. Declaration public const PdfRenderingEngine Chrome Field Value Type Description PdfRenderingEngine Default Chooses the first renderer in this list which is currently available at runtime. Declaration public const PdfRenderingEngine Default Field Value Type Description PdfRenderingEngine value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Security.html": {
    "href": "api/IronPdf.Security.html",
    "title": "Namespace IronPdf.Security | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Security Classes PdfEditSecurity Enumeration defining levels of PDF user access rights to edit a PDF. Edit rights may also be limited by the User's PDF document client software. See AllowUserEdits PdfPrintSecurity Enumeration defining levels of PDF user access rights to print a PDF. See AllowUserPrinting PdfSecuritySettings A class defining user security settings for a PDF document. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Implemented in SecuritySettings ."
  },
  "api/IronPdf.Security.PdfEditSecurity.html": {
    "href": "api/IronPdf.Security.PdfEditSecurity.html",
    "title": "Class PdfEditSecurity | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfEditSecurity Enumeration defining levels of PDF user access rights to edit a PDF. Edit rights may also be limited by the User's PDF document client software. See AllowUserEdits Inheritance System.Object PdfEditSecurity Namespace : IronPdf.Security Assembly : IronPdf.dll Syntax public sealed class PdfEditSecurity : Enum Fields EditAll The user may edit the PDF as allowed by their PDF client software. Declaration public const PdfEditSecurity EditAll Field Value Type Description PdfEditSecurity EditPages The user may re-arrange pages, rotate pages and manage PDF thumbnails, but may not otherwise edit the PDF unless they have the Owner password. Declaration public const PdfEditSecurity EditPages Field Value Type Description PdfEditSecurity NoEdit The user may not edit the PDF unless they have the Owner password. Declaration public const PdfEditSecurity NoEdit Field Value Type Description PdfEditSecurity value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Security.PdfPrintSecurity.html": {
    "href": "api/IronPdf.Security.PdfPrintSecurity.html",
    "title": "Class PdfPrintSecurity | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfPrintSecurity Enumeration defining levels of PDF user access rights to print a PDF. See AllowUserPrinting Inheritance System.Object PdfPrintSecurity Namespace : IronPdf.Security Assembly : IronPdf.dll Syntax public sealed class PdfPrintSecurity : Enum Fields FullPrintRights Users may print the PDF without restriction. Declaration public const PdfPrintSecurity FullPrintRights Field Value Type Description PdfPrintSecurity NoPrint The user may not print the PDF unless they have the Owner password. Declaration public const PdfPrintSecurity NoPrint Field Value Type Description PdfPrintSecurity PrintLowQuality The user may only print the PDF at low resolution unless they have the Owner password. Declaration public const PdfPrintSecurity PrintLowQuality Field Value Type Description PdfPrintSecurity value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPdf.Security.PdfSecuritySettings.html": {
    "href": "api/IronPdf.Security.PdfSecuritySettings.html",
    "title": "Class PdfSecuritySettings | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfSecuritySettings A class defining user security settings for a PDF document. Allows the developer to control user access passwords, encryption, and also who may edit, print and copy content from the PDF document Implemented in SecuritySettings . Inheritance System.Object PdfSecuritySettings Namespace : IronPdf.Security Assembly : IronPdf.dll Syntax public class PdfSecuritySettings : Object Properties AllowUserAnnotations Gets or sets the permissions for users to annotate the PDF document with comments. If AllowUserAnnotations is set false , the OwnerPassword must be set for the security measure to take effect. Declaration public bool AllowUserAnnotations { get; set; } Property Value Type Description System.Boolean true if users may annotate the PDF document, otherwise false . AllowUserCopyPasteContent Gets or sets the permissions for users to extract or 'copy & paste' content (text and images) from the PDF document. If AllowUserCopyPasteContent is set false , the OwnerPassword must also be set for the security measure to take effect. Declaration public bool AllowUserCopyPasteContent { get; set; } Property Value Type Description System.Boolean true if users may 'copy and paste' content out of the PDF otherwise, false . AllowUserCopyPasteContentForAccessibility Gets or sets the permissions for users to extract or 'copy & paste' content (text and images) from the PDF document for accessibility. Declaration public bool AllowUserCopyPasteContentForAccessibility { get; set; } Property Value Type Description System.Boolean true if users may 'copy and paste' content out of the PDF otherwise, false . AllowUserEdits Gets or sets the permissions for users edit the PDF document. The features to edit the document depends entirely on the PDF client software used by the end user. If editing rights are restricted, then the OwnerPassword must be set for the security measure to take effect. Declaration public PdfEditSecurity AllowUserEdits { get; set; } Property Value Type Description PdfEditSecurity The PdfEditSecurity value for user edit security. AllowUserFormData Gets or sets the permissions for users to fill-in (enter data into) forms in the PDF document. If AllowUserFormData is set false , the OwnerPassword must be set for the security measure to take effect. Note. If you want to make the form readonly in Adobe Acrobat Reader please call MakePdfDocumentReadOnly(String) method or set AllowUserEdits to NoEdit and set OwnerPassword . Declaration public bool AllowUserFormData { get; set; } Property Value Type Description System.Boolean true if users may annotate the PDF document, otherwise false . Setting AllowUserFormData true will also enable annotations. AllowUserPrinting Gets or sets the permissions for users to print the PDF document. If print rights are restricted, then the OwnerPassword must be set for the security measure to take effect. Declaration public PdfPrintSecurity AllowUserPrinting { get; set; } Property Value Type Description PdfPrintSecurity The PdfPrintSecurity value for user printing. OwnerPassword Sets the owner password and enables 128Bit encryption of PDF content. An owner password is one used to enable and disable all other security settings. OwnerPassword must be set to a non empty string value for AllowUserCopyPasteContent , AllowUserAnnotations , AllowUserFormData ,s AllowUserPrinting and AllowUserEdits to be restricted. Declaration public string OwnerPassword { get; set; } Property Value Type Description System.String UserPassword Sets the user password and enables 128Bit encryption of PDF content . A user password if a password that each user must enter to open or print the PDF document. Declaration public string UserPassword { get; set; } Property Value Type Description System.String Methods MakePdfDocumentReadOnly(String) Makes this PDF document read only such that: Content is encrypted at 128 bit. Copy and paste of content is disallowed. Annotations and form editing are disabled. Declaration public void MakePdfDocumentReadOnly(string OwnerPassword) Parameters Type Name Description System.String OwnerPassword The owner password for the PDF. A string for owner password is required to enable PDF encryption and all document security options. RemovePasswordsAndEncryption() Removes all user and owner password security for a PDF document. Also disables content encryption. Content is encrypted at 128 bit. Copy and paste of content is disallowed. Annotations and form editing are disabled. Declaration public void RemovePasswordsAndEncryption()"
  },
  "api/IronPdf.Signing.html": {
    "href": "api/IronPdf.Signing.html",
    "title": "Namespace IronPdf.Signing | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Signing Classes PdfSignature A class that represents a PDF signing certificate (.PFX or .p12) format which can be used to digitally sign a PDF. This protecting it from alteration."
  },
  "api/IronPdf.Signing.Inspection.html": {
    "href": "api/IronPdf.Signing.Inspection.html",
    "title": "Namespace IronPdf.Signing.Inspection | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronPdf.Signing.Inspection Classes VerifiedSignature A class that represents a verified digital signature for a PDF document."
  },
  "api/IronPdf.Signing.Inspection.VerifiedSignature.html": {
    "href": "api/IronPdf.Signing.Inspection.VerifiedSignature.html",
    "title": "Class VerifiedSignature | C# PDF Library Documentation | IronPDF",
    "keywords": "Class VerifiedSignature A class that represents a verified digital signature for a PDF document. Inheritance System.Object VerifiedSignature Namespace : IronPdf.Signing.Inspection Assembly : IronPdf.dll Syntax public class VerifiedSignature : Object Properties SignatureName Gets the field name of the digital signature. Declaration public string SignatureName { get; } Property Value Type Description System.String SigningContact The contact person or email address for signing related inquiries (optional). Declaration public string SigningContact { get; } Property Value Type Description System.String SigningDate The date and time of the digital signature. Declaration public DateTime SigningDate { get; } Property Value Type Description System.DateTime SigningLocation The physical location the PDF was signed (optional). Declaration public string SigningLocation { get; } Property Value Type Description System.String SigningReason The reason the PDF was signed (optional). Declaration public string SigningReason { get; } Property Value Type Description System.String Valid true if the signature is valid, Declaration public bool Valid { get; } Property Value Type Description System.Boolean Methods ToString() Returns a string that represents the current digital signature for a PDF document. Declaration public override string ToString() Returns Type Description System.String A string that represents the current digital signature for a PDF document."
  },
  "api/IronPdf.Signing.PdfSignature.html": {
    "href": "api/IronPdf.Signing.PdfSignature.html",
    "title": "Class PdfSignature | C# PDF Library Documentation | IronPDF",
    "keywords": "Class PdfSignature A class that represents a PDF signing certificate (.PFX or .p12) format which can be used to digitally sign a PDF. This protecting it from alteration. Inheritance System.Object PdfSignature Namespace : IronPdf.Signing Assembly : IronPdf.dll Syntax public class PdfSignature : Object Constructors PdfSignature(Byte[], String) Initializes a new instance of the PdfSignature class. Declaration public PdfSignature(byte[] CertificateRawData, string Password) Parameters Type Name Description System.Byte [] CertificateRawData The certificate as a binary data (byte array). System.String Password The certificate's password. PdfSignature(X509Certificate2) Initializes a new instance of the PdfSignature class. Declaration public PdfSignature(X509Certificate2 ExportableNativeCertificate) Parameters Type Name Description System.Security.Cryptography.X509Certificates.X509Certificate2 ExportableNativeCertificate The exportable native certificate as a System.Security.Cryptography.X509Certificates.X509Certificate2. PdfSignature(String, String) Initializes a new instance of the PdfSignature class using a .pfx or .p12 digital signature file. Declaration public PdfSignature(string FilePathToCertificate, string Password) Parameters Type Name Description System.String FilePathToCertificate The file path to certificate. System.String Password The certificate's password. Fields SignatureDate The date and time of the digital signature. If left null, the signature will be timestamped at the millisecond that the PdfDocument is saved to Disk or Stream. Declaration public Nullable<DateTime> SignatureDate Field Value Type Description System.Nullable < System.DateTime > SignatureImage A visual image for the sign, often a PNG of a human signature or company stamp (optional). This appends a visual signature in addition to cryptographic signing. LoadSignatureImageFromFile(String) LoadSignatureImageFromStream(Stream) Declaration public AnyBitmap SignatureImage Field Value Type Description IronSoftware.Drawing.AnyBitmap SigningContact The contact person or email address for signing related inquiries (optional). Declaration public string SigningContact Field Value Type Description System.String SigningLocation The physical location the PDF was signed (optional). Declaration public string SigningLocation Field Value Type Description System.String SigningReason The reason the PDF was signed (optional). Declaration public string SigningReason Field Value Type Description System.String Methods Finalize() Declaration protected override void Finalize() LoadSignatureImageFromFile(String) Loads a signature image from an image file. This appends a visual signature in addition to cryptographic signing. Declaration public void LoadSignatureImageFromFile(string FilePath) Parameters Type Name Description System.String FilePath The file path. LoadSignatureImageFromStream(Stream) Loads a signature image from a stream. This appends visual signature in addition to cryptographic signing. Declaration public void LoadSignatureImageFromStream(Stream Stream) Parameters Type Name Description System.IO.Stream Stream The image file as a stream. SignPdfFile(String, Boolean, String, String) Signs an existing PDF file. Declaration public bool SignPdfFile(string PdfFilePath, bool RemoveOldSignatures = false, string UserPassword = null, string OwnerPassword = null) Parameters Type Name Description System.String PdfFilePath The PDF file path. System.Boolean RemoveOldSignatures if set to true old digital signatures are removed to ensure signing validity. System.String UserPassword Optional user password if the PDF document is encrypted. System.String OwnerPassword Optional owner password if the PDF document is encrypted. Returns Type Description System.Boolean true if successful."
  },
  "api/IronPdf.TextHeaderFooter.html": {
    "href": "api/IronPdf.TextHeaderFooter.html",
    "title": "Class TextHeaderFooter | C# PDF Library Documentation | IronPDF",
    "keywords": "Class TextHeaderFooter Defines PDF Header and Footer display options. TextHeaderFooter uses a logical approach to rendering Headers and Footers for the most common use cases. Inheritance System.Object TextHeaderFooter HtmlHeaderFooter Implements System.ICloneable Namespace : IronPdf Assembly : IronPdf.dll Syntax public class TextHeaderFooter : Object Constructors TextHeaderFooter() Declaration public TextHeaderFooter() Properties CenterText Sets the centered header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string CenterText { get; set; } Property Value Type Description System.String DrawDividerLine Adds a horizontal line divider between the header / footer and the page content on every page of the PDF document. Declaration public bool DrawDividerLine { get; set; } Property Value Type Description System.Boolean Font Font family FontTypes . Default is Arial Declaration public FontTypes Font { get; set; } Property Value Type Description FontTypes FontSize Font size in px. Declaration public double FontSize { get; set; } Property Value Type Description System.Double LeftText Sets the left hand side header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string LeftText { get; set; } Property Value Type Description System.String RightText Sets the right hand side header text for the PDF document. Merge meta-data into your header using any of these placeholder strings: {page} {total-pages} {url} {date} {time} {html-title} {pdf-title} Declaration public string RightText { get; set; } Property Value Type Description System.String Methods Clone() Clones this instance. Declaration public object Clone() Returns Type Description System.Object System.Object of type SimpleHeaderFooter Implements System.ICloneable See Also HtmlHeaderFooter"
  },
  "api/IronPdf.UseMargins.html": {
    "href": "api/IronPdf.UseMargins.html",
    "title": "Class UseMargins | C# PDF Library Documentation | IronPDF",
    "keywords": "Class UseMargins Margin values which can be copied from the main document to headers and footers applied to the document Inheritance System.Object UseMargins Namespace : IronPdf Assembly : IronPdf.dll Syntax public sealed class UseMargins : Enum Fields All All margin values will be used Declaration public const UseMargins All Field Value Type Description UseMargins Bottom Bottom margin value will be used Declaration public const UseMargins Bottom Field Value Type Description UseMargins Left Left margin value will be used Declaration public const UseMargins Left Field Value Type Description UseMargins LeftAndRight Left and right margin values will be used Declaration public const UseMargins LeftAndRight Field Value Type Description UseMargins None No margins values will be used Declaration public const UseMargins None Field Value Type Description UseMargins Right Right margin value will be used Declaration public const UseMargins Right Field Value Type Description UseMargins Top Top margin value will be used Declaration public const UseMargins Top Field Value Type Description UseMargins TopAndBottom Top and bottom margin values will be used Declaration public const UseMargins TopAndBottom Field Value Type Description UseMargins value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronSoftware.Exceptions.html": {
    "href": "api/IronSoftware.Exceptions.html",
    "title": "Namespace IronSoftware.Exceptions | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronSoftware.Exceptions Classes IronSoftwareAssemblyLoadException IronSoftwareAssemblyMissingException IronSoftwareAssemblyVersionMismatchException IronSoftwareDeploymentConfigurationMissingException IronSoftwareDeploymentException IronSoftwareDeploymentNotSupportedException IronSoftwareEmbeddedDeploymentException IronSoftwareEmbeddedDeploymentMissingException LicensingException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareAssemblyLoadException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareAssemblyLoadException.html",
    "title": "Class IronSoftwareAssemblyLoadException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareAssemblyLoadException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareAssemblyLoadException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareAssemblyLoadException : IronSoftwareDeploymentException Constructors IronSoftwareAssemblyLoadException(String) Declaration public IronSoftwareAssemblyLoadException(string message) Parameters Type Name Description System.String message IronSoftwareAssemblyLoadException(String, Exception) Declaration public IronSoftwareAssemblyLoadException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareAssemblyMissingException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareAssemblyMissingException.html",
    "title": "Class IronSoftwareAssemblyMissingException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareAssemblyMissingException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareAssemblyMissingException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareAssemblyMissingException : IronSoftwareDeploymentException Constructors IronSoftwareAssemblyMissingException(String) Declaration public IronSoftwareAssemblyMissingException(string message) Parameters Type Name Description System.String message IronSoftwareAssemblyMissingException(String, Exception) Declaration public IronSoftwareAssemblyMissingException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareAssemblyVersionMismatchException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareAssemblyVersionMismatchException.html",
    "title": "Class IronSoftwareAssemblyVersionMismatchException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareAssemblyVersionMismatchException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareAssemblyVersionMismatchException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareAssemblyVersionMismatchException : IronSoftwareDeploymentException Constructors IronSoftwareAssemblyVersionMismatchException(String) Declaration public IronSoftwareAssemblyVersionMismatchException(string message) Parameters Type Name Description System.String message IronSoftwareAssemblyVersionMismatchException(String, Exception) Declaration public IronSoftwareAssemblyVersionMismatchException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareDeploymentConfigurationMissingException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareDeploymentConfigurationMissingException.html",
    "title": "Class IronSoftwareDeploymentConfigurationMissingException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareDeploymentConfigurationMissingException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareDeploymentConfigurationMissingException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareDeploymentConfigurationMissingException : IronSoftwareDeploymentException Constructors IronSoftwareDeploymentConfigurationMissingException(String) Declaration public IronSoftwareDeploymentConfigurationMissingException(string message) Parameters Type Name Description System.String message IronSoftwareDeploymentConfigurationMissingException(String, Exception) Declaration public IronSoftwareDeploymentConfigurationMissingException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException IronSoftwareDeploymentConfigurationMissingException(String, String) Declaration public IronSoftwareDeploymentConfigurationMissingException(string filename, string dir) Parameters Type Name Description System.String filename System.String dir"
  },
  "api/IronSoftware.Exceptions.IronSoftwareDeploymentException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareDeploymentException.html",
    "title": "Class IronSoftwareDeploymentException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareDeploymentException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareAssemblyLoadException IronSoftwareAssemblyMissingException IronSoftwareAssemblyVersionMismatchException IronSoftwareDeploymentConfigurationMissingException IronSoftwareDeploymentNotSupportedException IronSoftwareEmbeddedDeploymentException IronSoftwareEmbeddedDeploymentMissingException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareDeploymentException : Exception Constructors IronSoftwareDeploymentException() Declaration public IronSoftwareDeploymentException() IronSoftwareDeploymentException(String) Declaration public IronSoftwareDeploymentException(string message) Parameters Type Name Description System.String message IronSoftwareDeploymentException(String, Exception) Declaration public IronSoftwareDeploymentException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareDeploymentNotSupportedException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareDeploymentNotSupportedException.html",
    "title": "Class IronSoftwareDeploymentNotSupportedException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareDeploymentNotSupportedException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareDeploymentNotSupportedException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareDeploymentNotSupportedException : IronSoftwareDeploymentException Constructors IronSoftwareDeploymentNotSupportedException(String) Declaration public IronSoftwareDeploymentNotSupportedException(string name) Parameters Type Name Description System.String name IronSoftwareDeploymentNotSupportedException(String, Exception) Declaration public IronSoftwareDeploymentNotSupportedException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareEmbeddedDeploymentException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareEmbeddedDeploymentException.html",
    "title": "Class IronSoftwareEmbeddedDeploymentException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareEmbeddedDeploymentException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareEmbeddedDeploymentException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareEmbeddedDeploymentException : IronSoftwareDeploymentException Constructors IronSoftwareEmbeddedDeploymentException(String) Declaration public IronSoftwareEmbeddedDeploymentException(string message) Parameters Type Name Description System.String message IronSoftwareEmbeddedDeploymentException(String, Exception) Declaration public IronSoftwareEmbeddedDeploymentException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.IronSoftwareEmbeddedDeploymentMissingException.html": {
    "href": "api/IronSoftware.Exceptions.IronSoftwareEmbeddedDeploymentMissingException.html",
    "title": "Class IronSoftwareEmbeddedDeploymentMissingException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class IronSoftwareEmbeddedDeploymentMissingException Inheritance System.Object IronSoftwareDeploymentException IronSoftwareEmbeddedDeploymentMissingException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public class IronSoftwareEmbeddedDeploymentMissingException : IronSoftwareDeploymentException Constructors IronSoftwareEmbeddedDeploymentMissingException(String) Declaration public IronSoftwareEmbeddedDeploymentMissingException(string message) Parameters Type Name Description System.String message IronSoftwareEmbeddedDeploymentMissingException(String, Exception) Declaration public IronSoftwareEmbeddedDeploymentMissingException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException"
  },
  "api/IronSoftware.Exceptions.LicensingException.html": {
    "href": "api/IronSoftware.Exceptions.LicensingException.html",
    "title": "Class LicensingException | C# PDF Library Documentation | IronPDF",
    "keywords": "Class LicensingException Inheritance System.Object LicensingException Namespace : IronSoftware.Exceptions Assembly : IronPdf.dll Syntax public sealed class LicensingException : Exception Constructors LicensingException() Declaration public LicensingException() LicensingException(String) Declaration public LicensingException(string message) Parameters Type Name Description System.String message LicensingException() Declaration public LicensingException( product) Parameters Type Name Description  product LicensingException(, String) Declaration public LicensingException( product, string message) Parameters Type Name Description  product System.String message"
  },
  "api/IronSoftware.html": {
    "href": "api/IronSoftware.html",
    "title": "Namespace IronSoftware | C# PDF Library Documentation | IronPDF",
    "keywords": "Namespace IronSoftware Classes Logger Logger.LoggingModes"
  },
  "api/IronSoftware.Logger.html": {
    "href": "api/IronSoftware.Logger.html",
    "title": "Class Logger | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger Inheritance System.Object Logger Namespace : IronSoftware Assembly : IronPdf.dll Syntax public static class Logger : Object Properties CustomLogger Declaration public static ILogger CustomLogger { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger LogFilePath Declaration public static string LogFilePath { get; set; } Property Value Type Description System.String LoggingMode Declaration public static Logger.LoggingModes LoggingMode { get; set; } Property Value Type Description Logger.LoggingModes Methods ClearLogs() Declaration public static void ClearLogs() Log(Exception, ConsoleColor) Declaration public static void Log(Exception exception, ConsoleColor color) Parameters Type Name Description System.Exception exception System.ConsoleColor color Log(String, ConsoleColor) Declaration public static void Log(string message, ConsoleColor color) Parameters Type Name Description System.String message System.ConsoleColor color Log(String, Exception, ConsoleColor) Declaration public static void Log(string message, Exception exception, ConsoleColor color) Parameters Type Name Description System.String message System.Exception exception System.ConsoleColor color LogAndThrow(Exception) Declaration public static Exception LogAndThrow(this Exception exception) Parameters Type Name Description System.Exception exception Returns Type Description System.Exception Events MessageLogged Declaration public static event Action<string> MessageLogged Event Type Type Description System.Action < System.String >"
  },
  "api/IronSoftware.Logger.LoggingModes.html": {
    "href": "api/IronSoftware.Logger.LoggingModes.html",
    "title": "Class Logger.LoggingModes | C# PDF Library Documentation | IronPDF",
    "keywords": "Class Logger.LoggingModes Inheritance System.Object Logger.LoggingModes Namespace : IronSoftware Assembly : IronPdf.dll Syntax public sealed class LoggingModes : Enum Fields All Declaration public const Logger.LoggingModes All Field Value Type Description Logger.LoggingModes Console Declaration public const Logger.LoggingModes Console Field Value Type Description Logger.LoggingModes Custom Declaration public const Logger.LoggingModes Custom Field Value Type Description Logger.LoggingModes DebugOutputWindow Declaration public const Logger.LoggingModes DebugOutputWindow Field Value Type Description Logger.LoggingModes File Declaration public const Logger.LoggingModes File Field Value Type Description Logger.LoggingModes None Declaration public const Logger.LoggingModes None Field Value Type Description Logger.LoggingModes value__ Declaration public int value__ Field Value Type Description System.Int32"
  }
}
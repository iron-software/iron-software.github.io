{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronPrint: Your All-in-One Print Library for .NET | C# Print API | IronPrint",
    "keywords": "IronPrint: Your All-in-One Print Library for .NET IronPrint is a print library developed by Iron Software. The library is compatible with a wide variety of environments, including Windows, macOS, Android, and iOS. Get Started Quickstart Guide: https://ironsoftware.com/csharp/print/docs/ Install with NuGet: https://www.nuget.org/packages/IronPrint/ Compatibility .NET Version Support C# , VB.NET , F# .NET 8, 7 , 6, 5, and Core 3.1+ .NET Framework (4.6.2+) Operating Systems and Environments Support Windows (7+, Server 2018+) macOS (10+) iOS (11+) Android API 21+ (v5 \"Lollipop\") .NET Project Types Support Mobile (Xamarin & MAUI & Avalonia) Desktop (WPF & MAUI & Windows Avalonia) Console (App & Library) C# Code Examples using IronPrint; // Print the document Printer.Print(\"newDoc.pdf\"); using IronPrint; // Show print dialog Printer.ShowPrintDialog(\"newDoc.pdf\"); using IronPrint; // Configure print setting PrintSettings printSettings = new PrintSettings(); printSettings.Dpi = 150; printSettings.NumberOfCopies = 2; printSettings.PaperOrientation = PaperOrientation.Portrait; // Print the document Printer.Print(\"newDoc.pdf\", printSettings); Documentation More Code Samples : https://ironsoftware.com/csharp/print/examples/print/ API Reference : https://ironsoftware.com/csharp/print/object-reference/api/ Tutorials : https://ironsoftware.com/csharp/print/tutorials/print-document/ Support : developers@ironsoftware.com"
  },
  "api/IronPrint.html": {
    "href": "api/IronPrint.html",
    "title": "Namespace IronPrint | C# Print API | IronPrint",
    "keywords": "Namespace IronPrint Classes License Allows IronPrint license keys to be applied globally across an application. Margins Margins to use for printing (in millimeters). PaperOrientation Page orientation to use for printing. PaperSize Common paper sizes. Printer The Printer class allows you to easily print various file types including: PDF PNG JPG BMP TIFF You can achieve this by passing either a file path or file data as a byte[]. Call `Printer.Print()` for silent printing Call `Printer.ShowPrintDialog()` for display the print dialog. We also provide an `Async` functions to prevent the print operation from blocking your thread. PrintSettings A print settings class to use with a IronPrint.Printer functions as an optional parameters."
  },
  "api/IronPrint.License.html": {
    "href": "api/IronPrint.License.html",
    "title": "Class License | C# Print API | IronPrint",
    "keywords": "Class License Allows IronPrint license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronPrint Assembly : IronPrint.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronPrint is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in LicenseKey property, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironsoftware.com/csharp/Print/licensing/ and https://ironsoftware.com/csharp/Print/docs/license/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean true if the license key given is valid. LicenseKey Get Licensed at https://ironsoftware.com/csharp/Print/licensing/ For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronPrint.LicenseKey\" value=\"IRONPrint-LICENSE-KEY\"/> within the appSettings node. See https://ironsoftware.com/csharp/Print/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronPrint.LicenseKey\" and the value is a valid IronPrint trial or full license key. See https://ironsoftware.com/csharp/Print/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods DisableAppAnalytics() Disables AppAnalytics for IronPrint. Limitations apply. Declaration public static void DisableAppAnalytics() IsValidLicense(String) Determines whether a string license key is valid. See https://ironsoftware.com/csharp/Print/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string licenseKey) Parameters Type Name Description System.String licenseKey IronPrint license key as a string Returns Type Description System.Boolean true if the license key given is valid."
  },
  "api/IronPrint.Margins.html": {
    "href": "api/IronPrint.Margins.html",
    "title": "Class Margins | C# Print API | IronPrint",
    "keywords": "Class Margins Margins to use for printing (in millimeters). Inheritance System.Object Margins Namespace : IronPrint Assembly : IronPrint.dll Syntax public sealed class Margins : ValueType Constructors Margins(Int32) Margins to use for printing with the same value for all sides (in millimeters). Declaration public Margins(int uniformMargin) Parameters Type Name Description System.Int32 uniformMargin The margin value to apply to all sides (left, top, right, and bottom). Margins(Int32, Int32) Margins for printing. Declaration public Margins(int horizontal, int vertical) Parameters Type Name Description System.Int32 horizontal Margins for left and right side of page. System.Int32 vertical Margins for top and bottom of page. Margins(Int32, Int32, Int32, Int32) Margins for printing. Declaration public Margins(int left, int top, int right, int bottom) Parameters Type Name Description System.Int32 left The left margin (in millimeters). System.Int32 top The top margin (in millimeters). System.Int32 right The right margin (in millimeters). System.Int32 bottom The bottom margin (in millimeters). Fields Bottom Bottom margin. Declaration public int Bottom Field Value Type Description System.Int32 Left Left margin. Declaration public int Left Field Value Type Description System.Int32 Right Right margin. Declaration public int Right Field Value Type Description System.Int32 Top Top margin. Declaration public int Top Field Value Type Description System.Int32 Zero No margins. Declaration public static Margins Zero Field Value Type Description Margins"
  },
  "api/IronPrint.PaperOrientation.html": {
    "href": "api/IronPrint.PaperOrientation.html",
    "title": "Class PaperOrientation | C# Print API | IronPrint",
    "keywords": "Class PaperOrientation Page orientation to use for printing. Inheritance System.Object PaperOrientation Namespace : IronPrint Assembly : IronPrint.dll Syntax public sealed class PaperOrientation : Enum Fields Automatic Use the current orientation of the document. Declaration public const PaperOrientation Automatic Field Value Type Description PaperOrientation Landscape Landscape. Declaration public const PaperOrientation Landscape Field Value Type Description PaperOrientation Portrait Portrait. Declaration public const PaperOrientation Portrait Field Value Type Description PaperOrientation value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPrint.PaperSize.html": {
    "href": "api/IronPrint.PaperSize.html",
    "title": "Class PaperSize | C# Print API | IronPrint",
    "keywords": "Class PaperSize Common paper sizes. Inheritance System.Object PaperSize Namespace : IronPrint Assembly : IronPrint.dll Syntax public sealed class PaperSize : Enum Fields A0 ISO A0 Declaration public const PaperSize A0 Field Value Type Description PaperSize A1 ISO A1 Declaration public const PaperSize A1 Field Value Type Description PaperSize A2 ISO A2 Declaration public const PaperSize A2 Field Value Type Description PaperSize A3 ISO A3 11.7 ✕ 16.5 inch 297 ✕ 420 millimeter Declaration public const PaperSize A3 Field Value Type Description PaperSize A4 ISO A4 8.3 ✕ 11.7 inch 210 ✕ 297 millimeter Declaration public const PaperSize A4 Field Value Type Description PaperSize A5 ISO A5 5.8 ✕ 8.3 inch 148 ✕ 210 millimeter Declaration public const PaperSize A5 Field Value Type Description PaperSize B4 ISO B4 Declaration public const PaperSize B4 Field Value Type Description PaperSize B5 ISO B5 Declaration public const PaperSize B5 Field Value Type Description PaperSize Executive US Executive Declaration public const PaperSize Executive Field Value Type Description PaperSize Legal US legal. 8.5 ✕ 14 inch 216 ✕ 356 millimeter Declaration public const PaperSize Legal Field Value Type Description PaperSize Letter US letter. 8.5 ✕ 11 inch 216 ✕ 279 millimeter Declaration public const PaperSize Letter Field Value Type Description PaperSize PrinterDefault Default paper size of a printer. Declaration public const PaperSize PrinterDefault Field Value Type Description PaperSize value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronPrint.Printer.html": {
    "href": "api/IronPrint.Printer.html",
    "title": "Class Printer | C# Print API | IronPrint",
    "keywords": "Class Printer The Printer class allows you to easily print various file types including: PDF PNG JPG BMP TIFF You can achieve this by passing either a file path or file data as a byte[]. Call `Printer.Print()` for silent printing Call `Printer.ShowPrintDialog()` for display the print dialog. We also provide an `Async` functions to prevent the print operation from blocking your thread. Inheritance System.Object Printer Namespace : IronPrint Assembly : IronPrint.dll Syntax public static class Printer : Object Remarks Note: The print result and print dialog may vary based on your platform. ------------------------------------------------ Supports: Project Types: MAUI, WPF, Windows Forms .NET version: .NET Framework 4.6.2 and above, .NET3.1 and above (including .NET5 .NET6 .NET7 and .NET8) OS: Windows, Android, iOS, macOS When working with .NET Core projects (including .NET 5 and above), specifying the target OS in your .csproj file using the TargetFrameworks property is indeed necessary. This ensures that IronPrint can utilize OS-specific UI components for printing operations on your target platform. For example, if you’re targeting Windows, Android, iOS, or macOS, you should adjust your TargetFrameworks accordingly. Change net6.0 to net6.0-windows, net6.0-android, net6.0-ios, net6.0-macos, or net6.0-maccatalyst, depending on your desired platform. you can specify multiple TargetFrameworks for your cross-platform project e.g. `net6.0-ios;net6.0-macos;net6.0-maccatalyst;net6.0-android;` Note: For Android projects `Printer.Initialize(Android.Content.Context mainActivity)` needs to be called before printing. Methods GetPrinterNames() Retrieve a list of avaliable printer names from your OS. Declaration public static List<string> GetPrinterNames() Returns Type Description System.Collections.Generic.List < System.String > A list of printer names. GetPrinterNamesAsync() Retrieve a list of avaliable printer names from your OS asynchronously. Declaration public static Task<List<string>> GetPrinterNamesAsync() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List < System.String >> An awaitable task that returns a list of printer names. Print(Byte[], PrintSettings) Silently print (without a dialog) from a PDF or an image file data. Declaration public static void Print(byte[] fileData, PrintSettings settings = null) Parameters Type Name Description System.Byte [] fileData A PDF or an image file data in byte[] PrintSettings settings (Optional) The PrintSettings to use for printing. Remarks Note: If this operation block your thread, Please use PrintAsync(Byte[], PrintSettings) instead Note: In mobile, Silently print is not possible. This operation will show print dialog anyways Print(String, PrintSettings) Silently print (without a dialog) from a PDF or an image file path. Declaration public static void Print(string path, PrintSettings settings = null) Parameters Type Name Description System.String path The path of a PDF or an image. PrintSettings settings (Optional) The PrintSettings to use for printing. Remarks Note: If this operation block your thread, Please use PrintAsync(String, PrintSettings) instead Note: In mobile, Silently print is not possible. This operation will show print dialog anyways PrintAsync(Byte[], PrintSettings) Silently print asyncronously (without a dialog) from a PDF or an image file data. Declaration public static Task PrintAsync(byte[] fileData, PrintSettings settings = null) Parameters Type Name Description System.Byte [] fileData A PDF or an image file data in byte[] PrintSettings settings (Optional) The PrintSettings to use for printing. Returns Type Description System.Threading.Tasks.Task An awaitable task that starts printing. Remarks Note: In mobile, Silently print is not possible. This operation will show print dialog anyways PrintAsync(String, PrintSettings) Silently print asyncronously (without a dialog) from a PDF or an image file path. Declaration public static Task PrintAsync(string path, PrintSettings settings = null) Parameters Type Name Description System.String path The path of a PDF or an image file. PrintSettings settings (Optional) The PrintSettings to use for printing. Returns Type Description System.Threading.Tasks.Task An awaitable task that starts printing. Remarks Note: In mobile, Silently print is not possible. This operation will show print dialog anyways ShowPrintDialog(Byte[], PrintSettings) Shows a print dialog asynchronously for a PDF or an image file data in byte[]. The visual and functional aspects of the print dialog may vary based on your platform. Declaration public static void ShowPrintDialog(byte[] fileData, PrintSettings settings = null) Parameters Type Name Description System.Byte [] fileData A PDF or an image file data in byte[] PrintSettings settings (Optional) The PrintSettings to use for printing. Remarks Note: If this operation block your thread, Please use ShowPrintDialogAsync(Byte[], PrintSettings) instead ShowPrintDialog(String, PrintSettings) Shows a print dialog for a PDF or an image path. The visual and functional aspects of the print dialog may vary based on your platform. Declaration public static void ShowPrintDialog(string path, PrintSettings settings = null) Parameters Type Name Description System.String path The path of a document. PrintSettings settings (Optional) The PrintSettings to use for printing. Remarks Note: If this operation block your thread, Please use ShowPrintDialogAsync(String, PrintSettings) instead ShowPrintDialogAsync(Byte[], PrintSettings) Shows a print dialog asynchronously for a PDF or an image file data in byte[]. The visual and functional aspects of the print dialog may vary based on your platform. Declaration public static Task ShowPrintDialogAsync(byte[] fileData, PrintSettings settings = null) Parameters Type Name Description System.Byte [] fileData A PDF or an image file data in byte[] PrintSettings settings (Optional) The PrintSettings to use for printing. Returns Type Description System.Threading.Tasks.Task An awaitable task that shows a printing dialog. ShowPrintDialogAsync(String, PrintSettings) Shows a print dialog asynchronously for a PDF or an image path. The visual and functional aspects of the print dialog may vary based on your platform. Declaration public static Task ShowPrintDialogAsync(string path, PrintSettings settings = null) Parameters Type Name Description System.String path The path of a document. PrintSettings settings (Optional) The PrintSettings to use for printing. Returns Type Description System.Threading.Tasks.Task An awaitable task that shows a printing dialog."
  },
  "api/IronPrint.PrintSettings.html": {
    "href": "api/IronPrint.PrintSettings.html",
    "title": "Class PrintSettings | C# Print API | IronPrint",
    "keywords": "Class PrintSettings A print settings class to use with a IronPrint.Printer functions as an optional parameters. Inheritance System.Object PrintSettings Namespace : IronPrint Assembly : IronPrint.dll Syntax public class PrintSettings : Object Remarks These settings might be overridden by the settings that will be set in the print dialog, as the print dialog is optional and may be invoked using IronPrint.Printer.ShowPrintDialog() or IronPrint.Printer.ShowPrintDialogAsync(). Use DefaultSettings to access a predefined set of default settings. Constructors PrintSettings() Initializes a new instance of the PrintSettings class with default values. Declaration public PrintSettings() Remarks Alternative, you can use DefaultSettings to access a predefined set of default settings. Properties DefaultSettings Initializes a new instance of the PrintSettings class with default values. Declaration public static PrintSettings DefaultSettings { get; } Property Value Type Description PrintSettings Dpi Intended print resolution in dots per inch. Default value is 300 which is a common value used in commercial printing. Declaration public int Dpi { get; set; } Property Value Type Description System.Int32 Remarks The actual DPI used for printing might be limited by the capabilities of the printer. Flatten Flatten the PDF before printing, which is useful for displaying form field values and images. Declaration public bool Flatten { get; set; } Property Value Type Description System.Boolean Remarks The default value is true , indicating that the PDF will be flattened before printing. Grayscale A value indicating whether to print in grayscale. Declaration public bool Grayscale { get; set; } Property Value Type Description System.Boolean Remarks The default value is false , indicating an attempt to print in color. NumberOfCopies The number of identical copies to be generated when printing a document. Default value is 1 copy Declaration public int NumberOfCopies { get; set; } Property Value Type Description System.Int32 Remarks Note: In certain platforms, there may be limitations that prevent the accurate reproduction of multiple copies. In such cases, the specified value of NumberOfCopies might be ignored, and only one copy will be printed. PaperMargins The margins to use for printing in millimeters. The default value is null , indicating the use of the default margins provided by the printer. Declaration public Nullable<Margins> PaperMargins { get; set; } Property Value Type Description System.Nullable < Margins > PaperOrientation The paper orientation. E.g. Automatic, Portrait or Landscape. Default value is Automatic Declaration public PaperOrientation PaperOrientation { get; set; } Property Value Type Description PaperOrientation PaperSize Set an paper size used by the printer. Default value is PrinterDefault Declaration public PaperSize PaperSize { get; set; } Property Value Type Description PaperSize PrinterName The name of the printer to use for printing. Default value is null which means the current default printer of the operating system will be used. Declaration public string PrinterName { get; set; } Property Value Type Description System.String Remarks If you choose the printer in a PrintDialog, this setting will be ignored. To obtain the available printer names, you can use GetPrinterNames() or GetPrinterNamesAsync() to fetch the printer name list."
  }
}
{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronZIP: The All-in-One Archive Library for .NET | C# Zip API | IronZIP",
    "keywords": "IronZIP: The All-in-One Archive Library for .NET IronZIP is an archive compression and decompression library developed by Iron Software. In addition to the widely used ZIP format, it can also handle TAR, GZIP, and BZIP2. Features of IronQR Extract content from compressed archives Append files to existing ZIP archives and generate new ZIP files Create archives with different levels of compression (levels 0 - 9) Get Started Quickstart Guide: https://ironsoftware.com/csharp/zip/docs/ Install with NuGet: https://www.nuget.org/packages/IronZip/ Compatibility .NET Version Support: C# , VB.NET , F# .NET 7, 6 , 5, and Core 3.1+ .NET Standard (2.0+) .NET Framework (4.6.2+) Operating Systems and Environments Support: Windows (10+, Server 2018+) Linux (Ubuntu, Debian, CentOS, etc.) macOS (10+) iOS (12+) Android API 21+ (v5 “Lollipop”) Docker (Windows, Linux, Azure) Azure (VPS, WebApp, Function) AWS (EC2, Lambda) .NET Project Types Support: Web (Blazor & WebForms) Mobile (Xamarin & MAUI) Desktop (WPF & MAUI) Console (App & Library) C# Code Examples using IronZip; // Create an empty ZIP using (var archive = new IronZipArchive()) { // Add files to the ZIP archive.AddArchiveEntry(\"./assets/image1.png\"); archive.AddArchiveEntry(\"./assets/image2.png\"); // Export the ZIP file archive.SaveAs(\"output.zip\"); } using IronZip; // Extract ZIP IronZipArchive.ExtractArchiveToDirectory(\"output.zip\", \"extracted\"); using IronZip; // Open existing ZIP using (var archive = new IronZipArchive(\"existing.zip\")) { // Add files archive.AddArchiveEntry(\"./assets/image3.png\"); archive.AddArchiveEntry(\"./assets/image4.png\"); // Export the ZIP file archive.SaveAs(\"result.zip\"); } Documentation More Code Samples : https://ironsoftware.com/csharp/zip/examples/qr-quickstart/ API Reference : https://ironsoftware.com/csharp/zip/object-reference/api/ Tutorials : https://ironsoftware.com/csharp/zip/tutorials/create-read-extract-zip/ Support : developers@ironsoftware.com"
  },
  "api/IronZip.html": {
    "href": "api/IronZip.html",
    "title": "Namespace IronZip | C# Zip API | IronZIP",
    "keywords": "Namespace IronZip Classes IronBaseArchive Base class for Iron Software Archives IronBZip2Archive An IronBZip2Archive for bzip2-type \".bz2\" Archives IronGZipArchive An IronGZipArchive for gzip-type \".gz\" Archives IronTarArchive An IronTarArchive for tar-type \".tar\" Archives IronZipArchive An IronZipArchive for ZIP-type \".zip\" Archives License Allows IronZip license keys to be applied globally across an application."
  },
  "api/IronZip.IronBaseArchive.html": {
    "href": "api/IronZip.IronBaseArchive.html",
    "title": "Class IronBaseArchive | C# Zip API | IronZIP",
    "keywords": "Class IronBaseArchive Base class for Iron Software Archives Inheritance System.Object IronBaseArchive IronBZip2Archive IronGZipArchive IronTarArchive IronZipArchive Implements System.IDisposable Namespace : IronZip Assembly : IronZip.dll Syntax public abstract class IronBaseArchive : Object Constructors IronBaseArchive() Declaration protected IronBaseArchive() Fields _internalStream Declaration protected MemoryStream _internalStream Field Value Type Description System.IO.MemoryStream _storedArchivePath Declaration protected string _storedArchivePath Field Value Type Description System.String isDisposed Declaration protected bool isDisposed Field Value Type Description System.Boolean Methods CheckLicense() Declaration protected static void CheckLicense() Dispose() Declaration public virtual void Dispose() SaveAs(String) Save the archive to the specified path Declaration public abstract void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Remarks Users cannot add additional entries after saving Implements System.IDisposable"
  },
  "api/IronZip.IronBZip2Archive.html": {
    "href": "api/IronZip.IronBZip2Archive.html",
    "title": "Class IronBZip2Archive | C# Zip API | IronZIP",
    "keywords": "Class IronBZip2Archive An IronBZip2Archive for bzip2-type \".bz2\" Archives Inheritance System.Object IronBaseArchive IronBZip2Archive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronBZip2Archive : IronBaseArchive Constructors IronBZip2Archive() Creates a blank Archive with a filename. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronBZip2Archive() IronBZip2Archive(String) Open an existing Archive with a filename. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronBZip2Archive(string ArchivePath) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: /output/a.bz2 You may use an absolute path. Methods AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String[]) Adds each archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string[] EntryFilePaths) Parameters Type Name Description System.String [] EntryFilePaths File paths to the archive entries to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String) Creates an Archive with a specific file to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronBZip2Archive FromFile(string FilePath) Parameters Type Name Description System.String FilePath File Entry to add to the Archive Returns Type Description IronBZip2Archive Returns the constructed IronBZip2Archive with the file entry added. FromFiles(String[]) Creates an Archive with some files to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronBZip2Archive FromFiles(string[] Paths) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive Returns Type Description IronBZip2Archive Returns the constructed IronBZip2Archive with the file entries added. SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.IronGZipArchive.html": {
    "href": "api/IronZip.IronGZipArchive.html",
    "title": "Class IronGZipArchive | C# Zip API | IronZIP",
    "keywords": "Class IronGZipArchive An IronGZipArchive for gzip-type \".gz\" Archives Inheritance System.Object IronBaseArchive IronGZipArchive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronGZipArchive : IronBaseArchive Constructors IronGZipArchive(Int32) Creates a blank Archive. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronGZipArchive(int Compression = 9) Parameters Type Name Description System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. IronGZipArchive(String, Int32) Open an existing Archive with a filename. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronGZipArchive(string ArchivePath, int Compression = 9) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: a.gz You may use an absolute path. System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Methods AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String[]) Adds each archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string[] EntryFilePaths) Parameters Type Name Description System.String [] EntryFilePaths File paths to the archive entries to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to ExtractTGZArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractTGZArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String, Int32) Creates an Archive with a specific file to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronGZipArchive FromFile(string FilePath, int Compression = 9) Parameters Type Name Description System.String FilePath File Entry to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronGZipArchive Returns the constructed IronZipArchive with the file entry added. FromFiles(String[], Int32) Creates an Archive with some files to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronGZipArchive FromFiles(string[] Paths, int Compression = 9) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronGZipArchive Returns the constructed IronGZipArchive with the file entries added. SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.IronTarArchive.html": {
    "href": "api/IronZip.IronTarArchive.html",
    "title": "Class IronTarArchive | C# Zip API | IronZIP",
    "keywords": "Class IronTarArchive An IronTarArchive for tar-type \".tar\" Archives Inheritance System.Object IronBaseArchive IronTarArchive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronTarArchive : IronBaseArchive Constructors IronTarArchive() Creates a blank Archive. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronTarArchive() IronTarArchive(String) Open an existing Archive. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronTarArchive(string ArchivePath) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: a.tar You may use an absolute path. Methods AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String[]) Adds each archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string[] EntryFilePaths) Parameters Type Name Description System.String [] EntryFilePaths File paths to the archive entries to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String) Creates an Archive with a specific file to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronTarArchive FromFile(string FilePath) Parameters Type Name Description System.String FilePath File Entry to add to the Archive Returns Type Description IronTarArchive Returns the constructed IronTarArchive with the file entry added. FromFiles(String[]) Creates an Archive with some files to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronTarArchive FromFiles(string[] Paths) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive Returns Type Description IronTarArchive Returns the constructed IronTarArchive with the file entries added. GetArchiveEntryNames() Load the entry / entries of an existing Archive Declaration public List<string> GetArchiveEntryNames() Returns Type Description System.Collections.Generic.List < System.String > SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.IronZipArchive.html": {
    "href": "api/IronZip.IronZipArchive.html",
    "title": "Class IronZipArchive | C# Zip API | IronZIP",
    "keywords": "Class IronZipArchive An IronZipArchive for ZIP-type \".zip\" Archives Inheritance System.Object IronBaseArchive IronZipArchive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronZipArchive : IronBaseArchive Constructors IronZipArchive(Int32) Creates a blank Archive. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronZipArchive(int Compression = 9) Parameters Type Name Description System.Int32 Compression IronZipArchive(String, Int32) Open an existing Archive. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public IronZipArchive(string ArchivePath, int Compression = 9) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: a.zip You may use an absolute path. System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Methods AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String[]) Adds each archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string[] EntryFilePaths) Parameters Type Name Description System.String [] EntryFilePaths File paths to the archive entries to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String, Int32) Creates an Archive with a specific file to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronZipArchive FromFile(string FilePath, int Compression = 9) Parameters Type Name Description System.String FilePath File Entry to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronZipArchive Returns the constructed IronZipArchive with the file entry added. FromFiles(String[], Int32) Creates an Archive with some files to add to it. Please use in a using block. This archive must be disposed and will automatically save on disposal. Declaration public static IronZipArchive FromFiles(string[] Paths, int Compression = 9) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronZipArchive Returns the constructed IronZipArchive with the file entries added. GetArchiveEntryNames() Load the entry / entries of an existing Archive Declaration public List<string> GetArchiveEntryNames() Returns Type Description System.Collections.Generic.List < System.String > SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.License.html": {
    "href": "api/IronZip.License.html",
    "title": "Class License | C# Zip API | IronZIP",
    "keywords": "Class License Allows IronZip license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronZip Assembly : IronZip.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronZIP is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in LicenseKey property, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironsoftware.com/csharp/zip/licensing/ and https://ironsoftware.com/csharp/zip/how-to/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean true if the license key given is valid. LicenseKey Get Licensed at https://ironsoftware.com/csharp/qr/licensing/ For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronZip.LicenseKey\" value=\"IronZip-LICENSE-KEY\"/> within the appSettings node. See https://ironsoftware.com/csharp/qr/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronZip.LicenseKey\" and the value is a valid IronZip trial or full license key. See https://ironsoftware.com/csharp/qr/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods IsValidLicense(String) Determines whether a string license key is valid. See https://ironsoftware.com/csharp/zip/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string licenseKey) Parameters Type Name Description System.String licenseKey IronZip license key as a string Returns Type Description System.Boolean true if the license key given is valid."
  }
}
{
  "api/index.html": {
    "href": "api/index.html",
    "title": "IronZIP: The All-in-One Archive Library for .NET | C# Zip API | IronZIP",
    "keywords": "IronZIP: The All-in-One Archive Library for .NET IronZIP is an archive compression and decompression library developed by Iron Software. In addition to the widely used ZIP format, it can also handle TAR, GZIP, and BZIP2. Features of IronQR Extract content from compressed archives Append files to existing ZIP archives and generate new ZIP files Create archives with different levels of compression (levels 0 - 9) Get Started Quickstart Guide: https://ironsoftware.com/csharp/zip/docs/ Install with NuGet: https://www.nuget.org/packages/IronZip/ Compatibility .NET Version Support C# , VB.NET , F# .NET 7, 6 , 5, and Core 3.1+ .NET Standard (2.0+) .NET Framework (4.6.2+) Operating Systems and Environments Support Windows (10+, Server 2018+) Linux (Ubuntu, Debian, CentOS, etc.) macOS (10+) iOS (12+) Android API 21+ (v5 \"Lollipop\") Docker (Windows, Linux, Azure) Azure (VPS, WebApp, Function) AWS (EC2, Lambda) .NET Project Types Support Web (Blazor & WebForms) Mobile (Xamarin & MAUI) Desktop (WPF & MAUI) Console (App & Library) C# Code Examples using IronZip; // Create an empty ZIP using (var archive = new IronZipArchive()) { // Add files to the ZIP archive.AddArchiveEntry(\"./assets/image1.png\"); archive.AddArchiveEntry(\"./assets/image2.png\"); // Export the ZIP file archive.SaveAs(\"output.zip\"); } using IronZip; // Extract ZIP IronZipArchive.ExtractArchiveToDirectory(\"output.zip\", \"extracted\"); using IronZip; // Open existing ZIP using (var archive = new IronZipArchive(\"existing.zip\")) { // Add files archive.AddArchiveEntry(\"./assets/image3.png\"); archive.AddArchiveEntry(\"./assets/image4.png\"); // Export the ZIP file archive.SaveAs(\"result.zip\"); } Documentation More Code Samples : https://ironsoftware.com/csharp/zip/examples/qr-quickstart/ API Reference : https://ironsoftware.com/csharp/zip/object-reference/api/ Tutorials : https://ironsoftware.com/csharp/zip/tutorials/create-read-extract-zip/ Support : developers@ironsoftware.com"
  },
  "api/IronZip.Entry.html": {
    "href": "api/IronZip.Entry.html",
    "title": "Class Entry | C# Zip API | IronZIP",
    "keywords": "Class Entry Inheritance System.Object Entry Namespace : IronZip Assembly : IronZip.dll Syntax public class Entry : Object Constructors Entry(ZipEntry) Declaration public Entry(ZipEntry zipEntry) Parameters Type Name Description ICSharpCode.SharpZipLib.Zip.ZipEntry zipEntry Properties AESEncryptionStrength Declaration public int AESEncryptionStrength { get; set; } Property Value Type Description System.Int32 AESKeySize Declaration public int AESKeySize { get; set; } Property Value Type Description System.Int32 AESOverheadSize Declaration public int AESOverheadSize { get; set; } Property Value Type Description System.Int32 AESSaltLen Declaration public int AESSaltLen { get; set; } Property Value Type Description System.Int32 CanDecompress Declaration public bool CanDecompress { get; set; } Property Value Type Description System.Boolean CentralHeaderRequiresZip64 Declaration public bool CentralHeaderRequiresZip64 { get; set; } Property Value Type Description System.Boolean Comment Declaration public string Comment { get; set; } Property Value Type Description System.String CompressedSize Declaration public long CompressedSize { get; set; } Property Value Type Description System.Int64 CompressionMethod Declaration public EncryptionMethods CompressionMethod { get; set; } Property Value Type Description EncryptionMethods Crc Declaration public long Crc { get; set; } Property Value Type Description System.Int64 CryptoCheckValue Declaration public int CryptoCheckValue { get; set; } Property Value Type Description System.Int32 DateTime Declaration public DateTime DateTime { get; set; } Property Value Type Description System.DateTime DosTime Declaration public long DosTime { get; set; } Property Value Type Description System.Int64 EncryptionOverheadSize Declaration public int EncryptionOverheadSize { get; set; } Property Value Type Description System.Int32 ExternalFileAttributes Declaration public int ExternalFileAttributes { get; set; } Property Value Type Description System.Int32 ExtraData Declaration public byte[] ExtraData { get; set; } Property Value Type Description System.Byte [] Flags Declaration public int Flags { get; set; } Property Value Type Description System.Int32 HasCrc Declaration public bool HasCrc { get; set; } Property Value Type Description System.Boolean HostSystem Declaration public int HostSystem { get; set; } Property Value Type Description System.Int32 IsCrypted Declaration public bool IsCrypted { get; set; } Property Value Type Description System.Boolean IsDirectory Declaration public bool IsDirectory { get; set; } Property Value Type Description System.Boolean IsDosEntry Declaration public bool IsDosEntry { get; set; } Property Value Type Description System.Boolean IsFile Declaration public bool IsFile { get; set; } Property Value Type Description System.Boolean IsUnicodeText Declaration public bool IsUnicodeText { get; set; } Property Value Type Description System.Boolean LocalHeaderRequiresZip64 Declaration public bool LocalHeaderRequiresZip64 { get; set; } Property Value Type Description System.Boolean Name Declaration public string Name { get; set; } Property Value Type Description System.String Offset Declaration public long Offset { get; set; } Property Value Type Description System.Int64 Size Declaration public long Size { get; set; } Property Value Type Description System.Int64 Version Declaration public int Version { get; set; } Property Value Type Description System.Int32 VersionMadeBy Declaration public int VersionMadeBy { get; set; } Property Value Type Description System.Int32 ZipFileIndex Declaration public long ZipFileIndex { get; set; } Property Value Type Description System.Int64"
  },
  "api/IronZip.Enum.EncryptionMethods.html": {
    "href": "api/IronZip.Enum.EncryptionMethods.html",
    "title": "Class EncryptionMethods | C# Zip API | IronZIP",
    "keywords": "Class EncryptionMethods Enumeration representing different encryption methods. Inheritance System.Object EncryptionMethods Namespace : IronZip.Enum Assembly : IronZip.dll Syntax public sealed class EncryptionMethods : Enum Fields AES128 AES 128-bit password-based encryption method. Declaration public const EncryptionMethods AES128 Field Value Type Description EncryptionMethods AES256 AES 256-bit password-based encryption method. Declaration public const EncryptionMethods AES256 Field Value Type Description EncryptionMethods Traditional Traditional password-based encryption method. Declaration public const EncryptionMethods Traditional Field Value Type Description EncryptionMethods value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/IronZip.Enum.html": {
    "href": "api/IronZip.Enum.html",
    "title": "Namespace IronZip.Enum | C# Zip API | IronZIP",
    "keywords": "Namespace IronZip.Enum Classes EncryptionMethods Enumeration representing different encryption methods."
  },
  "api/IronZip.html": {
    "href": "api/IronZip.html",
    "title": "Namespace IronZip | C# Zip API | IronZIP",
    "keywords": "Namespace IronZip Classes Entry IronBaseArchive Base class for Iron Software Archives IronBZip2Archive An IronBZip2Archive for bzip2-type \".bz2\" Archives IronGZipArchive An IronGZipArchive for gzip-type \".gz\" Archives IronTarArchive An IronTarArchive for tar-type \".tar\" Archives IronZipArchive An IronZipArchive for ZIP-type \".zip\" Archives License Allows IronZip license keys to be applied globally across an application. ZipSaveOptions Provides options for configuring an IronZip archive."
  },
  "api/IronZip.IronBaseArchive.html": {
    "href": "api/IronZip.IronBaseArchive.html",
    "title": "Class IronBaseArchive | C# Zip API | IronZIP",
    "keywords": "Class IronBaseArchive Base class for Iron Software Archives Inheritance System.Object IronBaseArchive IronBZip2Archive IronGZipArchive IronTarArchive IronZipArchive Implements System.IDisposable Namespace : IronZip Assembly : IronZip.dll Syntax public abstract class IronBaseArchive : Object Constructors IronBaseArchive() Declaration protected IronBaseArchive() Fields _internalStream Internal MemoryStream to store ZipOutputStream Declaration protected MemoryStream _internalStream Field Value Type Description System.IO.MemoryStream _storedArchivePath File path to store the Archive. Declaration protected string _storedArchivePath Field Value Type Description System.String isDisposed Dispose method Declaration protected bool isDisposed Field Value Type Description System.Boolean Methods CheckLicense() Check the license before using IronZIP Declaration protected static void CheckLicense() Exceptions Type Condition IronSoftware.Exceptions.LicensingException Dispose() Declaration public virtual void Dispose() Save() Save the archive Declaration public abstract void Save() Remarks Users cannot add additional entries after saving SaveAs(String) Save the archive to the specified path Declaration public abstract void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Remarks Users cannot add additional entries after saving Implements System.IDisposable"
  },
  "api/IronZip.IronBZip2Archive.html": {
    "href": "api/IronZip.IronBZip2Archive.html",
    "title": "Class IronBZip2Archive | C# Zip API | IronZIP",
    "keywords": "Class IronBZip2Archive An IronBZip2Archive for bzip2-type \".bz2\" Archives Inheritance System.Object IronBaseArchive IronBZip2Archive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronBZip2Archive : IronBaseArchive Constructors IronBZip2Archive() Creates a blank Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronBZip2Archive() IronBZip2Archive(String) Open an existing Archive with a filename. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronBZip2Archive(string ArchivePath) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: /output/a.bz2 You may use an absolute path. Methods Add(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void Add(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String) Creates an Archive with a specific file to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronBZip2Archive FromFile(string FilePath) Parameters Type Name Description System.String FilePath File Entry to add to the Archive Returns Type Description IronBZip2Archive Returns the constructed IronBZip2Archive with the file entry added. FromFiles(String[]) Creates an Archive with some files to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronBZip2Archive FromFiles(string[] Paths) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive Returns Type Description IronBZip2Archive Returns the constructed IronBZip2Archive with the file entries added. Save() Save the archive Declaration public override void Save() Overrides IronBaseArchive.Save() Remarks Users cannot add additional entries after saving SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.IronGZipArchive.html": {
    "href": "api/IronZip.IronGZipArchive.html",
    "title": "Class IronGZipArchive | C# Zip API | IronZIP",
    "keywords": "Class IronGZipArchive An IronGZipArchive for gzip-type \".gz\" Archives Inheritance System.Object IronBaseArchive IronGZipArchive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronGZipArchive : IronBaseArchive Constructors IronGZipArchive(Int32) Creates a blank Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronGZipArchive(int Compression = 9) Parameters Type Name Description System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. IronGZipArchive(String, Int32) Open an existing Archive with a filename. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronGZipArchive(string ArchivePath, int Compression = 9) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: a.gz You may use an absolute path. System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Methods Add(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void Add(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to ExtractTGZArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractTGZArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String, Int32) Creates an Archive with a specific file to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronGZipArchive FromFile(string FilePath, int Compression = 9) Parameters Type Name Description System.String FilePath File Entry to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronGZipArchive Returns the constructed IronZipArchive with the file entry added. FromFiles(String[], Int32) Creates an Archive with some files to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronGZipArchive FromFiles(string[] Paths, int Compression = 9) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronGZipArchive Returns the constructed IronGZipArchive with the file entries added. Save() Save the archive Declaration public override void Save() Overrides IronBaseArchive.Save() Remarks Users cannot add additional entries after saving SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.IronTarArchive.html": {
    "href": "api/IronZip.IronTarArchive.html",
    "title": "Class IronTarArchive | C# Zip API | IronZIP",
    "keywords": "Class IronTarArchive An IronTarArchive for tar-type \".tar\" Archives Inheritance System.Object IronBaseArchive IronTarArchive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronTarArchive : IronBaseArchive Constructors IronTarArchive() Creates a blank Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronTarArchive() IronTarArchive(String) Open an existing Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronTarArchive(string ArchivePath) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: a.tar You may use an absolute path. Methods Add(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void Add(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() ExtractArchiveToDirectory(String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to FromFile(String) Creates an Archive with a specific file to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronTarArchive FromFile(string FilePath) Parameters Type Name Description System.String FilePath File Entry to add to the Archive Returns Type Description IronTarArchive Returns the constructed IronTarArchive with the file entry added. FromFiles(String[]) Creates an Archive with some files to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronTarArchive FromFiles(string[] Paths) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive Returns Type Description IronTarArchive Returns the constructed IronTarArchive with the file entries added. GetArchiveEntryNames() Load the entry / entries of an existing Archive Declaration public List<string> GetArchiveEntryNames() Returns Type Description System.Collections.Generic.List < System.String > Save() Save the archive Declaration public override void Save() Overrides IronBaseArchive.Save() Remarks Users cannot add additional entries after saving SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.IronZipArchive.html": {
    "href": "api/IronZip.IronZipArchive.html",
    "title": "Class IronZipArchive | C# Zip API | IronZIP",
    "keywords": "Class IronZipArchive An IronZipArchive for ZIP-type \".zip\" Archives Inheritance System.Object IronBaseArchive IronZipArchive Implements System.IDisposable Inherited Members IronBaseArchive._storedArchivePath IronBaseArchive._internalStream IronBaseArchive.isDisposed IronBaseArchive.CheckLicense() Namespace : IronZip Assembly : IronZip.dll Syntax public class IronZipArchive : IronBaseArchive Constructors IronZipArchive(Byte[], String) Open an existing protected Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronZipArchive(byte[] Bytes, string Password = null) Parameters Type Name Description System.Byte [] Bytes Byte[] containing the existing archive. System.String Password Password for opening the protected archive. IronZipArchive(Int32) Creating an empty archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronZipArchive(int Compression = 9) Parameters Type Name Description System.Int32 Compression Optionally sets the compression level. 0 is the weakest, 9 is the highest compression, with 9 as the default value. IronZipArchive(Stream, String) Open an existing protected Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronZipArchive(Stream StreamPath, string Password = null) Parameters Type Name Description System.IO.Stream StreamPath Stream containing the existing archive. System.String Password Password for opening the protected archive. IronZipArchive(String, String) Open an existing Archive. Please use in a using block. Use the SaveAs method to export the archive. Declaration public IronZipArchive(string ArchivePath, string Password = null) Parameters Type Name Description System.String ArchivePath File path to open the existing Archive. Example: a.zip You may use an absolute path. System.String Password Password for opening the protected archive. Properties Comment Sets/Gets the comment for the entire archive. Declaration public string Comment { get; set; } Property Value Type Description System.String Count Retrieves the total number of entries in the archive. Declaration public int Count { get; } Property Value Type Description System.Int32 The count of entries within the archive. ZipSaveOptions Set the security settings for Zip Archive Declaration public ZipSaveOptions ZipSaveOptions { get; set; } Property Value Type Description ZipSaveOptions Methods Add(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void Add(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add AddArchiveEntry(String) Adds an archive entry (file) to the Archive. These entries will appear as files when the Archive is extracted. Declaration public void AddArchiveEntry(string EntryFilePath) Parameters Type Name Description System.String EntryFilePath Filepath to the archive entry to add Compression(Int32) Sets the compression level (default is 9). Declaration public void Compression(int Compression) Parameters Type Name Description System.Int32 Compression 0 is weakest, 9 is highest compression. 9 is default. Contains(String) Checks if an entry with the specified name exists in the archive. Declaration public bool Contains(string EntryName) Parameters Type Name Description System.String EntryName The name of the entry to check for existence. Returns Type Description System.Boolean true if an entry with the specified name exists in the archive; otherwise, false . Delete(String) Deletes an entry from the archive. Declaration public void Delete(string EntryName) Parameters Type Name Description System.String EntryName The name of the entry to be deleted. Dispose() Declaration public override void Dispose() Overrides IronBaseArchive.Dispose() Encrypt(String, EncryptionMethods) Sets the password for a specific encryption method. Declaration public void Encrypt(string Password, EncryptionMethods EncryptionMethods) Parameters Type Name Description System.String Password The password to set. EncryptionMethods EncryptionMethods The encryption method to use. Supported types are traditional, AES128, and AES256. Entries() Load the entries of an existing Archive Declaration public List<Entry> Entries() Returns Type Description System.Collections.Generic.List < Entry > ExtractArchiveToDirectory(String, String, String) Will load an Archive and extract it to a Directory (System Folder) Declaration public static void ExtractArchiveToDirectory(string ArchiveSourcePath, string SaveDirectoryPath, string Password = null) Parameters Type Name Description System.String ArchiveSourcePath Path to the Archive to extract System.String SaveDirectoryPath Directory to extract files to System.String Password Optional password to open the archive FromArchive(String, String) Creates an instance of IronZipArchive from an existing archive. Declaration public static IronZipArchive FromArchive(string ArchivePath, string Password = null) Parameters Type Name Description System.String ArchivePath The path to the existing archive. System.String Password The password for decryption (null if not encrypted). Returns Type Description IronZipArchive An instance of IronZipArchive representing the specified archive. FromDirectory(String, Int32) Declaration public static IronZipArchive FromDirectory(string DirectoryPath, int Compression = 9) Parameters Type Name Description System.String DirectoryPath System.Int32 Compression Returns Type Description IronZipArchive FromFile(String, Int32) Creates an Archive with a specific file to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronZipArchive FromFile(string FilePath, int Compression = 9) Parameters Type Name Description System.String FilePath File Entry to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronZipArchive Returns the constructed IronZipArchive with the file entry added. FromFiles(String[], Int32) Creates an Archive with some files to add to it. Please use in a using block. Use the SaveAs method to export the archive. Declaration public static IronZipArchive FromFiles(string[] Paths, int Compression = 9) Parameters Type Name Description System.String [] Paths File Entries to add to the Archive System.Int32 Compression Optionally set the compression level. 0 is weakest, 9 is highest compression. 9 is default. Returns Type Description IronZipArchive Returns the constructed IronZipArchive with the file entries added. RemoveEncryption() Remove the encryption password from the zip archive. Declaration public void RemoveEncryption() ReplaceEntry(String, String) Replaces an entry within the archive with a new one. Declaration public void ReplaceEntry(string OldEntry, string NewEntry) Parameters Type Name Description System.String OldEntry The name of the entry to be replaced. System.String NewEntry The name of the new entry to replace the existing one. Save() Save the archive Declaration public override void Save() Overrides IronBaseArchive.Save() Remarks Users cannot add additional entries after saving Save(ZipSaveOptions) Save the archive Declaration public void Save(ZipSaveOptions ZipSaveOptions = null) Parameters Type Name Description ZipSaveOptions ZipSaveOptions Options for IronZipArchive Remarks Users cannot add additional entries after saving SaveAs(String) Save the archive to the specified path Declaration public override void SaveAs(string Path) Parameters Type Name Description System.String Path Save path Overrides IronBaseArchive.SaveAs(String) Remarks Users cannot add additional entries after saving SaveAs(String, ZipSaveOptions) Save the archive to the specified path Declaration public void SaveAs(string Path, ZipSaveOptions ZipSaveOptions = null) Parameters Type Name Description System.String Path Save path ZipSaveOptions ZipSaveOptions Options for IronZipArchive Remarks Users cannot add additional entries after saving SetPassword(String, EncryptionMethods) Sets the password for a specific encryption method. Declaration public void SetPassword(string Password, EncryptionMethods EncryptionMethods) Parameters Type Name Description System.String Password The password to set. EncryptionMethods EncryptionMethods The encryption method to use. Supported types are traditional, AES128, and AES256. Implements System.IDisposable Inherited members _storedArchivePath _internalStream isDisposed CheckLicense()"
  },
  "api/IronZip.License.html": {
    "href": "api/IronZip.License.html",
    "title": "Class License | C# Zip API | IronZIP",
    "keywords": "Class License Allows IronZip license keys to be applied globally across an application. Inheritance System.Object License Namespace : IronZip Assembly : IronZip.dll Syntax public static class License : Object Properties IsLicensed Determines whether this instance of IronZIP is Licensed. Will return false unless a LicenseKey is set to a valid trial or full license key in LicenseKey property, Web.Config , App.Config or appsettings.json in .Net Core. See https://ironsoftware.com/csharp/zip/licensing/ and https://ironsoftware.com/csharp/zip/how-to/license-keys/ Declaration public static bool IsLicensed { get; } Property Value Type Description System.Boolean true if the license key given is valid. LicenseKey Get Licensed at https://ironsoftware.com/csharp/qr/licensing/ For .Net framework applications, a license key can alternatively be added to Web.Config or App.Config XML file using <add key=\"IronZip.LicenseKey\" value=\"IronZip-LICENSE-KEY\"/> within the appSettings node. See https://ironsoftware.com/csharp/qr/docs/license/license-keys/ For .Net Core applications, a license key may be added to appsettings.json where the key name is \"IronZip.LicenseKey\" and the value is a valid IronZip trial or full license key. See https://ironsoftware.com/csharp/qr/licensing/ for licensing options. Declaration public static string LicenseKey { get; set; } Property Value Type Description System.String Methods DisableAppAnalytics() Disables AppAnalytics for IronZip. Limitations apply. Declaration public static void DisableAppAnalytics() IsValidLicense(String) Determines whether a string license key is valid. See https://ironsoftware.com/csharp/zip/licensing/ for trial, development and commercial deployment licensing options. Declaration public static bool IsValidLicense(string licenseKey) Parameters Type Name Description System.String licenseKey IronZip license key as a string Returns Type Description System.Boolean true if the license key given is valid."
  },
  "api/IronZip.ZipSaveOptions.html": {
    "href": "api/IronZip.ZipSaveOptions.html",
    "title": "Class ZipSaveOptions | C# Zip API | IronZIP",
    "keywords": "Class ZipSaveOptions Provides options for configuring an IronZip archive. Inheritance System.Object ZipSaveOptions Namespace : IronZip Assembly : IronZip.dll Syntax public class ZipSaveOptions : Object Constructors ZipSaveOptions() Declaration public ZipSaveOptions() Properties Compression Gets or sets the compression level (default is 9). Declaration public int Compression { get; set; } Property Value Type Description System.Int32 EncryptionMethod Gets or sets the encryption method. Declaration public EncryptionMethods EncryptionMethod { get; set; } Property Value Type Description EncryptionMethods Password Gets or sets the password for encryption (null if not set). Declaration public string Password { get; set; } Property Value Type Description System.String"
  }
}